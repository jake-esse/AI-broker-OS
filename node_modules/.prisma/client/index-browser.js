
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  lastProvider: 'lastProvider',
  lastLogin: 'lastLogin',
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  provider: 'provider',
  email: 'email'
};

exports.Prisma.BrokerScalarFieldEnum = {
  updatedAt: 'updatedAt',
  email: 'email',
  preferences: 'preferences',
  createdAt: 'createdAt',
  oauthTokens: 'oauthTokens',
  apiKeys: 'apiKeys',
  id: 'id',
  companyName: 'companyName',
  userId: 'userId',
  subscriptionTier: 'subscriptionTier'
};

exports.Prisma.EmailConnectionScalarFieldEnum = {
  oauthRefreshToken: 'oauthRefreshToken',
  provider: 'provider',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  errorMessage: 'errorMessage',
  brokerId: 'brokerId',
  imapPasswordEncrypted: 'imapPasswordEncrypted',
  oauthTokenExpiresAt: 'oauthTokenExpiresAt',
  status: 'status',
  imapHost: 'imapHost',
  imapUseSsl: 'imapUseSsl',
  isPrimary: 'isPrimary',
  userId: 'userId',
  oauthAccessToken: 'oauthAccessToken',
  lastChecked: 'lastChecked',
  id: 'id',
  email: 'email',
  imapPort: 'imapPort',
  imapUsername: 'imapUsername'
};

exports.Prisma.LoadScalarFieldEnum = {
  brokerReviewedAt: 'brokerReviewedAt',
  brokerReviewNotes: 'brokerReviewNotes',
  weightLb: 'weightLb',
  shipperName: 'shipperName',
  equipment: 'equipment',
  complexityOverrides: 'complexityOverrides',
  pickupDt: 'pickupDt',
  shipperEmail: 'shipperEmail',
  destZip: 'destZip',
  shipperPhone: 'shipperPhone',
  commodity: 'commodity',
  originZip: 'originZip',
  sourceEmailId: 'sourceEmailId',
  status: 'status',
  reviewedBy: 'reviewedBy',
  riskScore: 'riskScore',
  loadNumber: 'loadNumber',
  sourceType: 'sourceType',
  sourceEmailAccountId: 'sourceEmailAccountId',
  rawEmailText: 'rawEmailText',
  updatedAt: 'updatedAt',
  extractionConfidence: 'extractionConfidence',
  brokerId: 'brokerId',
  missingFields: 'missingFields',
  aiNotes: 'aiNotes',
  marginTarget: 'marginTarget',
  createdAt: 'createdAt',
  priorityLevel: 'priorityLevel',
  createdBy: 'createdBy',
  modifiedBy: 'modifiedBy',
  postToCarriers: 'postToCarriers',
  postToDat: 'postToDat',
  postingDelayMinutes: 'postingDelayMinutes',
  maxCarriersToContact: 'maxCarriersToContact',
  id: 'id',
  preferredRatePerMile: 'preferredRatePerMile',
  complexityFlags: 'complexityFlags',
  requiresHumanReview: 'requiresHumanReview',
  reviewReason: 'reviewReason',
  complexityAnalysis: 'complexityAnalysis',
  brokerReviewStatus: 'brokerReviewStatus',
  assignedSpecialist: 'assignedSpecialist',
  hazmat: 'hazmat',
  totalMiles: 'totalMiles',
  ratePerMile: 'ratePerMile'
};

exports.Prisma.CarrierScalarFieldEnum = {
  updatedAt: 'updatedAt',
  lastContactDate: 'lastContactDate',
  serviceAreas: 'serviceAreas',
  creditRating: 'creditRating',
  createdBy: 'createdBy',
  loadsCompleted: 'loadsCompleted',
  insuranceExpiry: 'insuranceExpiry',
  contactPhone: 'contactPhone',
  preferenceTier: 'preferenceTier',
  createdAt: 'createdAt',
  contactEmail: 'contactEmail',
  notes: 'notes',
  averageRatePerMile: 'averageRatePerMile',
  modifiedBy: 'modifiedBy',
  loadsAccepted: 'loadsAccepted',
  smsEnabled: 'smsEnabled',
  contactName: 'contactName',
  dotNumber: 'dotNumber',
  id: 'id',
  carrierName: 'carrierName',
  isPreferred: 'isPreferred',
  equipmentTypes: 'equipmentTypes',
  status: 'status',
  mcNumber: 'mcNumber',
  phoneNumber: 'phoneNumber',
  emailEnabled: 'emailEnabled',
  loadsOffered: 'loadsOffered'
};

exports.Prisma.QuoteScalarFieldEnum = {
  responseMethod: 'responseMethod',
  sentAt: 'sentAt',
  ratePerMile: 'ratePerMile',
  updatedAt: 'updatedAt',
  rate: 'rate',
  status: 'status',
  id: 'id',
  respondedAt: 'respondedAt',
  carrierMc: 'carrierMc',
  createdAt: 'createdAt',
  loadId: 'loadId',
  carrierId: 'carrierId',
  carrierName: 'carrierName',
  validUntil: 'validUntil',
  carrierEmail: 'carrierEmail',
  notes: 'notes',
  carrierPhone: 'carrierPhone'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  createdAt: 'createdAt',
  role: 'role',
  loadId: 'loadId',
  content: 'content',
  id: 'id',
  brokerId: 'brokerId',
  metadata: 'metadata'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  threadId: 'threadId',
  aiGenerated: 'aiGenerated',
  id: 'id',
  loadId: 'loadId',
  updatedAt: 'updatedAt',
  brokerId: 'brokerId',
  createdAt: 'createdAt',
  status: 'status',
  oauthProvider: 'oauthProvider',
  parentMessageId: 'parentMessageId',
  inReplyTo: 'inReplyTo',
  channel: 'channel',
  direction: 'direction',
  messageId: 'messageId',
  extractedData: 'extractedData',
  fromAddress: 'fromAddress',
  toAddress: 'toAddress',
  ccAddresses: 'ccAddresses',
  aiConfidence: 'aiConfidence',
  subject: 'subject',
  content: 'content',
  attachments: 'attachments'
};

exports.Prisma.EmailAccountScalarFieldEnum = {
  imapPassword: 'imapPassword',
  oauthScope: 'oauthScope',
  imapUseTls: 'imapUseTls',
  imapPort: 'imapPort',
  tokenExpiresAt: 'tokenExpiresAt',
  webhookSubscriptionId: 'webhookSubscriptionId',
  updatedAt: 'updatedAt',
  emailAddress: 'emailAddress',
  lastSyncAt: 'lastSyncAt',
  webhookSecret: 'webhookSecret',
  lastError: 'lastError',
  webhookExpiresAt: 'webhookExpiresAt',
  imapHost: 'imapHost',
  createdAt: 'createdAt',
  errorCount: 'errorCount',
  tenantId: 'tenantId',
  monitorFolders: 'monitorFolders',
  brokerId: 'brokerId',
  processingEnabled: 'processingEnabled',
  autoReplyEnabled: 'autoReplyEnabled',
  accessToken: 'accessToken',
  senderWhitelist: 'senderWhitelist',
  id: 'id',
  createdBy: 'createdBy',
  refreshToken: 'refreshToken',
  senderBlacklist: 'senderBlacklist',
  clientId: 'clientId',
  subjectFilters: 'subjectFilters',
  displayName: 'displayName',
  imapUsername: 'imapUsername',
  provider: 'provider',
  status: 'status'
};

exports.Prisma.EmailProcessingLogScalarFieldEnum = {
  subject: 'subject',
  emailBodyText: 'emailBodyText',
  complexityFlags: 'complexityFlags',
  threadId: 'threadId',
  createdAt: 'createdAt',
  processingStatus: 'processingStatus',
  rawEmailHeaders: 'rawEmailHeaders',
  emailAccountId: 'emailAccountId',
  id: 'id',
  retryCount: 'retryCount',
  emailBodyHtml: 'emailBodyHtml',
  attachmentsInfo: 'attachmentsInfo',
  errorDetails: 'errorDetails',
  receivedAt: 'receivedAt',
  messageId: 'messageId',
  extractionConfidence: 'extractionConfidence',
  senderEmail: 'senderEmail',
  brokerId: 'brokerId',
  intentClassification: 'intentClassification',
  loadId: 'loadId',
  loadNumber: 'loadNumber',
  errorMessage: 'errorMessage',
  processedAt: 'processedAt'
};

exports.Prisma.EmailScalarFieldEnum = {
  messageId: 'messageId',
  rawData: 'rawData',
  content: 'content',
  processedAt: 'processedAt',
  subject: 'subject',
  provider: 'provider',
  fromAddress: 'fromAddress',
  status: 'status',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt',
  id: 'id',
  brokerId: 'brokerId',
  toAddress: 'toAddress'
};

exports.Prisma.LoadBlastScalarFieldEnum = {
  loadId: 'loadId',
  id: 'id',
  createdAt: 'createdAt',
  carrierId: 'carrierId',
  blastType: 'blastType',
  blastStatus: 'blastStatus',
  subjectLine: 'subjectLine',
  messageContent: 'messageContent',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt',
  responseReceivedAt: 'responseReceivedAt',
  responseType: 'responseType',
  responseContent: 'responseContent',
  resendMessageId: 'resendMessageId',
  twilioMessageId: 'twilioMessageId',
  datPostingId: 'datPostingId',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdBy: 'createdBy'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  read: 'read',
  metadata: 'metadata',
  brokerId: 'brokerId',
  createdAt: 'createdAt',
  message: 'message'
};

exports.Prisma.OAuthStateScalarFieldEnum = {
  createdAt: 'createdAt',
  userId: 'userId',
  expiresAt: 'expiresAt',
  state: 'state',
  provider: 'provider'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  updatedAt: 'updatedAt',
  confidenceThresholds: 'confidenceThresholds',
  id: 'id',
  notifications: 'notifications',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Broker: 'Broker',
  EmailConnection: 'EmailConnection',
  Load: 'Load',
  Carrier: 'Carrier',
  Quote: 'Quote',
  ChatMessage: 'ChatMessage',
  Communication: 'Communication',
  EmailAccount: 'EmailAccount',
  EmailProcessingLog: 'EmailProcessingLog',
  Email: 'Email',
  LoadBlast: 'LoadBlast',
  Notification: 'Notification',
  OAuthState: 'OAuthState',
  UserSettings: 'UserSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
