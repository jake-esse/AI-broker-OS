
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Broker
 * 
 */
export type Broker = $Result.DefaultSelection<Prisma.$BrokerPayload>
/**
 * Model EmailConnection
 * 
 */
export type EmailConnection = $Result.DefaultSelection<Prisma.$EmailConnectionPayload>
/**
 * Model Load
 * 
 */
export type Load = $Result.DefaultSelection<Prisma.$LoadPayload>
/**
 * Model Carrier
 * 
 */
export type Carrier = $Result.DefaultSelection<Prisma.$CarrierPayload>
/**
 * Model Quote
 * 
 */
export type Quote = $Result.DefaultSelection<Prisma.$QuotePayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model Communication
 * 
 */
export type Communication = $Result.DefaultSelection<Prisma.$CommunicationPayload>
/**
 * Model EmailAccount
 * 
 */
export type EmailAccount = $Result.DefaultSelection<Prisma.$EmailAccountPayload>
/**
 * Model EmailProcessingLog
 * 
 */
export type EmailProcessingLog = $Result.DefaultSelection<Prisma.$EmailProcessingLogPayload>
/**
 * Model Email
 * 
 */
export type Email = $Result.DefaultSelection<Prisma.$EmailPayload>
/**
 * Model LoadBlast
 * 
 */
export type LoadBlast = $Result.DefaultSelection<Prisma.$LoadBlastPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model OAuthState
 * 
 */
export type OAuthState = $Result.DefaultSelection<Prisma.$OAuthStatePayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.broker`: Exposes CRUD operations for the **Broker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brokers
    * const brokers = await prisma.broker.findMany()
    * ```
    */
  get broker(): Prisma.BrokerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailConnection`: Exposes CRUD operations for the **EmailConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailConnections
    * const emailConnections = await prisma.emailConnection.findMany()
    * ```
    */
  get emailConnection(): Prisma.EmailConnectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.load`: Exposes CRUD operations for the **Load** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loads
    * const loads = await prisma.load.findMany()
    * ```
    */
  get load(): Prisma.LoadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.carrier`: Exposes CRUD operations for the **Carrier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carriers
    * const carriers = await prisma.carrier.findMany()
    * ```
    */
  get carrier(): Prisma.CarrierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quote`: Exposes CRUD operations for the **Quote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quotes
    * const quotes = await prisma.quote.findMany()
    * ```
    */
  get quote(): Prisma.QuoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.communication`: Exposes CRUD operations for the **Communication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communications
    * const communications = await prisma.communication.findMany()
    * ```
    */
  get communication(): Prisma.CommunicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailAccount`: Exposes CRUD operations for the **EmailAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailAccounts
    * const emailAccounts = await prisma.emailAccount.findMany()
    * ```
    */
  get emailAccount(): Prisma.EmailAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailProcessingLog`: Exposes CRUD operations for the **EmailProcessingLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailProcessingLogs
    * const emailProcessingLogs = await prisma.emailProcessingLog.findMany()
    * ```
    */
  get emailProcessingLog(): Prisma.EmailProcessingLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.email`: Exposes CRUD operations for the **Email** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emails
    * const emails = await prisma.email.findMany()
    * ```
    */
  get email(): Prisma.EmailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loadBlast`: Exposes CRUD operations for the **LoadBlast** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoadBlasts
    * const loadBlasts = await prisma.loadBlast.findMany()
    * ```
    */
  get loadBlast(): Prisma.LoadBlastDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oAuthState`: Exposes CRUD operations for the **OAuthState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OAuthStates
    * const oAuthStates = await prisma.oAuthState.findMany()
    * ```
    */
  get oAuthState(): Prisma.OAuthStateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Broker: 'Broker',
    EmailConnection: 'EmailConnection',
    Load: 'Load',
    Carrier: 'Carrier',
    Quote: 'Quote',
    ChatMessage: 'ChatMessage',
    Communication: 'Communication',
    EmailAccount: 'EmailAccount',
    EmailProcessingLog: 'EmailProcessingLog',
    Email: 'Email',
    LoadBlast: 'LoadBlast',
    Notification: 'Notification',
    OAuthState: 'OAuthState',
    UserSettings: 'UserSettings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "broker" | "emailConnection" | "load" | "carrier" | "quote" | "chatMessage" | "communication" | "emailAccount" | "emailProcessingLog" | "email" | "loadBlast" | "notification" | "oAuthState" | "userSettings"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Broker: {
        payload: Prisma.$BrokerPayload<ExtArgs>
        fields: Prisma.BrokerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrokerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrokerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findFirst: {
            args: Prisma.BrokerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrokerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findMany: {
            args: Prisma.BrokerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          create: {
            args: Prisma.BrokerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          createMany: {
            args: Prisma.BrokerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrokerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          delete: {
            args: Prisma.BrokerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          update: {
            args: Prisma.BrokerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          deleteMany: {
            args: Prisma.BrokerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrokerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BrokerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          upsert: {
            args: Prisma.BrokerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          aggregate: {
            args: Prisma.BrokerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBroker>
          }
          groupBy: {
            args: Prisma.BrokerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrokerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrokerCountArgs<ExtArgs>
            result: $Utils.Optional<BrokerCountAggregateOutputType> | number
          }
        }
      }
      EmailConnection: {
        payload: Prisma.$EmailConnectionPayload<ExtArgs>
        fields: Prisma.EmailConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          findFirst: {
            args: Prisma.EmailConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          findMany: {
            args: Prisma.EmailConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>[]
          }
          create: {
            args: Prisma.EmailConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          createMany: {
            args: Prisma.EmailConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>[]
          }
          delete: {
            args: Prisma.EmailConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          update: {
            args: Prisma.EmailConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          deleteMany: {
            args: Prisma.EmailConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailConnectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>[]
          }
          upsert: {
            args: Prisma.EmailConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConnectionPayload>
          }
          aggregate: {
            args: Prisma.EmailConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailConnection>
          }
          groupBy: {
            args: Prisma.EmailConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<EmailConnectionCountAggregateOutputType> | number
          }
        }
      }
      Load: {
        payload: Prisma.$LoadPayload<ExtArgs>
        fields: Prisma.LoadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          findFirst: {
            args: Prisma.LoadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          findMany: {
            args: Prisma.LoadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>[]
          }
          create: {
            args: Prisma.LoadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          createMany: {
            args: Prisma.LoadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>[]
          }
          delete: {
            args: Prisma.LoadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          update: {
            args: Prisma.LoadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          deleteMany: {
            args: Prisma.LoadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>[]
          }
          upsert: {
            args: Prisma.LoadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadPayload>
          }
          aggregate: {
            args: Prisma.LoadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoad>
          }
          groupBy: {
            args: Prisma.LoadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoadCountArgs<ExtArgs>
            result: $Utils.Optional<LoadCountAggregateOutputType> | number
          }
        }
      }
      Carrier: {
        payload: Prisma.$CarrierPayload<ExtArgs>
        fields: Prisma.CarrierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarrierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarrierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          findFirst: {
            args: Prisma.CarrierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarrierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          findMany: {
            args: Prisma.CarrierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>[]
          }
          create: {
            args: Prisma.CarrierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          createMany: {
            args: Prisma.CarrierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarrierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>[]
          }
          delete: {
            args: Prisma.CarrierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          update: {
            args: Prisma.CarrierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          deleteMany: {
            args: Prisma.CarrierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarrierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CarrierUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>[]
          }
          upsert: {
            args: Prisma.CarrierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrierPayload>
          }
          aggregate: {
            args: Prisma.CarrierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarrier>
          }
          groupBy: {
            args: Prisma.CarrierGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarrierGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarrierCountArgs<ExtArgs>
            result: $Utils.Optional<CarrierCountAggregateOutputType> | number
          }
        }
      }
      Quote: {
        payload: Prisma.$QuotePayload<ExtArgs>
        fields: Prisma.QuoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findFirst: {
            args: Prisma.QuoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findMany: {
            args: Prisma.QuoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          create: {
            args: Prisma.QuoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          createMany: {
            args: Prisma.QuoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          delete: {
            args: Prisma.QuoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          update: {
            args: Prisma.QuoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          deleteMany: {
            args: Prisma.QuoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          upsert: {
            args: Prisma.QuoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          aggregate: {
            args: Prisma.QuoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuote>
          }
          groupBy: {
            args: Prisma.QuoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuoteCountArgs<ExtArgs>
            result: $Utils.Optional<QuoteCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      Communication: {
        payload: Prisma.$CommunicationPayload<ExtArgs>
        fields: Prisma.CommunicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          findFirst: {
            args: Prisma.CommunicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          findMany: {
            args: Prisma.CommunicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>[]
          }
          create: {
            args: Prisma.CommunicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          createMany: {
            args: Prisma.CommunicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>[]
          }
          delete: {
            args: Prisma.CommunicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          update: {
            args: Prisma.CommunicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          deleteMany: {
            args: Prisma.CommunicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommunicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>[]
          }
          upsert: {
            args: Prisma.CommunicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationPayload>
          }
          aggregate: {
            args: Prisma.CommunicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunication>
          }
          groupBy: {
            args: Prisma.CommunicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunicationCountArgs<ExtArgs>
            result: $Utils.Optional<CommunicationCountAggregateOutputType> | number
          }
        }
      }
      EmailAccount: {
        payload: Prisma.$EmailAccountPayload<ExtArgs>
        fields: Prisma.EmailAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          findFirst: {
            args: Prisma.EmailAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          findMany: {
            args: Prisma.EmailAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          create: {
            args: Prisma.EmailAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          createMany: {
            args: Prisma.EmailAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          delete: {
            args: Prisma.EmailAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          update: {
            args: Prisma.EmailAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          deleteMany: {
            args: Prisma.EmailAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          upsert: {
            args: Prisma.EmailAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          aggregate: {
            args: Prisma.EmailAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailAccount>
          }
          groupBy: {
            args: Prisma.EmailAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailAccountCountArgs<ExtArgs>
            result: $Utils.Optional<EmailAccountCountAggregateOutputType> | number
          }
        }
      }
      EmailProcessingLog: {
        payload: Prisma.$EmailProcessingLogPayload<ExtArgs>
        fields: Prisma.EmailProcessingLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailProcessingLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailProcessingLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          findFirst: {
            args: Prisma.EmailProcessingLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailProcessingLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          findMany: {
            args: Prisma.EmailProcessingLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>[]
          }
          create: {
            args: Prisma.EmailProcessingLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          createMany: {
            args: Prisma.EmailProcessingLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailProcessingLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>[]
          }
          delete: {
            args: Prisma.EmailProcessingLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          update: {
            args: Prisma.EmailProcessingLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          deleteMany: {
            args: Prisma.EmailProcessingLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailProcessingLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailProcessingLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>[]
          }
          upsert: {
            args: Prisma.EmailProcessingLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailProcessingLogPayload>
          }
          aggregate: {
            args: Prisma.EmailProcessingLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailProcessingLog>
          }
          groupBy: {
            args: Prisma.EmailProcessingLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailProcessingLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailProcessingLogCountArgs<ExtArgs>
            result: $Utils.Optional<EmailProcessingLogCountAggregateOutputType> | number
          }
        }
      }
      Email: {
        payload: Prisma.$EmailPayload<ExtArgs>
        fields: Prisma.EmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findFirst: {
            args: Prisma.EmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findMany: {
            args: Prisma.EmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          create: {
            args: Prisma.EmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          createMany: {
            args: Prisma.EmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          delete: {
            args: Prisma.EmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          update: {
            args: Prisma.EmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          deleteMany: {
            args: Prisma.EmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          upsert: {
            args: Prisma.EmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          aggregate: {
            args: Prisma.EmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmail>
          }
          groupBy: {
            args: Prisma.EmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCountArgs<ExtArgs>
            result: $Utils.Optional<EmailCountAggregateOutputType> | number
          }
        }
      }
      LoadBlast: {
        payload: Prisma.$LoadBlastPayload<ExtArgs>
        fields: Prisma.LoadBlastFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoadBlastFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoadBlastFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          findFirst: {
            args: Prisma.LoadBlastFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoadBlastFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          findMany: {
            args: Prisma.LoadBlastFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>[]
          }
          create: {
            args: Prisma.LoadBlastCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          createMany: {
            args: Prisma.LoadBlastCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoadBlastCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>[]
          }
          delete: {
            args: Prisma.LoadBlastDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          update: {
            args: Prisma.LoadBlastUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          deleteMany: {
            args: Prisma.LoadBlastDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoadBlastUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoadBlastUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>[]
          }
          upsert: {
            args: Prisma.LoadBlastUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoadBlastPayload>
          }
          aggregate: {
            args: Prisma.LoadBlastAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoadBlast>
          }
          groupBy: {
            args: Prisma.LoadBlastGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoadBlastGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoadBlastCountArgs<ExtArgs>
            result: $Utils.Optional<LoadBlastCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      OAuthState: {
        payload: Prisma.$OAuthStatePayload<ExtArgs>
        fields: Prisma.OAuthStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OAuthStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OAuthStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          findFirst: {
            args: Prisma.OAuthStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OAuthStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          findMany: {
            args: Prisma.OAuthStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>[]
          }
          create: {
            args: Prisma.OAuthStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          createMany: {
            args: Prisma.OAuthStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OAuthStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>[]
          }
          delete: {
            args: Prisma.OAuthStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          update: {
            args: Prisma.OAuthStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          deleteMany: {
            args: Prisma.OAuthStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OAuthStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OAuthStateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>[]
          }
          upsert: {
            args: Prisma.OAuthStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OAuthStatePayload>
          }
          aggregate: {
            args: Prisma.OAuthStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOAuthState>
          }
          groupBy: {
            args: Prisma.OAuthStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<OAuthStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.OAuthStateCountArgs<ExtArgs>
            result: $Utils.Optional<OAuthStateCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    broker?: BrokerOmit
    emailConnection?: EmailConnectionOmit
    load?: LoadOmit
    carrier?: CarrierOmit
    quote?: QuoteOmit
    chatMessage?: ChatMessageOmit
    communication?: CommunicationOmit
    emailAccount?: EmailAccountOmit
    emailProcessingLog?: EmailProcessingLogOmit
    email?: EmailOmit
    loadBlast?: LoadBlastOmit
    notification?: NotificationOmit
    oAuthState?: OAuthStateOmit
    userSettings?: UserSettingsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    lastProvider: string | null
    lastLogin: Date | null
    id: string | null
    createdAt: Date | null
    name: string | null
    provider: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    lastProvider: string | null
    lastLogin: Date | null
    id: string | null
    createdAt: Date | null
    name: string | null
    provider: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    lastProvider: number
    lastLogin: number
    id: number
    createdAt: number
    name: number
    provider: number
    email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    lastProvider?: true
    lastLogin?: true
    id?: true
    createdAt?: true
    name?: true
    provider?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    lastProvider?: true
    lastLogin?: true
    id?: true
    createdAt?: true
    name?: true
    provider?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    lastProvider?: true
    lastLogin?: true
    id?: true
    createdAt?: true
    name?: true
    provider?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    lastProvider: string | null
    lastLogin: Date | null
    id: string
    createdAt: Date
    name: string | null
    provider: string | null
    email: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lastProvider?: boolean
    lastLogin?: boolean
    id?: boolean
    createdAt?: boolean
    name?: boolean
    provider?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lastProvider?: boolean
    lastLogin?: boolean
    id?: boolean
    createdAt?: boolean
    name?: boolean
    provider?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lastProvider?: boolean
    lastLogin?: boolean
    id?: boolean
    createdAt?: boolean
    name?: boolean
    provider?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    lastProvider?: boolean
    lastLogin?: boolean
    id?: boolean
    createdAt?: boolean
    name?: boolean
    provider?: boolean
    email?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"lastProvider" | "lastLogin" | "id" | "createdAt" | "name" | "provider" | "email", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      lastProvider: string | null
      lastLogin: Date | null
      id: string
      createdAt: Date
      name: string | null
      provider: string | null
      email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `lastProvider`
     * const userWithLastProviderOnly = await prisma.user.findMany({ select: { lastProvider: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `lastProvider`
     * const userWithLastProviderOnly = await prisma.user.createManyAndReturn({
     *   select: { lastProvider: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `lastProvider`
     * const userWithLastProviderOnly = await prisma.user.updateManyAndReturn({
     *   select: { lastProvider: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly lastProvider: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly name: FieldRef<"User", 'String'>
    readonly provider: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Broker
   */

  export type AggregateBroker = {
    _count: BrokerCountAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  export type BrokerMinAggregateOutputType = {
    updatedAt: Date | null
    email: string | null
    createdAt: Date | null
    id: string | null
    companyName: string | null
    userId: string | null
    subscriptionTier: string | null
  }

  export type BrokerMaxAggregateOutputType = {
    updatedAt: Date | null
    email: string | null
    createdAt: Date | null
    id: string | null
    companyName: string | null
    userId: string | null
    subscriptionTier: string | null
  }

  export type BrokerCountAggregateOutputType = {
    updatedAt: number
    email: number
    preferences: number
    createdAt: number
    oauthTokens: number
    apiKeys: number
    id: number
    companyName: number
    userId: number
    subscriptionTier: number
    _all: number
  }


  export type BrokerMinAggregateInputType = {
    updatedAt?: true
    email?: true
    createdAt?: true
    id?: true
    companyName?: true
    userId?: true
    subscriptionTier?: true
  }

  export type BrokerMaxAggregateInputType = {
    updatedAt?: true
    email?: true
    createdAt?: true
    id?: true
    companyName?: true
    userId?: true
    subscriptionTier?: true
  }

  export type BrokerCountAggregateInputType = {
    updatedAt?: true
    email?: true
    preferences?: true
    createdAt?: true
    oauthTokens?: true
    apiKeys?: true
    id?: true
    companyName?: true
    userId?: true
    subscriptionTier?: true
    _all?: true
  }

  export type BrokerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Broker to aggregate.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brokers
    **/
    _count?: true | BrokerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrokerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrokerMaxAggregateInputType
  }

  export type GetBrokerAggregateType<T extends BrokerAggregateArgs> = {
        [P in keyof T & keyof AggregateBroker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBroker[P]>
      : GetScalarType<T[P], AggregateBroker[P]>
  }




  export type BrokerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrokerWhereInput
    orderBy?: BrokerOrderByWithAggregationInput | BrokerOrderByWithAggregationInput[]
    by: BrokerScalarFieldEnum[] | BrokerScalarFieldEnum
    having?: BrokerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrokerCountAggregateInputType | true
    _min?: BrokerMinAggregateInputType
    _max?: BrokerMaxAggregateInputType
  }

  export type BrokerGroupByOutputType = {
    updatedAt: Date
    email: string
    preferences: JsonValue
    createdAt: Date
    oauthTokens: JsonValue
    apiKeys: JsonValue
    id: string
    companyName: string
    userId: string | null
    subscriptionTier: string
    _count: BrokerCountAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  type GetBrokerGroupByPayload<T extends BrokerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrokerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrokerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrokerGroupByOutputType[P]>
            : GetScalarType<T[P], BrokerGroupByOutputType[P]>
        }
      >
    >


  export type BrokerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    email?: boolean
    preferences?: boolean
    createdAt?: boolean
    oauthTokens?: boolean
    apiKeys?: boolean
    id?: boolean
    companyName?: boolean
    userId?: boolean
    subscriptionTier?: boolean
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    email?: boolean
    preferences?: boolean
    createdAt?: boolean
    oauthTokens?: boolean
    apiKeys?: boolean
    id?: boolean
    companyName?: boolean
    userId?: boolean
    subscriptionTier?: boolean
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    email?: boolean
    preferences?: boolean
    createdAt?: boolean
    oauthTokens?: boolean
    apiKeys?: boolean
    id?: boolean
    companyName?: boolean
    userId?: boolean
    subscriptionTier?: boolean
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectScalar = {
    updatedAt?: boolean
    email?: boolean
    preferences?: boolean
    createdAt?: boolean
    oauthTokens?: boolean
    apiKeys?: boolean
    id?: boolean
    companyName?: boolean
    userId?: boolean
    subscriptionTier?: boolean
  }

  export type BrokerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"updatedAt" | "email" | "preferences" | "createdAt" | "oauthTokens" | "apiKeys" | "id" | "companyName" | "userId" | "subscriptionTier", ExtArgs["result"]["broker"]>

  export type $BrokerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Broker"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      updatedAt: Date
      email: string
      preferences: Prisma.JsonValue
      createdAt: Date
      oauthTokens: Prisma.JsonValue
      apiKeys: Prisma.JsonValue
      id: string
      companyName: string
      userId: string | null
      subscriptionTier: string
    }, ExtArgs["result"]["broker"]>
    composites: {}
  }

  type BrokerGetPayload<S extends boolean | null | undefined | BrokerDefaultArgs> = $Result.GetResult<Prisma.$BrokerPayload, S>

  type BrokerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrokerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrokerCountAggregateInputType | true
    }

  export interface BrokerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Broker'], meta: { name: 'Broker' } }
    /**
     * Find zero or one Broker that matches the filter.
     * @param {BrokerFindUniqueArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrokerFindUniqueArgs>(args: SelectSubset<T, BrokerFindUniqueArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Broker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrokerFindUniqueOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrokerFindUniqueOrThrowArgs>(args: SelectSubset<T, BrokerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Broker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrokerFindFirstArgs>(args?: SelectSubset<T, BrokerFindFirstArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Broker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrokerFindFirstOrThrowArgs>(args?: SelectSubset<T, BrokerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brokers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brokers
     * const brokers = await prisma.broker.findMany()
     * 
     * // Get first 10 Brokers
     * const brokers = await prisma.broker.findMany({ take: 10 })
     * 
     * // Only select the `updatedAt`
     * const brokerWithUpdatedAtOnly = await prisma.broker.findMany({ select: { updatedAt: true } })
     * 
     */
    findMany<T extends BrokerFindManyArgs>(args?: SelectSubset<T, BrokerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Broker.
     * @param {BrokerCreateArgs} args - Arguments to create a Broker.
     * @example
     * // Create one Broker
     * const Broker = await prisma.broker.create({
     *   data: {
     *     // ... data to create a Broker
     *   }
     * })
     * 
     */
    create<T extends BrokerCreateArgs>(args: SelectSubset<T, BrokerCreateArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brokers.
     * @param {BrokerCreateManyArgs} args - Arguments to create many Brokers.
     * @example
     * // Create many Brokers
     * const broker = await prisma.broker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrokerCreateManyArgs>(args?: SelectSubset<T, BrokerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brokers and returns the data saved in the database.
     * @param {BrokerCreateManyAndReturnArgs} args - Arguments to create many Brokers.
     * @example
     * // Create many Brokers
     * const broker = await prisma.broker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brokers and only return the `updatedAt`
     * const brokerWithUpdatedAtOnly = await prisma.broker.createManyAndReturn({
     *   select: { updatedAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrokerCreateManyAndReturnArgs>(args?: SelectSubset<T, BrokerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Broker.
     * @param {BrokerDeleteArgs} args - Arguments to delete one Broker.
     * @example
     * // Delete one Broker
     * const Broker = await prisma.broker.delete({
     *   where: {
     *     // ... filter to delete one Broker
     *   }
     * })
     * 
     */
    delete<T extends BrokerDeleteArgs>(args: SelectSubset<T, BrokerDeleteArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Broker.
     * @param {BrokerUpdateArgs} args - Arguments to update one Broker.
     * @example
     * // Update one Broker
     * const broker = await prisma.broker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrokerUpdateArgs>(args: SelectSubset<T, BrokerUpdateArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brokers.
     * @param {BrokerDeleteManyArgs} args - Arguments to filter Brokers to delete.
     * @example
     * // Delete a few Brokers
     * const { count } = await prisma.broker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrokerDeleteManyArgs>(args?: SelectSubset<T, BrokerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brokers
     * const broker = await prisma.broker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrokerUpdateManyArgs>(args: SelectSubset<T, BrokerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brokers and returns the data updated in the database.
     * @param {BrokerUpdateManyAndReturnArgs} args - Arguments to update many Brokers.
     * @example
     * // Update many Brokers
     * const broker = await prisma.broker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Brokers and only return the `updatedAt`
     * const brokerWithUpdatedAtOnly = await prisma.broker.updateManyAndReturn({
     *   select: { updatedAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BrokerUpdateManyAndReturnArgs>(args: SelectSubset<T, BrokerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Broker.
     * @param {BrokerUpsertArgs} args - Arguments to update or create a Broker.
     * @example
     * // Update or create a Broker
     * const broker = await prisma.broker.upsert({
     *   create: {
     *     // ... data to create a Broker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Broker we want to update
     *   }
     * })
     */
    upsert<T extends BrokerUpsertArgs>(args: SelectSubset<T, BrokerUpsertArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerCountArgs} args - Arguments to filter Brokers to count.
     * @example
     * // Count the number of Brokers
     * const count = await prisma.broker.count({
     *   where: {
     *     // ... the filter for the Brokers we want to count
     *   }
     * })
    **/
    count<T extends BrokerCountArgs>(
      args?: Subset<T, BrokerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrokerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrokerAggregateArgs>(args: Subset<T, BrokerAggregateArgs>): Prisma.PrismaPromise<GetBrokerAggregateType<T>>

    /**
     * Group by Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrokerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrokerGroupByArgs['orderBy'] }
        : { orderBy?: BrokerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrokerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrokerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Broker model
   */
  readonly fields: BrokerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Broker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrokerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Broker model
   */
  interface BrokerFieldRefs {
    readonly updatedAt: FieldRef<"Broker", 'DateTime'>
    readonly email: FieldRef<"Broker", 'String'>
    readonly preferences: FieldRef<"Broker", 'Json'>
    readonly createdAt: FieldRef<"Broker", 'DateTime'>
    readonly oauthTokens: FieldRef<"Broker", 'Json'>
    readonly apiKeys: FieldRef<"Broker", 'Json'>
    readonly id: FieldRef<"Broker", 'String'>
    readonly companyName: FieldRef<"Broker", 'String'>
    readonly userId: FieldRef<"Broker", 'String'>
    readonly subscriptionTier: FieldRef<"Broker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Broker findUnique
   */
  export type BrokerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findUniqueOrThrow
   */
  export type BrokerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findFirst
   */
  export type BrokerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findFirstOrThrow
   */
  export type BrokerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findMany
   */
  export type BrokerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter, which Brokers to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker create
   */
  export type BrokerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * The data needed to create a Broker.
     */
    data: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
  }

  /**
   * Broker createMany
   */
  export type BrokerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brokers.
     */
    data: BrokerCreateManyInput | BrokerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Broker createManyAndReturn
   */
  export type BrokerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * The data used to create many Brokers.
     */
    data: BrokerCreateManyInput | BrokerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Broker update
   */
  export type BrokerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * The data needed to update a Broker.
     */
    data: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
    /**
     * Choose, which Broker to update.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker updateMany
   */
  export type BrokerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brokers.
     */
    data: XOR<BrokerUpdateManyMutationInput, BrokerUncheckedUpdateManyInput>
    /**
     * Filter which Brokers to update
     */
    where?: BrokerWhereInput
    /**
     * Limit how many Brokers to update.
     */
    limit?: number
  }

  /**
   * Broker updateManyAndReturn
   */
  export type BrokerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * The data used to update Brokers.
     */
    data: XOR<BrokerUpdateManyMutationInput, BrokerUncheckedUpdateManyInput>
    /**
     * Filter which Brokers to update
     */
    where?: BrokerWhereInput
    /**
     * Limit how many Brokers to update.
     */
    limit?: number
  }

  /**
   * Broker upsert
   */
  export type BrokerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * The filter to search for the Broker to update in case it exists.
     */
    where: BrokerWhereUniqueInput
    /**
     * In case the Broker found by the `where` argument doesn't exist, create a new Broker with this data.
     */
    create: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
    /**
     * In case the Broker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
  }

  /**
   * Broker delete
   */
  export type BrokerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
    /**
     * Filter which Broker to delete.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker deleteMany
   */
  export type BrokerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brokers to delete
     */
    where?: BrokerWhereInput
    /**
     * Limit how many Brokers to delete.
     */
    limit?: number
  }

  /**
   * Broker without action
   */
  export type BrokerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Broker
     */
    omit?: BrokerOmit<ExtArgs> | null
  }


  /**
   * Model EmailConnection
   */

  export type AggregateEmailConnection = {
    _count: EmailConnectionCountAggregateOutputType | null
    _avg: EmailConnectionAvgAggregateOutputType | null
    _sum: EmailConnectionSumAggregateOutputType | null
    _min: EmailConnectionMinAggregateOutputType | null
    _max: EmailConnectionMaxAggregateOutputType | null
  }

  export type EmailConnectionAvgAggregateOutputType = {
    imapPort: number | null
  }

  export type EmailConnectionSumAggregateOutputType = {
    imapPort: number | null
  }

  export type EmailConnectionMinAggregateOutputType = {
    oauthRefreshToken: string | null
    provider: string | null
    updatedAt: Date | null
    createdAt: Date | null
    errorMessage: string | null
    brokerId: string | null
    imapPasswordEncrypted: string | null
    oauthTokenExpiresAt: Date | null
    status: string | null
    imapHost: string | null
    imapUseSsl: boolean | null
    isPrimary: boolean | null
    userId: string | null
    oauthAccessToken: string | null
    lastChecked: Date | null
    id: string | null
    email: string | null
    imapPort: number | null
    imapUsername: string | null
  }

  export type EmailConnectionMaxAggregateOutputType = {
    oauthRefreshToken: string | null
    provider: string | null
    updatedAt: Date | null
    createdAt: Date | null
    errorMessage: string | null
    brokerId: string | null
    imapPasswordEncrypted: string | null
    oauthTokenExpiresAt: Date | null
    status: string | null
    imapHost: string | null
    imapUseSsl: boolean | null
    isPrimary: boolean | null
    userId: string | null
    oauthAccessToken: string | null
    lastChecked: Date | null
    id: string | null
    email: string | null
    imapPort: number | null
    imapUsername: string | null
  }

  export type EmailConnectionCountAggregateOutputType = {
    oauthRefreshToken: number
    provider: number
    updatedAt: number
    createdAt: number
    errorMessage: number
    brokerId: number
    imapPasswordEncrypted: number
    oauthTokenExpiresAt: number
    status: number
    imapHost: number
    imapUseSsl: number
    isPrimary: number
    userId: number
    oauthAccessToken: number
    lastChecked: number
    id: number
    email: number
    imapPort: number
    imapUsername: number
    _all: number
  }


  export type EmailConnectionAvgAggregateInputType = {
    imapPort?: true
  }

  export type EmailConnectionSumAggregateInputType = {
    imapPort?: true
  }

  export type EmailConnectionMinAggregateInputType = {
    oauthRefreshToken?: true
    provider?: true
    updatedAt?: true
    createdAt?: true
    errorMessage?: true
    brokerId?: true
    imapPasswordEncrypted?: true
    oauthTokenExpiresAt?: true
    status?: true
    imapHost?: true
    imapUseSsl?: true
    isPrimary?: true
    userId?: true
    oauthAccessToken?: true
    lastChecked?: true
    id?: true
    email?: true
    imapPort?: true
    imapUsername?: true
  }

  export type EmailConnectionMaxAggregateInputType = {
    oauthRefreshToken?: true
    provider?: true
    updatedAt?: true
    createdAt?: true
    errorMessage?: true
    brokerId?: true
    imapPasswordEncrypted?: true
    oauthTokenExpiresAt?: true
    status?: true
    imapHost?: true
    imapUseSsl?: true
    isPrimary?: true
    userId?: true
    oauthAccessToken?: true
    lastChecked?: true
    id?: true
    email?: true
    imapPort?: true
    imapUsername?: true
  }

  export type EmailConnectionCountAggregateInputType = {
    oauthRefreshToken?: true
    provider?: true
    updatedAt?: true
    createdAt?: true
    errorMessage?: true
    brokerId?: true
    imapPasswordEncrypted?: true
    oauthTokenExpiresAt?: true
    status?: true
    imapHost?: true
    imapUseSsl?: true
    isPrimary?: true
    userId?: true
    oauthAccessToken?: true
    lastChecked?: true
    id?: true
    email?: true
    imapPort?: true
    imapUsername?: true
    _all?: true
  }

  export type EmailConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailConnection to aggregate.
     */
    where?: EmailConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConnections to fetch.
     */
    orderBy?: EmailConnectionOrderByWithRelationInput | EmailConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailConnections
    **/
    _count?: true | EmailConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailConnectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailConnectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailConnectionMaxAggregateInputType
  }

  export type GetEmailConnectionAggregateType<T extends EmailConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailConnection[P]>
      : GetScalarType<T[P], AggregateEmailConnection[P]>
  }




  export type EmailConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailConnectionWhereInput
    orderBy?: EmailConnectionOrderByWithAggregationInput | EmailConnectionOrderByWithAggregationInput[]
    by: EmailConnectionScalarFieldEnum[] | EmailConnectionScalarFieldEnum
    having?: EmailConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailConnectionCountAggregateInputType | true
    _avg?: EmailConnectionAvgAggregateInputType
    _sum?: EmailConnectionSumAggregateInputType
    _min?: EmailConnectionMinAggregateInputType
    _max?: EmailConnectionMaxAggregateInputType
  }

  export type EmailConnectionGroupByOutputType = {
    oauthRefreshToken: string | null
    provider: string
    updatedAt: Date
    createdAt: Date
    errorMessage: string | null
    brokerId: string
    imapPasswordEncrypted: string | null
    oauthTokenExpiresAt: Date | null
    status: string
    imapHost: string | null
    imapUseSsl: boolean
    isPrimary: boolean
    userId: string | null
    oauthAccessToken: string | null
    lastChecked: Date | null
    id: string
    email: string
    imapPort: number | null
    imapUsername: string | null
    _count: EmailConnectionCountAggregateOutputType | null
    _avg: EmailConnectionAvgAggregateOutputType | null
    _sum: EmailConnectionSumAggregateOutputType | null
    _min: EmailConnectionMinAggregateOutputType | null
    _max: EmailConnectionMaxAggregateOutputType | null
  }

  type GetEmailConnectionGroupByPayload<T extends EmailConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], EmailConnectionGroupByOutputType[P]>
        }
      >
    >


  export type EmailConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oauthRefreshToken?: boolean
    provider?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    errorMessage?: boolean
    brokerId?: boolean
    imapPasswordEncrypted?: boolean
    oauthTokenExpiresAt?: boolean
    status?: boolean
    imapHost?: boolean
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: boolean
    oauthAccessToken?: boolean
    lastChecked?: boolean
    id?: boolean
    email?: boolean
    imapPort?: boolean
    imapUsername?: boolean
  }, ExtArgs["result"]["emailConnection"]>

  export type EmailConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oauthRefreshToken?: boolean
    provider?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    errorMessage?: boolean
    brokerId?: boolean
    imapPasswordEncrypted?: boolean
    oauthTokenExpiresAt?: boolean
    status?: boolean
    imapHost?: boolean
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: boolean
    oauthAccessToken?: boolean
    lastChecked?: boolean
    id?: boolean
    email?: boolean
    imapPort?: boolean
    imapUsername?: boolean
  }, ExtArgs["result"]["emailConnection"]>

  export type EmailConnectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    oauthRefreshToken?: boolean
    provider?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    errorMessage?: boolean
    brokerId?: boolean
    imapPasswordEncrypted?: boolean
    oauthTokenExpiresAt?: boolean
    status?: boolean
    imapHost?: boolean
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: boolean
    oauthAccessToken?: boolean
    lastChecked?: boolean
    id?: boolean
    email?: boolean
    imapPort?: boolean
    imapUsername?: boolean
  }, ExtArgs["result"]["emailConnection"]>

  export type EmailConnectionSelectScalar = {
    oauthRefreshToken?: boolean
    provider?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    errorMessage?: boolean
    brokerId?: boolean
    imapPasswordEncrypted?: boolean
    oauthTokenExpiresAt?: boolean
    status?: boolean
    imapHost?: boolean
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: boolean
    oauthAccessToken?: boolean
    lastChecked?: boolean
    id?: boolean
    email?: boolean
    imapPort?: boolean
    imapUsername?: boolean
  }

  export type EmailConnectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"oauthRefreshToken" | "provider" | "updatedAt" | "createdAt" | "errorMessage" | "brokerId" | "imapPasswordEncrypted" | "oauthTokenExpiresAt" | "status" | "imapHost" | "imapUseSsl" | "isPrimary" | "userId" | "oauthAccessToken" | "lastChecked" | "id" | "email" | "imapPort" | "imapUsername", ExtArgs["result"]["emailConnection"]>

  export type $EmailConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailConnection"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      oauthRefreshToken: string | null
      provider: string
      updatedAt: Date
      createdAt: Date
      errorMessage: string | null
      brokerId: string
      imapPasswordEncrypted: string | null
      oauthTokenExpiresAt: Date | null
      status: string
      imapHost: string | null
      imapUseSsl: boolean
      isPrimary: boolean
      userId: string | null
      oauthAccessToken: string | null
      lastChecked: Date | null
      id: string
      email: string
      imapPort: number | null
      imapUsername: string | null
    }, ExtArgs["result"]["emailConnection"]>
    composites: {}
  }

  type EmailConnectionGetPayload<S extends boolean | null | undefined | EmailConnectionDefaultArgs> = $Result.GetResult<Prisma.$EmailConnectionPayload, S>

  type EmailConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailConnectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailConnectionCountAggregateInputType | true
    }

  export interface EmailConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailConnection'], meta: { name: 'EmailConnection' } }
    /**
     * Find zero or one EmailConnection that matches the filter.
     * @param {EmailConnectionFindUniqueArgs} args - Arguments to find a EmailConnection
     * @example
     * // Get one EmailConnection
     * const emailConnection = await prisma.emailConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailConnectionFindUniqueArgs>(args: SelectSubset<T, EmailConnectionFindUniqueArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailConnection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailConnectionFindUniqueOrThrowArgs} args - Arguments to find a EmailConnection
     * @example
     * // Get one EmailConnection
     * const emailConnection = await prisma.emailConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionFindFirstArgs} args - Arguments to find a EmailConnection
     * @example
     * // Get one EmailConnection
     * const emailConnection = await prisma.emailConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailConnectionFindFirstArgs>(args?: SelectSubset<T, EmailConnectionFindFirstArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionFindFirstOrThrowArgs} args - Arguments to find a EmailConnection
     * @example
     * // Get one EmailConnection
     * const emailConnection = await prisma.emailConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailConnections
     * const emailConnections = await prisma.emailConnection.findMany()
     * 
     * // Get first 10 EmailConnections
     * const emailConnections = await prisma.emailConnection.findMany({ take: 10 })
     * 
     * // Only select the `oauthRefreshToken`
     * const emailConnectionWithOauthRefreshTokenOnly = await prisma.emailConnection.findMany({ select: { oauthRefreshToken: true } })
     * 
     */
    findMany<T extends EmailConnectionFindManyArgs>(args?: SelectSubset<T, EmailConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailConnection.
     * @param {EmailConnectionCreateArgs} args - Arguments to create a EmailConnection.
     * @example
     * // Create one EmailConnection
     * const EmailConnection = await prisma.emailConnection.create({
     *   data: {
     *     // ... data to create a EmailConnection
     *   }
     * })
     * 
     */
    create<T extends EmailConnectionCreateArgs>(args: SelectSubset<T, EmailConnectionCreateArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailConnections.
     * @param {EmailConnectionCreateManyArgs} args - Arguments to create many EmailConnections.
     * @example
     * // Create many EmailConnections
     * const emailConnection = await prisma.emailConnection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailConnectionCreateManyArgs>(args?: SelectSubset<T, EmailConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailConnections and returns the data saved in the database.
     * @param {EmailConnectionCreateManyAndReturnArgs} args - Arguments to create many EmailConnections.
     * @example
     * // Create many EmailConnections
     * const emailConnection = await prisma.emailConnection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailConnections and only return the `oauthRefreshToken`
     * const emailConnectionWithOauthRefreshTokenOnly = await prisma.emailConnection.createManyAndReturn({
     *   select: { oauthRefreshToken: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailConnection.
     * @param {EmailConnectionDeleteArgs} args - Arguments to delete one EmailConnection.
     * @example
     * // Delete one EmailConnection
     * const EmailConnection = await prisma.emailConnection.delete({
     *   where: {
     *     // ... filter to delete one EmailConnection
     *   }
     * })
     * 
     */
    delete<T extends EmailConnectionDeleteArgs>(args: SelectSubset<T, EmailConnectionDeleteArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailConnection.
     * @param {EmailConnectionUpdateArgs} args - Arguments to update one EmailConnection.
     * @example
     * // Update one EmailConnection
     * const emailConnection = await prisma.emailConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailConnectionUpdateArgs>(args: SelectSubset<T, EmailConnectionUpdateArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailConnections.
     * @param {EmailConnectionDeleteManyArgs} args - Arguments to filter EmailConnections to delete.
     * @example
     * // Delete a few EmailConnections
     * const { count } = await prisma.emailConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailConnectionDeleteManyArgs>(args?: SelectSubset<T, EmailConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailConnections
     * const emailConnection = await prisma.emailConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailConnectionUpdateManyArgs>(args: SelectSubset<T, EmailConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailConnections and returns the data updated in the database.
     * @param {EmailConnectionUpdateManyAndReturnArgs} args - Arguments to update many EmailConnections.
     * @example
     * // Update many EmailConnections
     * const emailConnection = await prisma.emailConnection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailConnections and only return the `oauthRefreshToken`
     * const emailConnectionWithOauthRefreshTokenOnly = await prisma.emailConnection.updateManyAndReturn({
     *   select: { oauthRefreshToken: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailConnectionUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailConnectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailConnection.
     * @param {EmailConnectionUpsertArgs} args - Arguments to update or create a EmailConnection.
     * @example
     * // Update or create a EmailConnection
     * const emailConnection = await prisma.emailConnection.upsert({
     *   create: {
     *     // ... data to create a EmailConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailConnection we want to update
     *   }
     * })
     */
    upsert<T extends EmailConnectionUpsertArgs>(args: SelectSubset<T, EmailConnectionUpsertArgs<ExtArgs>>): Prisma__EmailConnectionClient<$Result.GetResult<Prisma.$EmailConnectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionCountArgs} args - Arguments to filter EmailConnections to count.
     * @example
     * // Count the number of EmailConnections
     * const count = await prisma.emailConnection.count({
     *   where: {
     *     // ... the filter for the EmailConnections we want to count
     *   }
     * })
    **/
    count<T extends EmailConnectionCountArgs>(
      args?: Subset<T, EmailConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailConnectionAggregateArgs>(args: Subset<T, EmailConnectionAggregateArgs>): Prisma.PrismaPromise<GetEmailConnectionAggregateType<T>>

    /**
     * Group by EmailConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailConnectionGroupByArgs['orderBy'] }
        : { orderBy?: EmailConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailConnection model
   */
  readonly fields: EmailConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailConnection model
   */
  interface EmailConnectionFieldRefs {
    readonly oauthRefreshToken: FieldRef<"EmailConnection", 'String'>
    readonly provider: FieldRef<"EmailConnection", 'String'>
    readonly updatedAt: FieldRef<"EmailConnection", 'DateTime'>
    readonly createdAt: FieldRef<"EmailConnection", 'DateTime'>
    readonly errorMessage: FieldRef<"EmailConnection", 'String'>
    readonly brokerId: FieldRef<"EmailConnection", 'String'>
    readonly imapPasswordEncrypted: FieldRef<"EmailConnection", 'String'>
    readonly oauthTokenExpiresAt: FieldRef<"EmailConnection", 'DateTime'>
    readonly status: FieldRef<"EmailConnection", 'String'>
    readonly imapHost: FieldRef<"EmailConnection", 'String'>
    readonly imapUseSsl: FieldRef<"EmailConnection", 'Boolean'>
    readonly isPrimary: FieldRef<"EmailConnection", 'Boolean'>
    readonly userId: FieldRef<"EmailConnection", 'String'>
    readonly oauthAccessToken: FieldRef<"EmailConnection", 'String'>
    readonly lastChecked: FieldRef<"EmailConnection", 'DateTime'>
    readonly id: FieldRef<"EmailConnection", 'String'>
    readonly email: FieldRef<"EmailConnection", 'String'>
    readonly imapPort: FieldRef<"EmailConnection", 'Int'>
    readonly imapUsername: FieldRef<"EmailConnection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmailConnection findUnique
   */
  export type EmailConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter, which EmailConnection to fetch.
     */
    where: EmailConnectionWhereUniqueInput
  }

  /**
   * EmailConnection findUniqueOrThrow
   */
  export type EmailConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter, which EmailConnection to fetch.
     */
    where: EmailConnectionWhereUniqueInput
  }

  /**
   * EmailConnection findFirst
   */
  export type EmailConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter, which EmailConnection to fetch.
     */
    where?: EmailConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConnections to fetch.
     */
    orderBy?: EmailConnectionOrderByWithRelationInput | EmailConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailConnections.
     */
    cursor?: EmailConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailConnections.
     */
    distinct?: EmailConnectionScalarFieldEnum | EmailConnectionScalarFieldEnum[]
  }

  /**
   * EmailConnection findFirstOrThrow
   */
  export type EmailConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter, which EmailConnection to fetch.
     */
    where?: EmailConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConnections to fetch.
     */
    orderBy?: EmailConnectionOrderByWithRelationInput | EmailConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailConnections.
     */
    cursor?: EmailConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailConnections.
     */
    distinct?: EmailConnectionScalarFieldEnum | EmailConnectionScalarFieldEnum[]
  }

  /**
   * EmailConnection findMany
   */
  export type EmailConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter, which EmailConnections to fetch.
     */
    where?: EmailConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConnections to fetch.
     */
    orderBy?: EmailConnectionOrderByWithRelationInput | EmailConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailConnections.
     */
    cursor?: EmailConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConnections.
     */
    skip?: number
    distinct?: EmailConnectionScalarFieldEnum | EmailConnectionScalarFieldEnum[]
  }

  /**
   * EmailConnection create
   */
  export type EmailConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailConnection.
     */
    data: XOR<EmailConnectionCreateInput, EmailConnectionUncheckedCreateInput>
  }

  /**
   * EmailConnection createMany
   */
  export type EmailConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailConnections.
     */
    data: EmailConnectionCreateManyInput | EmailConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailConnection createManyAndReturn
   */
  export type EmailConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * The data used to create many EmailConnections.
     */
    data: EmailConnectionCreateManyInput | EmailConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailConnection update
   */
  export type EmailConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailConnection.
     */
    data: XOR<EmailConnectionUpdateInput, EmailConnectionUncheckedUpdateInput>
    /**
     * Choose, which EmailConnection to update.
     */
    where: EmailConnectionWhereUniqueInput
  }

  /**
   * EmailConnection updateMany
   */
  export type EmailConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailConnections.
     */
    data: XOR<EmailConnectionUpdateManyMutationInput, EmailConnectionUncheckedUpdateManyInput>
    /**
     * Filter which EmailConnections to update
     */
    where?: EmailConnectionWhereInput
    /**
     * Limit how many EmailConnections to update.
     */
    limit?: number
  }

  /**
   * EmailConnection updateManyAndReturn
   */
  export type EmailConnectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * The data used to update EmailConnections.
     */
    data: XOR<EmailConnectionUpdateManyMutationInput, EmailConnectionUncheckedUpdateManyInput>
    /**
     * Filter which EmailConnections to update
     */
    where?: EmailConnectionWhereInput
    /**
     * Limit how many EmailConnections to update.
     */
    limit?: number
  }

  /**
   * EmailConnection upsert
   */
  export type EmailConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailConnection to update in case it exists.
     */
    where: EmailConnectionWhereUniqueInput
    /**
     * In case the EmailConnection found by the `where` argument doesn't exist, create a new EmailConnection with this data.
     */
    create: XOR<EmailConnectionCreateInput, EmailConnectionUncheckedCreateInput>
    /**
     * In case the EmailConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailConnectionUpdateInput, EmailConnectionUncheckedUpdateInput>
  }

  /**
   * EmailConnection delete
   */
  export type EmailConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
    /**
     * Filter which EmailConnection to delete.
     */
    where: EmailConnectionWhereUniqueInput
  }

  /**
   * EmailConnection deleteMany
   */
  export type EmailConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailConnections to delete
     */
    where?: EmailConnectionWhereInput
    /**
     * Limit how many EmailConnections to delete.
     */
    limit?: number
  }

  /**
   * EmailConnection without action
   */
  export type EmailConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConnection
     */
    select?: EmailConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailConnection
     */
    omit?: EmailConnectionOmit<ExtArgs> | null
  }


  /**
   * Model Load
   */

  export type AggregateLoad = {
    _count: LoadCountAggregateOutputType | null
    _avg: LoadAvgAggregateOutputType | null
    _sum: LoadSumAggregateOutputType | null
    _min: LoadMinAggregateOutputType | null
    _max: LoadMaxAggregateOutputType | null
  }

  export type LoadAvgAggregateOutputType = {
    weightLb: number | null
    riskScore: number | null
    extractionConfidence: Decimal | null
    marginTarget: Decimal | null
    priorityLevel: number | null
    postingDelayMinutes: number | null
    maxCarriersToContact: number | null
    preferredRatePerMile: Decimal | null
    totalMiles: number | null
    ratePerMile: Decimal | null
  }

  export type LoadSumAggregateOutputType = {
    weightLb: number | null
    riskScore: number | null
    extractionConfidence: Decimal | null
    marginTarget: Decimal | null
    priorityLevel: number | null
    postingDelayMinutes: number | null
    maxCarriersToContact: number | null
    preferredRatePerMile: Decimal | null
    totalMiles: number | null
    ratePerMile: Decimal | null
  }

  export type LoadMinAggregateOutputType = {
    brokerReviewedAt: Date | null
    brokerReviewNotes: string | null
    weightLb: number | null
    shipperName: string | null
    equipment: string | null
    pickupDt: Date | null
    shipperEmail: string | null
    destZip: string | null
    shipperPhone: string | null
    commodity: string | null
    originZip: string | null
    sourceEmailId: string | null
    status: string | null
    reviewedBy: string | null
    riskScore: number | null
    loadNumber: string | null
    sourceType: string | null
    sourceEmailAccountId: string | null
    rawEmailText: string | null
    updatedAt: Date | null
    extractionConfidence: Decimal | null
    brokerId: string | null
    aiNotes: string | null
    marginTarget: Decimal | null
    createdAt: Date | null
    priorityLevel: number | null
    createdBy: string | null
    modifiedBy: string | null
    postToCarriers: boolean | null
    postToDat: boolean | null
    postingDelayMinutes: number | null
    maxCarriersToContact: number | null
    id: string | null
    preferredRatePerMile: Decimal | null
    requiresHumanReview: boolean | null
    reviewReason: string | null
    complexityAnalysis: string | null
    brokerReviewStatus: string | null
    assignedSpecialist: string | null
    hazmat: boolean | null
    totalMiles: number | null
    ratePerMile: Decimal | null
  }

  export type LoadMaxAggregateOutputType = {
    brokerReviewedAt: Date | null
    brokerReviewNotes: string | null
    weightLb: number | null
    shipperName: string | null
    equipment: string | null
    pickupDt: Date | null
    shipperEmail: string | null
    destZip: string | null
    shipperPhone: string | null
    commodity: string | null
    originZip: string | null
    sourceEmailId: string | null
    status: string | null
    reviewedBy: string | null
    riskScore: number | null
    loadNumber: string | null
    sourceType: string | null
    sourceEmailAccountId: string | null
    rawEmailText: string | null
    updatedAt: Date | null
    extractionConfidence: Decimal | null
    brokerId: string | null
    aiNotes: string | null
    marginTarget: Decimal | null
    createdAt: Date | null
    priorityLevel: number | null
    createdBy: string | null
    modifiedBy: string | null
    postToCarriers: boolean | null
    postToDat: boolean | null
    postingDelayMinutes: number | null
    maxCarriersToContact: number | null
    id: string | null
    preferredRatePerMile: Decimal | null
    requiresHumanReview: boolean | null
    reviewReason: string | null
    complexityAnalysis: string | null
    brokerReviewStatus: string | null
    assignedSpecialist: string | null
    hazmat: boolean | null
    totalMiles: number | null
    ratePerMile: Decimal | null
  }

  export type LoadCountAggregateOutputType = {
    brokerReviewedAt: number
    brokerReviewNotes: number
    weightLb: number
    shipperName: number
    equipment: number
    complexityOverrides: number
    pickupDt: number
    shipperEmail: number
    destZip: number
    shipperPhone: number
    commodity: number
    originZip: number
    sourceEmailId: number
    status: number
    reviewedBy: number
    riskScore: number
    loadNumber: number
    sourceType: number
    sourceEmailAccountId: number
    rawEmailText: number
    updatedAt: number
    extractionConfidence: number
    brokerId: number
    missingFields: number
    aiNotes: number
    marginTarget: number
    createdAt: number
    priorityLevel: number
    createdBy: number
    modifiedBy: number
    postToCarriers: number
    postToDat: number
    postingDelayMinutes: number
    maxCarriersToContact: number
    id: number
    preferredRatePerMile: number
    complexityFlags: number
    requiresHumanReview: number
    reviewReason: number
    complexityAnalysis: number
    brokerReviewStatus: number
    assignedSpecialist: number
    hazmat: number
    totalMiles: number
    ratePerMile: number
    _all: number
  }


  export type LoadAvgAggregateInputType = {
    weightLb?: true
    riskScore?: true
    extractionConfidence?: true
    marginTarget?: true
    priorityLevel?: true
    postingDelayMinutes?: true
    maxCarriersToContact?: true
    preferredRatePerMile?: true
    totalMiles?: true
    ratePerMile?: true
  }

  export type LoadSumAggregateInputType = {
    weightLb?: true
    riskScore?: true
    extractionConfidence?: true
    marginTarget?: true
    priorityLevel?: true
    postingDelayMinutes?: true
    maxCarriersToContact?: true
    preferredRatePerMile?: true
    totalMiles?: true
    ratePerMile?: true
  }

  export type LoadMinAggregateInputType = {
    brokerReviewedAt?: true
    brokerReviewNotes?: true
    weightLb?: true
    shipperName?: true
    equipment?: true
    pickupDt?: true
    shipperEmail?: true
    destZip?: true
    shipperPhone?: true
    commodity?: true
    originZip?: true
    sourceEmailId?: true
    status?: true
    reviewedBy?: true
    riskScore?: true
    loadNumber?: true
    sourceType?: true
    sourceEmailAccountId?: true
    rawEmailText?: true
    updatedAt?: true
    extractionConfidence?: true
    brokerId?: true
    aiNotes?: true
    marginTarget?: true
    createdAt?: true
    priorityLevel?: true
    createdBy?: true
    modifiedBy?: true
    postToCarriers?: true
    postToDat?: true
    postingDelayMinutes?: true
    maxCarriersToContact?: true
    id?: true
    preferredRatePerMile?: true
    requiresHumanReview?: true
    reviewReason?: true
    complexityAnalysis?: true
    brokerReviewStatus?: true
    assignedSpecialist?: true
    hazmat?: true
    totalMiles?: true
    ratePerMile?: true
  }

  export type LoadMaxAggregateInputType = {
    brokerReviewedAt?: true
    brokerReviewNotes?: true
    weightLb?: true
    shipperName?: true
    equipment?: true
    pickupDt?: true
    shipperEmail?: true
    destZip?: true
    shipperPhone?: true
    commodity?: true
    originZip?: true
    sourceEmailId?: true
    status?: true
    reviewedBy?: true
    riskScore?: true
    loadNumber?: true
    sourceType?: true
    sourceEmailAccountId?: true
    rawEmailText?: true
    updatedAt?: true
    extractionConfidence?: true
    brokerId?: true
    aiNotes?: true
    marginTarget?: true
    createdAt?: true
    priorityLevel?: true
    createdBy?: true
    modifiedBy?: true
    postToCarriers?: true
    postToDat?: true
    postingDelayMinutes?: true
    maxCarriersToContact?: true
    id?: true
    preferredRatePerMile?: true
    requiresHumanReview?: true
    reviewReason?: true
    complexityAnalysis?: true
    brokerReviewStatus?: true
    assignedSpecialist?: true
    hazmat?: true
    totalMiles?: true
    ratePerMile?: true
  }

  export type LoadCountAggregateInputType = {
    brokerReviewedAt?: true
    brokerReviewNotes?: true
    weightLb?: true
    shipperName?: true
    equipment?: true
    complexityOverrides?: true
    pickupDt?: true
    shipperEmail?: true
    destZip?: true
    shipperPhone?: true
    commodity?: true
    originZip?: true
    sourceEmailId?: true
    status?: true
    reviewedBy?: true
    riskScore?: true
    loadNumber?: true
    sourceType?: true
    sourceEmailAccountId?: true
    rawEmailText?: true
    updatedAt?: true
    extractionConfidence?: true
    brokerId?: true
    missingFields?: true
    aiNotes?: true
    marginTarget?: true
    createdAt?: true
    priorityLevel?: true
    createdBy?: true
    modifiedBy?: true
    postToCarriers?: true
    postToDat?: true
    postingDelayMinutes?: true
    maxCarriersToContact?: true
    id?: true
    preferredRatePerMile?: true
    complexityFlags?: true
    requiresHumanReview?: true
    reviewReason?: true
    complexityAnalysis?: true
    brokerReviewStatus?: true
    assignedSpecialist?: true
    hazmat?: true
    totalMiles?: true
    ratePerMile?: true
    _all?: true
  }

  export type LoadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Load to aggregate.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loads
    **/
    _count?: true | LoadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoadMaxAggregateInputType
  }

  export type GetLoadAggregateType<T extends LoadAggregateArgs> = {
        [P in keyof T & keyof AggregateLoad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoad[P]>
      : GetScalarType<T[P], AggregateLoad[P]>
  }




  export type LoadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadWhereInput
    orderBy?: LoadOrderByWithAggregationInput | LoadOrderByWithAggregationInput[]
    by: LoadScalarFieldEnum[] | LoadScalarFieldEnum
    having?: LoadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoadCountAggregateInputType | true
    _avg?: LoadAvgAggregateInputType
    _sum?: LoadSumAggregateInputType
    _min?: LoadMinAggregateInputType
    _max?: LoadMaxAggregateInputType
  }

  export type LoadGroupByOutputType = {
    brokerReviewedAt: Date | null
    brokerReviewNotes: string | null
    weightLb: number
    shipperName: string | null
    equipment: string
    complexityOverrides: string[]
    pickupDt: Date
    shipperEmail: string | null
    destZip: string
    shipperPhone: string | null
    commodity: string | null
    originZip: string
    sourceEmailId: string | null
    status: string
    reviewedBy: string | null
    riskScore: number
    loadNumber: string | null
    sourceType: string
    sourceEmailAccountId: string | null
    rawEmailText: string | null
    updatedAt: Date
    extractionConfidence: Decimal | null
    brokerId: string | null
    missingFields: string[]
    aiNotes: string | null
    marginTarget: Decimal | null
    createdAt: Date
    priorityLevel: number
    createdBy: string
    modifiedBy: string | null
    postToCarriers: boolean
    postToDat: boolean
    postingDelayMinutes: number
    maxCarriersToContact: number
    id: string
    preferredRatePerMile: Decimal | null
    complexityFlags: string[]
    requiresHumanReview: boolean
    reviewReason: string | null
    complexityAnalysis: string | null
    brokerReviewStatus: string | null
    assignedSpecialist: string | null
    hazmat: boolean
    totalMiles: number | null
    ratePerMile: Decimal | null
    _count: LoadCountAggregateOutputType | null
    _avg: LoadAvgAggregateOutputType | null
    _sum: LoadSumAggregateOutputType | null
    _min: LoadMinAggregateOutputType | null
    _max: LoadMaxAggregateOutputType | null
  }

  type GetLoadGroupByPayload<T extends LoadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoadGroupByOutputType[P]>
            : GetScalarType<T[P], LoadGroupByOutputType[P]>
        }
      >
    >


  export type LoadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    brokerReviewedAt?: boolean
    brokerReviewNotes?: boolean
    weightLb?: boolean
    shipperName?: boolean
    equipment?: boolean
    complexityOverrides?: boolean
    pickupDt?: boolean
    shipperEmail?: boolean
    destZip?: boolean
    shipperPhone?: boolean
    commodity?: boolean
    originZip?: boolean
    sourceEmailId?: boolean
    status?: boolean
    reviewedBy?: boolean
    riskScore?: boolean
    loadNumber?: boolean
    sourceType?: boolean
    sourceEmailAccountId?: boolean
    rawEmailText?: boolean
    updatedAt?: boolean
    extractionConfidence?: boolean
    brokerId?: boolean
    missingFields?: boolean
    aiNotes?: boolean
    marginTarget?: boolean
    createdAt?: boolean
    priorityLevel?: boolean
    createdBy?: boolean
    modifiedBy?: boolean
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: boolean
    maxCarriersToContact?: boolean
    id?: boolean
    preferredRatePerMile?: boolean
    complexityFlags?: boolean
    requiresHumanReview?: boolean
    reviewReason?: boolean
    complexityAnalysis?: boolean
    brokerReviewStatus?: boolean
    assignedSpecialist?: boolean
    hazmat?: boolean
    totalMiles?: boolean
    ratePerMile?: boolean
  }, ExtArgs["result"]["load"]>

  export type LoadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    brokerReviewedAt?: boolean
    brokerReviewNotes?: boolean
    weightLb?: boolean
    shipperName?: boolean
    equipment?: boolean
    complexityOverrides?: boolean
    pickupDt?: boolean
    shipperEmail?: boolean
    destZip?: boolean
    shipperPhone?: boolean
    commodity?: boolean
    originZip?: boolean
    sourceEmailId?: boolean
    status?: boolean
    reviewedBy?: boolean
    riskScore?: boolean
    loadNumber?: boolean
    sourceType?: boolean
    sourceEmailAccountId?: boolean
    rawEmailText?: boolean
    updatedAt?: boolean
    extractionConfidence?: boolean
    brokerId?: boolean
    missingFields?: boolean
    aiNotes?: boolean
    marginTarget?: boolean
    createdAt?: boolean
    priorityLevel?: boolean
    createdBy?: boolean
    modifiedBy?: boolean
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: boolean
    maxCarriersToContact?: boolean
    id?: boolean
    preferredRatePerMile?: boolean
    complexityFlags?: boolean
    requiresHumanReview?: boolean
    reviewReason?: boolean
    complexityAnalysis?: boolean
    brokerReviewStatus?: boolean
    assignedSpecialist?: boolean
    hazmat?: boolean
    totalMiles?: boolean
    ratePerMile?: boolean
  }, ExtArgs["result"]["load"]>

  export type LoadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    brokerReviewedAt?: boolean
    brokerReviewNotes?: boolean
    weightLb?: boolean
    shipperName?: boolean
    equipment?: boolean
    complexityOverrides?: boolean
    pickupDt?: boolean
    shipperEmail?: boolean
    destZip?: boolean
    shipperPhone?: boolean
    commodity?: boolean
    originZip?: boolean
    sourceEmailId?: boolean
    status?: boolean
    reviewedBy?: boolean
    riskScore?: boolean
    loadNumber?: boolean
    sourceType?: boolean
    sourceEmailAccountId?: boolean
    rawEmailText?: boolean
    updatedAt?: boolean
    extractionConfidence?: boolean
    brokerId?: boolean
    missingFields?: boolean
    aiNotes?: boolean
    marginTarget?: boolean
    createdAt?: boolean
    priorityLevel?: boolean
    createdBy?: boolean
    modifiedBy?: boolean
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: boolean
    maxCarriersToContact?: boolean
    id?: boolean
    preferredRatePerMile?: boolean
    complexityFlags?: boolean
    requiresHumanReview?: boolean
    reviewReason?: boolean
    complexityAnalysis?: boolean
    brokerReviewStatus?: boolean
    assignedSpecialist?: boolean
    hazmat?: boolean
    totalMiles?: boolean
    ratePerMile?: boolean
  }, ExtArgs["result"]["load"]>

  export type LoadSelectScalar = {
    brokerReviewedAt?: boolean
    brokerReviewNotes?: boolean
    weightLb?: boolean
    shipperName?: boolean
    equipment?: boolean
    complexityOverrides?: boolean
    pickupDt?: boolean
    shipperEmail?: boolean
    destZip?: boolean
    shipperPhone?: boolean
    commodity?: boolean
    originZip?: boolean
    sourceEmailId?: boolean
    status?: boolean
    reviewedBy?: boolean
    riskScore?: boolean
    loadNumber?: boolean
    sourceType?: boolean
    sourceEmailAccountId?: boolean
    rawEmailText?: boolean
    updatedAt?: boolean
    extractionConfidence?: boolean
    brokerId?: boolean
    missingFields?: boolean
    aiNotes?: boolean
    marginTarget?: boolean
    createdAt?: boolean
    priorityLevel?: boolean
    createdBy?: boolean
    modifiedBy?: boolean
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: boolean
    maxCarriersToContact?: boolean
    id?: boolean
    preferredRatePerMile?: boolean
    complexityFlags?: boolean
    requiresHumanReview?: boolean
    reviewReason?: boolean
    complexityAnalysis?: boolean
    brokerReviewStatus?: boolean
    assignedSpecialist?: boolean
    hazmat?: boolean
    totalMiles?: boolean
    ratePerMile?: boolean
  }

  export type LoadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"brokerReviewedAt" | "brokerReviewNotes" | "weightLb" | "shipperName" | "equipment" | "complexityOverrides" | "pickupDt" | "shipperEmail" | "destZip" | "shipperPhone" | "commodity" | "originZip" | "sourceEmailId" | "status" | "reviewedBy" | "riskScore" | "loadNumber" | "sourceType" | "sourceEmailAccountId" | "rawEmailText" | "updatedAt" | "extractionConfidence" | "brokerId" | "missingFields" | "aiNotes" | "marginTarget" | "createdAt" | "priorityLevel" | "createdBy" | "modifiedBy" | "postToCarriers" | "postToDat" | "postingDelayMinutes" | "maxCarriersToContact" | "id" | "preferredRatePerMile" | "complexityFlags" | "requiresHumanReview" | "reviewReason" | "complexityAnalysis" | "brokerReviewStatus" | "assignedSpecialist" | "hazmat" | "totalMiles" | "ratePerMile", ExtArgs["result"]["load"]>

  export type $LoadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Load"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      brokerReviewedAt: Date | null
      brokerReviewNotes: string | null
      weightLb: number
      shipperName: string | null
      equipment: string
      complexityOverrides: string[]
      pickupDt: Date
      shipperEmail: string | null
      destZip: string
      shipperPhone: string | null
      commodity: string | null
      originZip: string
      sourceEmailId: string | null
      status: string
      reviewedBy: string | null
      riskScore: number
      loadNumber: string | null
      sourceType: string
      sourceEmailAccountId: string | null
      rawEmailText: string | null
      updatedAt: Date
      extractionConfidence: Prisma.Decimal | null
      brokerId: string | null
      missingFields: string[]
      aiNotes: string | null
      marginTarget: Prisma.Decimal | null
      createdAt: Date
      priorityLevel: number
      createdBy: string
      modifiedBy: string | null
      postToCarriers: boolean
      postToDat: boolean
      postingDelayMinutes: number
      maxCarriersToContact: number
      id: string
      preferredRatePerMile: Prisma.Decimal | null
      complexityFlags: string[]
      requiresHumanReview: boolean
      reviewReason: string | null
      complexityAnalysis: string | null
      brokerReviewStatus: string | null
      assignedSpecialist: string | null
      hazmat: boolean
      totalMiles: number | null
      ratePerMile: Prisma.Decimal | null
    }, ExtArgs["result"]["load"]>
    composites: {}
  }

  type LoadGetPayload<S extends boolean | null | undefined | LoadDefaultArgs> = $Result.GetResult<Prisma.$LoadPayload, S>

  type LoadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoadCountAggregateInputType | true
    }

  export interface LoadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Load'], meta: { name: 'Load' } }
    /**
     * Find zero or one Load that matches the filter.
     * @param {LoadFindUniqueArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoadFindUniqueArgs>(args: SelectSubset<T, LoadFindUniqueArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Load that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoadFindUniqueOrThrowArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoadFindUniqueOrThrowArgs>(args: SelectSubset<T, LoadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Load that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindFirstArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoadFindFirstArgs>(args?: SelectSubset<T, LoadFindFirstArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Load that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindFirstOrThrowArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoadFindFirstOrThrowArgs>(args?: SelectSubset<T, LoadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Loads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loads
     * const loads = await prisma.load.findMany()
     * 
     * // Get first 10 Loads
     * const loads = await prisma.load.findMany({ take: 10 })
     * 
     * // Only select the `brokerReviewedAt`
     * const loadWithBrokerReviewedAtOnly = await prisma.load.findMany({ select: { brokerReviewedAt: true } })
     * 
     */
    findMany<T extends LoadFindManyArgs>(args?: SelectSubset<T, LoadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Load.
     * @param {LoadCreateArgs} args - Arguments to create a Load.
     * @example
     * // Create one Load
     * const Load = await prisma.load.create({
     *   data: {
     *     // ... data to create a Load
     *   }
     * })
     * 
     */
    create<T extends LoadCreateArgs>(args: SelectSubset<T, LoadCreateArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Loads.
     * @param {LoadCreateManyArgs} args - Arguments to create many Loads.
     * @example
     * // Create many Loads
     * const load = await prisma.load.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoadCreateManyArgs>(args?: SelectSubset<T, LoadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Loads and returns the data saved in the database.
     * @param {LoadCreateManyAndReturnArgs} args - Arguments to create many Loads.
     * @example
     * // Create many Loads
     * const load = await prisma.load.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Loads and only return the `brokerReviewedAt`
     * const loadWithBrokerReviewedAtOnly = await prisma.load.createManyAndReturn({
     *   select: { brokerReviewedAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoadCreateManyAndReturnArgs>(args?: SelectSubset<T, LoadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Load.
     * @param {LoadDeleteArgs} args - Arguments to delete one Load.
     * @example
     * // Delete one Load
     * const Load = await prisma.load.delete({
     *   where: {
     *     // ... filter to delete one Load
     *   }
     * })
     * 
     */
    delete<T extends LoadDeleteArgs>(args: SelectSubset<T, LoadDeleteArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Load.
     * @param {LoadUpdateArgs} args - Arguments to update one Load.
     * @example
     * // Update one Load
     * const load = await prisma.load.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoadUpdateArgs>(args: SelectSubset<T, LoadUpdateArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Loads.
     * @param {LoadDeleteManyArgs} args - Arguments to filter Loads to delete.
     * @example
     * // Delete a few Loads
     * const { count } = await prisma.load.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoadDeleteManyArgs>(args?: SelectSubset<T, LoadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loads
     * const load = await prisma.load.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoadUpdateManyArgs>(args: SelectSubset<T, LoadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loads and returns the data updated in the database.
     * @param {LoadUpdateManyAndReturnArgs} args - Arguments to update many Loads.
     * @example
     * // Update many Loads
     * const load = await prisma.load.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Loads and only return the `brokerReviewedAt`
     * const loadWithBrokerReviewedAtOnly = await prisma.load.updateManyAndReturn({
     *   select: { brokerReviewedAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoadUpdateManyAndReturnArgs>(args: SelectSubset<T, LoadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Load.
     * @param {LoadUpsertArgs} args - Arguments to update or create a Load.
     * @example
     * // Update or create a Load
     * const load = await prisma.load.upsert({
     *   create: {
     *     // ... data to create a Load
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Load we want to update
     *   }
     * })
     */
    upsert<T extends LoadUpsertArgs>(args: SelectSubset<T, LoadUpsertArgs<ExtArgs>>): Prisma__LoadClient<$Result.GetResult<Prisma.$LoadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Loads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadCountArgs} args - Arguments to filter Loads to count.
     * @example
     * // Count the number of Loads
     * const count = await prisma.load.count({
     *   where: {
     *     // ... the filter for the Loads we want to count
     *   }
     * })
    **/
    count<T extends LoadCountArgs>(
      args?: Subset<T, LoadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Load.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadAggregateArgs>(args: Subset<T, LoadAggregateArgs>): Prisma.PrismaPromise<GetLoadAggregateType<T>>

    /**
     * Group by Load.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoadGroupByArgs['orderBy'] }
        : { orderBy?: LoadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Load model
   */
  readonly fields: LoadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Load.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Load model
   */
  interface LoadFieldRefs {
    readonly brokerReviewedAt: FieldRef<"Load", 'DateTime'>
    readonly brokerReviewNotes: FieldRef<"Load", 'String'>
    readonly weightLb: FieldRef<"Load", 'Int'>
    readonly shipperName: FieldRef<"Load", 'String'>
    readonly equipment: FieldRef<"Load", 'String'>
    readonly complexityOverrides: FieldRef<"Load", 'String[]'>
    readonly pickupDt: FieldRef<"Load", 'DateTime'>
    readonly shipperEmail: FieldRef<"Load", 'String'>
    readonly destZip: FieldRef<"Load", 'String'>
    readonly shipperPhone: FieldRef<"Load", 'String'>
    readonly commodity: FieldRef<"Load", 'String'>
    readonly originZip: FieldRef<"Load", 'String'>
    readonly sourceEmailId: FieldRef<"Load", 'String'>
    readonly status: FieldRef<"Load", 'String'>
    readonly reviewedBy: FieldRef<"Load", 'String'>
    readonly riskScore: FieldRef<"Load", 'Int'>
    readonly loadNumber: FieldRef<"Load", 'String'>
    readonly sourceType: FieldRef<"Load", 'String'>
    readonly sourceEmailAccountId: FieldRef<"Load", 'String'>
    readonly rawEmailText: FieldRef<"Load", 'String'>
    readonly updatedAt: FieldRef<"Load", 'DateTime'>
    readonly extractionConfidence: FieldRef<"Load", 'Decimal'>
    readonly brokerId: FieldRef<"Load", 'String'>
    readonly missingFields: FieldRef<"Load", 'String[]'>
    readonly aiNotes: FieldRef<"Load", 'String'>
    readonly marginTarget: FieldRef<"Load", 'Decimal'>
    readonly createdAt: FieldRef<"Load", 'DateTime'>
    readonly priorityLevel: FieldRef<"Load", 'Int'>
    readonly createdBy: FieldRef<"Load", 'String'>
    readonly modifiedBy: FieldRef<"Load", 'String'>
    readonly postToCarriers: FieldRef<"Load", 'Boolean'>
    readonly postToDat: FieldRef<"Load", 'Boolean'>
    readonly postingDelayMinutes: FieldRef<"Load", 'Int'>
    readonly maxCarriersToContact: FieldRef<"Load", 'Int'>
    readonly id: FieldRef<"Load", 'String'>
    readonly preferredRatePerMile: FieldRef<"Load", 'Decimal'>
    readonly complexityFlags: FieldRef<"Load", 'String[]'>
    readonly requiresHumanReview: FieldRef<"Load", 'Boolean'>
    readonly reviewReason: FieldRef<"Load", 'String'>
    readonly complexityAnalysis: FieldRef<"Load", 'String'>
    readonly brokerReviewStatus: FieldRef<"Load", 'String'>
    readonly assignedSpecialist: FieldRef<"Load", 'String'>
    readonly hazmat: FieldRef<"Load", 'Boolean'>
    readonly totalMiles: FieldRef<"Load", 'Int'>
    readonly ratePerMile: FieldRef<"Load", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Load findUnique
   */
  export type LoadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load findUniqueOrThrow
   */
  export type LoadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load findFirst
   */
  export type LoadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load findFirstOrThrow
   */
  export type LoadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter, which Load to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loads.
     */
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load findMany
   */
  export type LoadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter, which Loads to fetch.
     */
    where?: LoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loads to fetch.
     */
    orderBy?: LoadOrderByWithRelationInput | LoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loads.
     */
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
     */
    skip?: number
    distinct?: LoadScalarFieldEnum | LoadScalarFieldEnum[]
  }

  /**
   * Load create
   */
  export type LoadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * The data needed to create a Load.
     */
    data: XOR<LoadCreateInput, LoadUncheckedCreateInput>
  }

  /**
   * Load createMany
   */
  export type LoadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loads.
     */
    data: LoadCreateManyInput | LoadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Load createManyAndReturn
   */
  export type LoadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * The data used to create many Loads.
     */
    data: LoadCreateManyInput | LoadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Load update
   */
  export type LoadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * The data needed to update a Load.
     */
    data: XOR<LoadUpdateInput, LoadUncheckedUpdateInput>
    /**
     * Choose, which Load to update.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load updateMany
   */
  export type LoadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loads.
     */
    data: XOR<LoadUpdateManyMutationInput, LoadUncheckedUpdateManyInput>
    /**
     * Filter which Loads to update
     */
    where?: LoadWhereInput
    /**
     * Limit how many Loads to update.
     */
    limit?: number
  }

  /**
   * Load updateManyAndReturn
   */
  export type LoadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * The data used to update Loads.
     */
    data: XOR<LoadUpdateManyMutationInput, LoadUncheckedUpdateManyInput>
    /**
     * Filter which Loads to update
     */
    where?: LoadWhereInput
    /**
     * Limit how many Loads to update.
     */
    limit?: number
  }

  /**
   * Load upsert
   */
  export type LoadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * The filter to search for the Load to update in case it exists.
     */
    where: LoadWhereUniqueInput
    /**
     * In case the Load found by the `where` argument doesn't exist, create a new Load with this data.
     */
    create: XOR<LoadCreateInput, LoadUncheckedCreateInput>
    /**
     * In case the Load was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoadUpdateInput, LoadUncheckedUpdateInput>
  }

  /**
   * Load delete
   */
  export type LoadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
    /**
     * Filter which Load to delete.
     */
    where: LoadWhereUniqueInput
  }

  /**
   * Load deleteMany
   */
  export type LoadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loads to delete
     */
    where?: LoadWhereInput
    /**
     * Limit how many Loads to delete.
     */
    limit?: number
  }

  /**
   * Load without action
   */
  export type LoadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Load
     */
    select?: LoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Load
     */
    omit?: LoadOmit<ExtArgs> | null
  }


  /**
   * Model Carrier
   */

  export type AggregateCarrier = {
    _count: CarrierCountAggregateOutputType | null
    _avg: CarrierAvgAggregateOutputType | null
    _sum: CarrierSumAggregateOutputType | null
    _min: CarrierMinAggregateOutputType | null
    _max: CarrierMaxAggregateOutputType | null
  }

  export type CarrierAvgAggregateOutputType = {
    loadsCompleted: number | null
    preferenceTier: number | null
    averageRatePerMile: Decimal | null
    loadsAccepted: number | null
    loadsOffered: number | null
  }

  export type CarrierSumAggregateOutputType = {
    loadsCompleted: number | null
    preferenceTier: number | null
    averageRatePerMile: Decimal | null
    loadsAccepted: number | null
    loadsOffered: number | null
  }

  export type CarrierMinAggregateOutputType = {
    updatedAt: Date | null
    lastContactDate: Date | null
    creditRating: string | null
    createdBy: string | null
    loadsCompleted: number | null
    insuranceExpiry: Date | null
    contactPhone: string | null
    preferenceTier: number | null
    createdAt: Date | null
    contactEmail: string | null
    notes: string | null
    averageRatePerMile: Decimal | null
    modifiedBy: string | null
    loadsAccepted: number | null
    smsEnabled: boolean | null
    contactName: string | null
    dotNumber: string | null
    id: string | null
    carrierName: string | null
    isPreferred: boolean | null
    status: string | null
    mcNumber: string | null
    phoneNumber: string | null
    emailEnabled: boolean | null
    loadsOffered: number | null
  }

  export type CarrierMaxAggregateOutputType = {
    updatedAt: Date | null
    lastContactDate: Date | null
    creditRating: string | null
    createdBy: string | null
    loadsCompleted: number | null
    insuranceExpiry: Date | null
    contactPhone: string | null
    preferenceTier: number | null
    createdAt: Date | null
    contactEmail: string | null
    notes: string | null
    averageRatePerMile: Decimal | null
    modifiedBy: string | null
    loadsAccepted: number | null
    smsEnabled: boolean | null
    contactName: string | null
    dotNumber: string | null
    id: string | null
    carrierName: string | null
    isPreferred: boolean | null
    status: string | null
    mcNumber: string | null
    phoneNumber: string | null
    emailEnabled: boolean | null
    loadsOffered: number | null
  }

  export type CarrierCountAggregateOutputType = {
    updatedAt: number
    lastContactDate: number
    serviceAreas: number
    creditRating: number
    createdBy: number
    loadsCompleted: number
    insuranceExpiry: number
    contactPhone: number
    preferenceTier: number
    createdAt: number
    contactEmail: number
    notes: number
    averageRatePerMile: number
    modifiedBy: number
    loadsAccepted: number
    smsEnabled: number
    contactName: number
    dotNumber: number
    id: number
    carrierName: number
    isPreferred: number
    equipmentTypes: number
    status: number
    mcNumber: number
    phoneNumber: number
    emailEnabled: number
    loadsOffered: number
    _all: number
  }


  export type CarrierAvgAggregateInputType = {
    loadsCompleted?: true
    preferenceTier?: true
    averageRatePerMile?: true
    loadsAccepted?: true
    loadsOffered?: true
  }

  export type CarrierSumAggregateInputType = {
    loadsCompleted?: true
    preferenceTier?: true
    averageRatePerMile?: true
    loadsAccepted?: true
    loadsOffered?: true
  }

  export type CarrierMinAggregateInputType = {
    updatedAt?: true
    lastContactDate?: true
    creditRating?: true
    createdBy?: true
    loadsCompleted?: true
    insuranceExpiry?: true
    contactPhone?: true
    preferenceTier?: true
    createdAt?: true
    contactEmail?: true
    notes?: true
    averageRatePerMile?: true
    modifiedBy?: true
    loadsAccepted?: true
    smsEnabled?: true
    contactName?: true
    dotNumber?: true
    id?: true
    carrierName?: true
    isPreferred?: true
    status?: true
    mcNumber?: true
    phoneNumber?: true
    emailEnabled?: true
    loadsOffered?: true
  }

  export type CarrierMaxAggregateInputType = {
    updatedAt?: true
    lastContactDate?: true
    creditRating?: true
    createdBy?: true
    loadsCompleted?: true
    insuranceExpiry?: true
    contactPhone?: true
    preferenceTier?: true
    createdAt?: true
    contactEmail?: true
    notes?: true
    averageRatePerMile?: true
    modifiedBy?: true
    loadsAccepted?: true
    smsEnabled?: true
    contactName?: true
    dotNumber?: true
    id?: true
    carrierName?: true
    isPreferred?: true
    status?: true
    mcNumber?: true
    phoneNumber?: true
    emailEnabled?: true
    loadsOffered?: true
  }

  export type CarrierCountAggregateInputType = {
    updatedAt?: true
    lastContactDate?: true
    serviceAreas?: true
    creditRating?: true
    createdBy?: true
    loadsCompleted?: true
    insuranceExpiry?: true
    contactPhone?: true
    preferenceTier?: true
    createdAt?: true
    contactEmail?: true
    notes?: true
    averageRatePerMile?: true
    modifiedBy?: true
    loadsAccepted?: true
    smsEnabled?: true
    contactName?: true
    dotNumber?: true
    id?: true
    carrierName?: true
    isPreferred?: true
    equipmentTypes?: true
    status?: true
    mcNumber?: true
    phoneNumber?: true
    emailEnabled?: true
    loadsOffered?: true
    _all?: true
  }

  export type CarrierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrier to aggregate.
     */
    where?: CarrierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carriers to fetch.
     */
    orderBy?: CarrierOrderByWithRelationInput | CarrierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarrierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carriers
    **/
    _count?: true | CarrierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrierMaxAggregateInputType
  }

  export type GetCarrierAggregateType<T extends CarrierAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrier[P]>
      : GetScalarType<T[P], AggregateCarrier[P]>
  }




  export type CarrierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrierWhereInput
    orderBy?: CarrierOrderByWithAggregationInput | CarrierOrderByWithAggregationInput[]
    by: CarrierScalarFieldEnum[] | CarrierScalarFieldEnum
    having?: CarrierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrierCountAggregateInputType | true
    _avg?: CarrierAvgAggregateInputType
    _sum?: CarrierSumAggregateInputType
    _min?: CarrierMinAggregateInputType
    _max?: CarrierMaxAggregateInputType
  }

  export type CarrierGroupByOutputType = {
    updatedAt: Date
    lastContactDate: Date | null
    serviceAreas: string[]
    creditRating: string | null
    createdBy: string
    loadsCompleted: number
    insuranceExpiry: Date | null
    contactPhone: string | null
    preferenceTier: number
    createdAt: Date
    contactEmail: string
    notes: string | null
    averageRatePerMile: Decimal | null
    modifiedBy: string | null
    loadsAccepted: number
    smsEnabled: boolean
    contactName: string | null
    dotNumber: string | null
    id: string
    carrierName: string
    isPreferred: boolean
    equipmentTypes: string[]
    status: string
    mcNumber: string | null
    phoneNumber: string | null
    emailEnabled: boolean
    loadsOffered: number
    _count: CarrierCountAggregateOutputType | null
    _avg: CarrierAvgAggregateOutputType | null
    _sum: CarrierSumAggregateOutputType | null
    _min: CarrierMinAggregateOutputType | null
    _max: CarrierMaxAggregateOutputType | null
  }

  type GetCarrierGroupByPayload<T extends CarrierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarrierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrierGroupByOutputType[P]>
            : GetScalarType<T[P], CarrierGroupByOutputType[P]>
        }
      >
    >


  export type CarrierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    lastContactDate?: boolean
    serviceAreas?: boolean
    creditRating?: boolean
    createdBy?: boolean
    loadsCompleted?: boolean
    insuranceExpiry?: boolean
    contactPhone?: boolean
    preferenceTier?: boolean
    createdAt?: boolean
    contactEmail?: boolean
    notes?: boolean
    averageRatePerMile?: boolean
    modifiedBy?: boolean
    loadsAccepted?: boolean
    smsEnabled?: boolean
    contactName?: boolean
    dotNumber?: boolean
    id?: boolean
    carrierName?: boolean
    isPreferred?: boolean
    equipmentTypes?: boolean
    status?: boolean
    mcNumber?: boolean
    phoneNumber?: boolean
    emailEnabled?: boolean
    loadsOffered?: boolean
  }, ExtArgs["result"]["carrier"]>

  export type CarrierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    lastContactDate?: boolean
    serviceAreas?: boolean
    creditRating?: boolean
    createdBy?: boolean
    loadsCompleted?: boolean
    insuranceExpiry?: boolean
    contactPhone?: boolean
    preferenceTier?: boolean
    createdAt?: boolean
    contactEmail?: boolean
    notes?: boolean
    averageRatePerMile?: boolean
    modifiedBy?: boolean
    loadsAccepted?: boolean
    smsEnabled?: boolean
    contactName?: boolean
    dotNumber?: boolean
    id?: boolean
    carrierName?: boolean
    isPreferred?: boolean
    equipmentTypes?: boolean
    status?: boolean
    mcNumber?: boolean
    phoneNumber?: boolean
    emailEnabled?: boolean
    loadsOffered?: boolean
  }, ExtArgs["result"]["carrier"]>

  export type CarrierSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    lastContactDate?: boolean
    serviceAreas?: boolean
    creditRating?: boolean
    createdBy?: boolean
    loadsCompleted?: boolean
    insuranceExpiry?: boolean
    contactPhone?: boolean
    preferenceTier?: boolean
    createdAt?: boolean
    contactEmail?: boolean
    notes?: boolean
    averageRatePerMile?: boolean
    modifiedBy?: boolean
    loadsAccepted?: boolean
    smsEnabled?: boolean
    contactName?: boolean
    dotNumber?: boolean
    id?: boolean
    carrierName?: boolean
    isPreferred?: boolean
    equipmentTypes?: boolean
    status?: boolean
    mcNumber?: boolean
    phoneNumber?: boolean
    emailEnabled?: boolean
    loadsOffered?: boolean
  }, ExtArgs["result"]["carrier"]>

  export type CarrierSelectScalar = {
    updatedAt?: boolean
    lastContactDate?: boolean
    serviceAreas?: boolean
    creditRating?: boolean
    createdBy?: boolean
    loadsCompleted?: boolean
    insuranceExpiry?: boolean
    contactPhone?: boolean
    preferenceTier?: boolean
    createdAt?: boolean
    contactEmail?: boolean
    notes?: boolean
    averageRatePerMile?: boolean
    modifiedBy?: boolean
    loadsAccepted?: boolean
    smsEnabled?: boolean
    contactName?: boolean
    dotNumber?: boolean
    id?: boolean
    carrierName?: boolean
    isPreferred?: boolean
    equipmentTypes?: boolean
    status?: boolean
    mcNumber?: boolean
    phoneNumber?: boolean
    emailEnabled?: boolean
    loadsOffered?: boolean
  }

  export type CarrierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"updatedAt" | "lastContactDate" | "serviceAreas" | "creditRating" | "createdBy" | "loadsCompleted" | "insuranceExpiry" | "contactPhone" | "preferenceTier" | "createdAt" | "contactEmail" | "notes" | "averageRatePerMile" | "modifiedBy" | "loadsAccepted" | "smsEnabled" | "contactName" | "dotNumber" | "id" | "carrierName" | "isPreferred" | "equipmentTypes" | "status" | "mcNumber" | "phoneNumber" | "emailEnabled" | "loadsOffered", ExtArgs["result"]["carrier"]>

  export type $CarrierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carrier"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      updatedAt: Date
      lastContactDate: Date | null
      serviceAreas: string[]
      creditRating: string | null
      createdBy: string
      loadsCompleted: number
      insuranceExpiry: Date | null
      contactPhone: string | null
      preferenceTier: number
      createdAt: Date
      contactEmail: string
      notes: string | null
      averageRatePerMile: Prisma.Decimal | null
      modifiedBy: string | null
      loadsAccepted: number
      smsEnabled: boolean
      contactName: string | null
      dotNumber: string | null
      id: string
      carrierName: string
      isPreferred: boolean
      equipmentTypes: string[]
      status: string
      mcNumber: string | null
      phoneNumber: string | null
      emailEnabled: boolean
      loadsOffered: number
    }, ExtArgs["result"]["carrier"]>
    composites: {}
  }

  type CarrierGetPayload<S extends boolean | null | undefined | CarrierDefaultArgs> = $Result.GetResult<Prisma.$CarrierPayload, S>

  type CarrierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarrierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarrierCountAggregateInputType | true
    }

  export interface CarrierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrier'], meta: { name: 'Carrier' } }
    /**
     * Find zero or one Carrier that matches the filter.
     * @param {CarrierFindUniqueArgs} args - Arguments to find a Carrier
     * @example
     * // Get one Carrier
     * const carrier = await prisma.carrier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarrierFindUniqueArgs>(args: SelectSubset<T, CarrierFindUniqueArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Carrier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarrierFindUniqueOrThrowArgs} args - Arguments to find a Carrier
     * @example
     * // Get one Carrier
     * const carrier = await prisma.carrier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarrierFindUniqueOrThrowArgs>(args: SelectSubset<T, CarrierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carrier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierFindFirstArgs} args - Arguments to find a Carrier
     * @example
     * // Get one Carrier
     * const carrier = await prisma.carrier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarrierFindFirstArgs>(args?: SelectSubset<T, CarrierFindFirstArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carrier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierFindFirstOrThrowArgs} args - Arguments to find a Carrier
     * @example
     * // Get one Carrier
     * const carrier = await prisma.carrier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarrierFindFirstOrThrowArgs>(args?: SelectSubset<T, CarrierFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Carriers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carriers
     * const carriers = await prisma.carrier.findMany()
     * 
     * // Get first 10 Carriers
     * const carriers = await prisma.carrier.findMany({ take: 10 })
     * 
     * // Only select the `updatedAt`
     * const carrierWithUpdatedAtOnly = await prisma.carrier.findMany({ select: { updatedAt: true } })
     * 
     */
    findMany<T extends CarrierFindManyArgs>(args?: SelectSubset<T, CarrierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Carrier.
     * @param {CarrierCreateArgs} args - Arguments to create a Carrier.
     * @example
     * // Create one Carrier
     * const Carrier = await prisma.carrier.create({
     *   data: {
     *     // ... data to create a Carrier
     *   }
     * })
     * 
     */
    create<T extends CarrierCreateArgs>(args: SelectSubset<T, CarrierCreateArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Carriers.
     * @param {CarrierCreateManyArgs} args - Arguments to create many Carriers.
     * @example
     * // Create many Carriers
     * const carrier = await prisma.carrier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarrierCreateManyArgs>(args?: SelectSubset<T, CarrierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carriers and returns the data saved in the database.
     * @param {CarrierCreateManyAndReturnArgs} args - Arguments to create many Carriers.
     * @example
     * // Create many Carriers
     * const carrier = await prisma.carrier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carriers and only return the `updatedAt`
     * const carrierWithUpdatedAtOnly = await prisma.carrier.createManyAndReturn({
     *   select: { updatedAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarrierCreateManyAndReturnArgs>(args?: SelectSubset<T, CarrierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Carrier.
     * @param {CarrierDeleteArgs} args - Arguments to delete one Carrier.
     * @example
     * // Delete one Carrier
     * const Carrier = await prisma.carrier.delete({
     *   where: {
     *     // ... filter to delete one Carrier
     *   }
     * })
     * 
     */
    delete<T extends CarrierDeleteArgs>(args: SelectSubset<T, CarrierDeleteArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Carrier.
     * @param {CarrierUpdateArgs} args - Arguments to update one Carrier.
     * @example
     * // Update one Carrier
     * const carrier = await prisma.carrier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarrierUpdateArgs>(args: SelectSubset<T, CarrierUpdateArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Carriers.
     * @param {CarrierDeleteManyArgs} args - Arguments to filter Carriers to delete.
     * @example
     * // Delete a few Carriers
     * const { count } = await prisma.carrier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarrierDeleteManyArgs>(args?: SelectSubset<T, CarrierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carriers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carriers
     * const carrier = await prisma.carrier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarrierUpdateManyArgs>(args: SelectSubset<T, CarrierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carriers and returns the data updated in the database.
     * @param {CarrierUpdateManyAndReturnArgs} args - Arguments to update many Carriers.
     * @example
     * // Update many Carriers
     * const carrier = await prisma.carrier.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Carriers and only return the `updatedAt`
     * const carrierWithUpdatedAtOnly = await prisma.carrier.updateManyAndReturn({
     *   select: { updatedAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CarrierUpdateManyAndReturnArgs>(args: SelectSubset<T, CarrierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Carrier.
     * @param {CarrierUpsertArgs} args - Arguments to update or create a Carrier.
     * @example
     * // Update or create a Carrier
     * const carrier = await prisma.carrier.upsert({
     *   create: {
     *     // ... data to create a Carrier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrier we want to update
     *   }
     * })
     */
    upsert<T extends CarrierUpsertArgs>(args: SelectSubset<T, CarrierUpsertArgs<ExtArgs>>): Prisma__CarrierClient<$Result.GetResult<Prisma.$CarrierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Carriers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierCountArgs} args - Arguments to filter Carriers to count.
     * @example
     * // Count the number of Carriers
     * const count = await prisma.carrier.count({
     *   where: {
     *     // ... the filter for the Carriers we want to count
     *   }
     * })
    **/
    count<T extends CarrierCountArgs>(
      args?: Subset<T, CarrierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrierAggregateArgs>(args: Subset<T, CarrierAggregateArgs>): Prisma.PrismaPromise<GetCarrierAggregateType<T>>

    /**
     * Group by Carrier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrierGroupByArgs['orderBy'] }
        : { orderBy?: CarrierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carrier model
   */
  readonly fields: CarrierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarrierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Carrier model
   */
  interface CarrierFieldRefs {
    readonly updatedAt: FieldRef<"Carrier", 'DateTime'>
    readonly lastContactDate: FieldRef<"Carrier", 'DateTime'>
    readonly serviceAreas: FieldRef<"Carrier", 'String[]'>
    readonly creditRating: FieldRef<"Carrier", 'String'>
    readonly createdBy: FieldRef<"Carrier", 'String'>
    readonly loadsCompleted: FieldRef<"Carrier", 'Int'>
    readonly insuranceExpiry: FieldRef<"Carrier", 'DateTime'>
    readonly contactPhone: FieldRef<"Carrier", 'String'>
    readonly preferenceTier: FieldRef<"Carrier", 'Int'>
    readonly createdAt: FieldRef<"Carrier", 'DateTime'>
    readonly contactEmail: FieldRef<"Carrier", 'String'>
    readonly notes: FieldRef<"Carrier", 'String'>
    readonly averageRatePerMile: FieldRef<"Carrier", 'Decimal'>
    readonly modifiedBy: FieldRef<"Carrier", 'String'>
    readonly loadsAccepted: FieldRef<"Carrier", 'Int'>
    readonly smsEnabled: FieldRef<"Carrier", 'Boolean'>
    readonly contactName: FieldRef<"Carrier", 'String'>
    readonly dotNumber: FieldRef<"Carrier", 'String'>
    readonly id: FieldRef<"Carrier", 'String'>
    readonly carrierName: FieldRef<"Carrier", 'String'>
    readonly isPreferred: FieldRef<"Carrier", 'Boolean'>
    readonly equipmentTypes: FieldRef<"Carrier", 'String[]'>
    readonly status: FieldRef<"Carrier", 'String'>
    readonly mcNumber: FieldRef<"Carrier", 'String'>
    readonly phoneNumber: FieldRef<"Carrier", 'String'>
    readonly emailEnabled: FieldRef<"Carrier", 'Boolean'>
    readonly loadsOffered: FieldRef<"Carrier", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Carrier findUnique
   */
  export type CarrierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter, which Carrier to fetch.
     */
    where: CarrierWhereUniqueInput
  }

  /**
   * Carrier findUniqueOrThrow
   */
  export type CarrierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter, which Carrier to fetch.
     */
    where: CarrierWhereUniqueInput
  }

  /**
   * Carrier findFirst
   */
  export type CarrierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter, which Carrier to fetch.
     */
    where?: CarrierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carriers to fetch.
     */
    orderBy?: CarrierOrderByWithRelationInput | CarrierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carriers.
     */
    cursor?: CarrierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carriers.
     */
    distinct?: CarrierScalarFieldEnum | CarrierScalarFieldEnum[]
  }

  /**
   * Carrier findFirstOrThrow
   */
  export type CarrierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter, which Carrier to fetch.
     */
    where?: CarrierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carriers to fetch.
     */
    orderBy?: CarrierOrderByWithRelationInput | CarrierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carriers.
     */
    cursor?: CarrierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carriers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carriers.
     */
    distinct?: CarrierScalarFieldEnum | CarrierScalarFieldEnum[]
  }

  /**
   * Carrier findMany
   */
  export type CarrierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter, which Carriers to fetch.
     */
    where?: CarrierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carriers to fetch.
     */
    orderBy?: CarrierOrderByWithRelationInput | CarrierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carriers.
     */
    cursor?: CarrierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carriers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carriers.
     */
    skip?: number
    distinct?: CarrierScalarFieldEnum | CarrierScalarFieldEnum[]
  }

  /**
   * Carrier create
   */
  export type CarrierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * The data needed to create a Carrier.
     */
    data: XOR<CarrierCreateInput, CarrierUncheckedCreateInput>
  }

  /**
   * Carrier createMany
   */
  export type CarrierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carriers.
     */
    data: CarrierCreateManyInput | CarrierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carrier createManyAndReturn
   */
  export type CarrierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * The data used to create many Carriers.
     */
    data: CarrierCreateManyInput | CarrierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carrier update
   */
  export type CarrierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * The data needed to update a Carrier.
     */
    data: XOR<CarrierUpdateInput, CarrierUncheckedUpdateInput>
    /**
     * Choose, which Carrier to update.
     */
    where: CarrierWhereUniqueInput
  }

  /**
   * Carrier updateMany
   */
  export type CarrierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carriers.
     */
    data: XOR<CarrierUpdateManyMutationInput, CarrierUncheckedUpdateManyInput>
    /**
     * Filter which Carriers to update
     */
    where?: CarrierWhereInput
    /**
     * Limit how many Carriers to update.
     */
    limit?: number
  }

  /**
   * Carrier updateManyAndReturn
   */
  export type CarrierUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * The data used to update Carriers.
     */
    data: XOR<CarrierUpdateManyMutationInput, CarrierUncheckedUpdateManyInput>
    /**
     * Filter which Carriers to update
     */
    where?: CarrierWhereInput
    /**
     * Limit how many Carriers to update.
     */
    limit?: number
  }

  /**
   * Carrier upsert
   */
  export type CarrierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * The filter to search for the Carrier to update in case it exists.
     */
    where: CarrierWhereUniqueInput
    /**
     * In case the Carrier found by the `where` argument doesn't exist, create a new Carrier with this data.
     */
    create: XOR<CarrierCreateInput, CarrierUncheckedCreateInput>
    /**
     * In case the Carrier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarrierUpdateInput, CarrierUncheckedUpdateInput>
  }

  /**
   * Carrier delete
   */
  export type CarrierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
    /**
     * Filter which Carrier to delete.
     */
    where: CarrierWhereUniqueInput
  }

  /**
   * Carrier deleteMany
   */
  export type CarrierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carriers to delete
     */
    where?: CarrierWhereInput
    /**
     * Limit how many Carriers to delete.
     */
    limit?: number
  }

  /**
   * Carrier without action
   */
  export type CarrierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrier
     */
    select?: CarrierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrier
     */
    omit?: CarrierOmit<ExtArgs> | null
  }


  /**
   * Model Quote
   */

  export type AggregateQuote = {
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  export type QuoteAvgAggregateOutputType = {
    ratePerMile: Decimal | null
    rate: Decimal | null
  }

  export type QuoteSumAggregateOutputType = {
    ratePerMile: Decimal | null
    rate: Decimal | null
  }

  export type QuoteMinAggregateOutputType = {
    responseMethod: string | null
    sentAt: Date | null
    ratePerMile: Decimal | null
    updatedAt: Date | null
    rate: Decimal | null
    status: string | null
    id: string | null
    respondedAt: Date | null
    carrierMc: string | null
    createdAt: Date | null
    loadId: string | null
    carrierId: string | null
    carrierName: string | null
    validUntil: Date | null
    carrierEmail: string | null
    notes: string | null
    carrierPhone: string | null
  }

  export type QuoteMaxAggregateOutputType = {
    responseMethod: string | null
    sentAt: Date | null
    ratePerMile: Decimal | null
    updatedAt: Date | null
    rate: Decimal | null
    status: string | null
    id: string | null
    respondedAt: Date | null
    carrierMc: string | null
    createdAt: Date | null
    loadId: string | null
    carrierId: string | null
    carrierName: string | null
    validUntil: Date | null
    carrierEmail: string | null
    notes: string | null
    carrierPhone: string | null
  }

  export type QuoteCountAggregateOutputType = {
    responseMethod: number
    sentAt: number
    ratePerMile: number
    updatedAt: number
    rate: number
    status: number
    id: number
    respondedAt: number
    carrierMc: number
    createdAt: number
    loadId: number
    carrierId: number
    carrierName: number
    validUntil: number
    carrierEmail: number
    notes: number
    carrierPhone: number
    _all: number
  }


  export type QuoteAvgAggregateInputType = {
    ratePerMile?: true
    rate?: true
  }

  export type QuoteSumAggregateInputType = {
    ratePerMile?: true
    rate?: true
  }

  export type QuoteMinAggregateInputType = {
    responseMethod?: true
    sentAt?: true
    ratePerMile?: true
    updatedAt?: true
    rate?: true
    status?: true
    id?: true
    respondedAt?: true
    carrierMc?: true
    createdAt?: true
    loadId?: true
    carrierId?: true
    carrierName?: true
    validUntil?: true
    carrierEmail?: true
    notes?: true
    carrierPhone?: true
  }

  export type QuoteMaxAggregateInputType = {
    responseMethod?: true
    sentAt?: true
    ratePerMile?: true
    updatedAt?: true
    rate?: true
    status?: true
    id?: true
    respondedAt?: true
    carrierMc?: true
    createdAt?: true
    loadId?: true
    carrierId?: true
    carrierName?: true
    validUntil?: true
    carrierEmail?: true
    notes?: true
    carrierPhone?: true
  }

  export type QuoteCountAggregateInputType = {
    responseMethod?: true
    sentAt?: true
    ratePerMile?: true
    updatedAt?: true
    rate?: true
    status?: true
    id?: true
    respondedAt?: true
    carrierMc?: true
    createdAt?: true
    loadId?: true
    carrierId?: true
    carrierName?: true
    validUntil?: true
    carrierEmail?: true
    notes?: true
    carrierPhone?: true
    _all?: true
  }

  export type QuoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quote to aggregate.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quotes
    **/
    _count?: true | QuoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuoteMaxAggregateInputType
  }

  export type GetQuoteAggregateType<T extends QuoteAggregateArgs> = {
        [P in keyof T & keyof AggregateQuote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuote[P]>
      : GetScalarType<T[P], AggregateQuote[P]>
  }




  export type QuoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithAggregationInput | QuoteOrderByWithAggregationInput[]
    by: QuoteScalarFieldEnum[] | QuoteScalarFieldEnum
    having?: QuoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuoteCountAggregateInputType | true
    _avg?: QuoteAvgAggregateInputType
    _sum?: QuoteSumAggregateInputType
    _min?: QuoteMinAggregateInputType
    _max?: QuoteMaxAggregateInputType
  }

  export type QuoteGroupByOutputType = {
    responseMethod: string | null
    sentAt: Date
    ratePerMile: Decimal | null
    updatedAt: Date
    rate: Decimal | null
    status: string
    id: string
    respondedAt: Date | null
    carrierMc: string | null
    createdAt: Date
    loadId: string | null
    carrierId: string | null
    carrierName: string | null
    validUntil: Date | null
    carrierEmail: string | null
    notes: string | null
    carrierPhone: string | null
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  type GetQuoteGroupByPayload<T extends QuoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuoteGroupByOutputType[P]>
            : GetScalarType<T[P], QuoteGroupByOutputType[P]>
        }
      >
    >


  export type QuoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    responseMethod?: boolean
    sentAt?: boolean
    ratePerMile?: boolean
    updatedAt?: boolean
    rate?: boolean
    status?: boolean
    id?: boolean
    respondedAt?: boolean
    carrierMc?: boolean
    createdAt?: boolean
    loadId?: boolean
    carrierId?: boolean
    carrierName?: boolean
    validUntil?: boolean
    carrierEmail?: boolean
    notes?: boolean
    carrierPhone?: boolean
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    responseMethod?: boolean
    sentAt?: boolean
    ratePerMile?: boolean
    updatedAt?: boolean
    rate?: boolean
    status?: boolean
    id?: boolean
    respondedAt?: boolean
    carrierMc?: boolean
    createdAt?: boolean
    loadId?: boolean
    carrierId?: boolean
    carrierName?: boolean
    validUntil?: boolean
    carrierEmail?: boolean
    notes?: boolean
    carrierPhone?: boolean
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    responseMethod?: boolean
    sentAt?: boolean
    ratePerMile?: boolean
    updatedAt?: boolean
    rate?: boolean
    status?: boolean
    id?: boolean
    respondedAt?: boolean
    carrierMc?: boolean
    createdAt?: boolean
    loadId?: boolean
    carrierId?: boolean
    carrierName?: boolean
    validUntil?: boolean
    carrierEmail?: boolean
    notes?: boolean
    carrierPhone?: boolean
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectScalar = {
    responseMethod?: boolean
    sentAt?: boolean
    ratePerMile?: boolean
    updatedAt?: boolean
    rate?: boolean
    status?: boolean
    id?: boolean
    respondedAt?: boolean
    carrierMc?: boolean
    createdAt?: boolean
    loadId?: boolean
    carrierId?: boolean
    carrierName?: boolean
    validUntil?: boolean
    carrierEmail?: boolean
    notes?: boolean
    carrierPhone?: boolean
  }

  export type QuoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"responseMethod" | "sentAt" | "ratePerMile" | "updatedAt" | "rate" | "status" | "id" | "respondedAt" | "carrierMc" | "createdAt" | "loadId" | "carrierId" | "carrierName" | "validUntil" | "carrierEmail" | "notes" | "carrierPhone", ExtArgs["result"]["quote"]>

  export type $QuotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quote"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      responseMethod: string | null
      sentAt: Date
      ratePerMile: Prisma.Decimal | null
      updatedAt: Date
      rate: Prisma.Decimal | null
      status: string
      id: string
      respondedAt: Date | null
      carrierMc: string | null
      createdAt: Date
      loadId: string | null
      carrierId: string | null
      carrierName: string | null
      validUntil: Date | null
      carrierEmail: string | null
      notes: string | null
      carrierPhone: string | null
    }, ExtArgs["result"]["quote"]>
    composites: {}
  }

  type QuoteGetPayload<S extends boolean | null | undefined | QuoteDefaultArgs> = $Result.GetResult<Prisma.$QuotePayload, S>

  type QuoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuoteCountAggregateInputType | true
    }

  export interface QuoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quote'], meta: { name: 'Quote' } }
    /**
     * Find zero or one Quote that matches the filter.
     * @param {QuoteFindUniqueArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuoteFindUniqueArgs>(args: SelectSubset<T, QuoteFindUniqueArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuoteFindUniqueOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuoteFindUniqueOrThrowArgs>(args: SelectSubset<T, QuoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuoteFindFirstArgs>(args?: SelectSubset<T, QuoteFindFirstArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuoteFindFirstOrThrowArgs>(args?: SelectSubset<T, QuoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quotes
     * const quotes = await prisma.quote.findMany()
     * 
     * // Get first 10 Quotes
     * const quotes = await prisma.quote.findMany({ take: 10 })
     * 
     * // Only select the `responseMethod`
     * const quoteWithResponseMethodOnly = await prisma.quote.findMany({ select: { responseMethod: true } })
     * 
     */
    findMany<T extends QuoteFindManyArgs>(args?: SelectSubset<T, QuoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quote.
     * @param {QuoteCreateArgs} args - Arguments to create a Quote.
     * @example
     * // Create one Quote
     * const Quote = await prisma.quote.create({
     *   data: {
     *     // ... data to create a Quote
     *   }
     * })
     * 
     */
    create<T extends QuoteCreateArgs>(args: SelectSubset<T, QuoteCreateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quotes.
     * @param {QuoteCreateManyArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuoteCreateManyArgs>(args?: SelectSubset<T, QuoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quotes and returns the data saved in the database.
     * @param {QuoteCreateManyAndReturnArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quotes and only return the `responseMethod`
     * const quoteWithResponseMethodOnly = await prisma.quote.createManyAndReturn({
     *   select: { responseMethod: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuoteCreateManyAndReturnArgs>(args?: SelectSubset<T, QuoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quote.
     * @param {QuoteDeleteArgs} args - Arguments to delete one Quote.
     * @example
     * // Delete one Quote
     * const Quote = await prisma.quote.delete({
     *   where: {
     *     // ... filter to delete one Quote
     *   }
     * })
     * 
     */
    delete<T extends QuoteDeleteArgs>(args: SelectSubset<T, QuoteDeleteArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quote.
     * @param {QuoteUpdateArgs} args - Arguments to update one Quote.
     * @example
     * // Update one Quote
     * const quote = await prisma.quote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuoteUpdateArgs>(args: SelectSubset<T, QuoteUpdateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quotes.
     * @param {QuoteDeleteManyArgs} args - Arguments to filter Quotes to delete.
     * @example
     * // Delete a few Quotes
     * const { count } = await prisma.quote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuoteDeleteManyArgs>(args?: SelectSubset<T, QuoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuoteUpdateManyArgs>(args: SelectSubset<T, QuoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes and returns the data updated in the database.
     * @param {QuoteUpdateManyAndReturnArgs} args - Arguments to update many Quotes.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quotes and only return the `responseMethod`
     * const quoteWithResponseMethodOnly = await prisma.quote.updateManyAndReturn({
     *   select: { responseMethod: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuoteUpdateManyAndReturnArgs>(args: SelectSubset<T, QuoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quote.
     * @param {QuoteUpsertArgs} args - Arguments to update or create a Quote.
     * @example
     * // Update or create a Quote
     * const quote = await prisma.quote.upsert({
     *   create: {
     *     // ... data to create a Quote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quote we want to update
     *   }
     * })
     */
    upsert<T extends QuoteUpsertArgs>(args: SelectSubset<T, QuoteUpsertArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteCountArgs} args - Arguments to filter Quotes to count.
     * @example
     * // Count the number of Quotes
     * const count = await prisma.quote.count({
     *   where: {
     *     // ... the filter for the Quotes we want to count
     *   }
     * })
    **/
    count<T extends QuoteCountArgs>(
      args?: Subset<T, QuoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuoteAggregateArgs>(args: Subset<T, QuoteAggregateArgs>): Prisma.PrismaPromise<GetQuoteAggregateType<T>>

    /**
     * Group by Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuoteGroupByArgs['orderBy'] }
        : { orderBy?: QuoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quote model
   */
  readonly fields: QuoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quote model
   */
  interface QuoteFieldRefs {
    readonly responseMethod: FieldRef<"Quote", 'String'>
    readonly sentAt: FieldRef<"Quote", 'DateTime'>
    readonly ratePerMile: FieldRef<"Quote", 'Decimal'>
    readonly updatedAt: FieldRef<"Quote", 'DateTime'>
    readonly rate: FieldRef<"Quote", 'Decimal'>
    readonly status: FieldRef<"Quote", 'String'>
    readonly id: FieldRef<"Quote", 'String'>
    readonly respondedAt: FieldRef<"Quote", 'DateTime'>
    readonly carrierMc: FieldRef<"Quote", 'String'>
    readonly createdAt: FieldRef<"Quote", 'DateTime'>
    readonly loadId: FieldRef<"Quote", 'String'>
    readonly carrierId: FieldRef<"Quote", 'String'>
    readonly carrierName: FieldRef<"Quote", 'String'>
    readonly validUntil: FieldRef<"Quote", 'DateTime'>
    readonly carrierEmail: FieldRef<"Quote", 'String'>
    readonly notes: FieldRef<"Quote", 'String'>
    readonly carrierPhone: FieldRef<"Quote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Quote findUnique
   */
  export type QuoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findUniqueOrThrow
   */
  export type QuoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findFirst
   */
  export type QuoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findFirstOrThrow
   */
  export type QuoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findMany
   */
  export type QuoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter, which Quotes to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote create
   */
  export type QuoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data needed to create a Quote.
     */
    data?: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
  }

  /**
   * Quote createMany
   */
  export type QuoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quote createManyAndReturn
   */
  export type QuoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quote update
   */
  export type QuoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data needed to update a Quote.
     */
    data: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
    /**
     * Choose, which Quote to update.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote updateMany
   */
  export type QuoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
  }

  /**
   * Quote updateManyAndReturn
   */
  export type QuoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
  }

  /**
   * Quote upsert
   */
  export type QuoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The filter to search for the Quote to update in case it exists.
     */
    where: QuoteWhereUniqueInput
    /**
     * In case the Quote found by the `where` argument doesn't exist, create a new Quote with this data.
     */
    create: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
    /**
     * In case the Quote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
  }

  /**
   * Quote delete
   */
  export type QuoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Filter which Quote to delete.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote deleteMany
   */
  export type QuoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotes to delete
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to delete.
     */
    limit?: number
  }

  /**
   * Quote without action
   */
  export type QuoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    createdAt: Date | null
    role: string | null
    loadId: string | null
    content: string | null
    id: string | null
    brokerId: string | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    createdAt: Date | null
    role: string | null
    loadId: string | null
    content: string | null
    id: string | null
    brokerId: string | null
  }

  export type ChatMessageCountAggregateOutputType = {
    createdAt: number
    role: number
    loadId: number
    content: number
    id: number
    brokerId: number
    metadata: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    createdAt?: true
    role?: true
    loadId?: true
    content?: true
    id?: true
    brokerId?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    createdAt?: true
    role?: true
    loadId?: true
    content?: true
    id?: true
    brokerId?: true
  }

  export type ChatMessageCountAggregateInputType = {
    createdAt?: true
    role?: true
    loadId?: true
    content?: true
    id?: true
    brokerId?: true
    metadata?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    createdAt: Date
    role: string
    loadId: string
    content: string
    id: string
    brokerId: string
    metadata: JsonValue | null
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    role?: boolean
    loadId?: boolean
    content?: boolean
    id?: boolean
    brokerId?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    role?: boolean
    loadId?: boolean
    content?: boolean
    id?: boolean
    brokerId?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    role?: boolean
    loadId?: boolean
    content?: boolean
    id?: boolean
    brokerId?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    createdAt?: boolean
    role?: boolean
    loadId?: boolean
    content?: boolean
    id?: boolean
    brokerId?: boolean
    metadata?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"createdAt" | "role" | "loadId" | "content" | "id" | "brokerId" | "metadata", ExtArgs["result"]["chatMessage"]>

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      role: string
      loadId: string
      content: string
      id: string
      brokerId: string
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const chatMessageWithCreatedAtOnly = await prisma.chatMessage.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `createdAt`
     * const chatMessageWithCreatedAtOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { createdAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `createdAt`
     * const chatMessageWithCreatedAtOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { createdAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly role: FieldRef<"ChatMessage", 'String'>
    readonly loadId: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly brokerId: FieldRef<"ChatMessage", 'String'>
    readonly metadata: FieldRef<"ChatMessage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
  }


  /**
   * Model Communication
   */

  export type AggregateCommunication = {
    _count: CommunicationCountAggregateOutputType | null
    _avg: CommunicationAvgAggregateOutputType | null
    _sum: CommunicationSumAggregateOutputType | null
    _min: CommunicationMinAggregateOutputType | null
    _max: CommunicationMaxAggregateOutputType | null
  }

  export type CommunicationAvgAggregateOutputType = {
    aiConfidence: Decimal | null
  }

  export type CommunicationSumAggregateOutputType = {
    aiConfidence: Decimal | null
  }

  export type CommunicationMinAggregateOutputType = {
    threadId: string | null
    aiGenerated: boolean | null
    id: string | null
    loadId: string | null
    updatedAt: Date | null
    brokerId: string | null
    createdAt: Date | null
    status: string | null
    oauthProvider: string | null
    parentMessageId: string | null
    inReplyTo: string | null
    channel: string | null
    direction: string | null
    messageId: string | null
    fromAddress: string | null
    toAddress: string | null
    aiConfidence: Decimal | null
    subject: string | null
    content: string | null
  }

  export type CommunicationMaxAggregateOutputType = {
    threadId: string | null
    aiGenerated: boolean | null
    id: string | null
    loadId: string | null
    updatedAt: Date | null
    brokerId: string | null
    createdAt: Date | null
    status: string | null
    oauthProvider: string | null
    parentMessageId: string | null
    inReplyTo: string | null
    channel: string | null
    direction: string | null
    messageId: string | null
    fromAddress: string | null
    toAddress: string | null
    aiConfidence: Decimal | null
    subject: string | null
    content: string | null
  }

  export type CommunicationCountAggregateOutputType = {
    threadId: number
    aiGenerated: number
    id: number
    loadId: number
    updatedAt: number
    brokerId: number
    createdAt: number
    status: number
    oauthProvider: number
    parentMessageId: number
    inReplyTo: number
    channel: number
    direction: number
    messageId: number
    extractedData: number
    fromAddress: number
    toAddress: number
    ccAddresses: number
    aiConfidence: number
    subject: number
    content: number
    attachments: number
    _all: number
  }


  export type CommunicationAvgAggregateInputType = {
    aiConfidence?: true
  }

  export type CommunicationSumAggregateInputType = {
    aiConfidence?: true
  }

  export type CommunicationMinAggregateInputType = {
    threadId?: true
    aiGenerated?: true
    id?: true
    loadId?: true
    updatedAt?: true
    brokerId?: true
    createdAt?: true
    status?: true
    oauthProvider?: true
    parentMessageId?: true
    inReplyTo?: true
    channel?: true
    direction?: true
    messageId?: true
    fromAddress?: true
    toAddress?: true
    aiConfidence?: true
    subject?: true
    content?: true
  }

  export type CommunicationMaxAggregateInputType = {
    threadId?: true
    aiGenerated?: true
    id?: true
    loadId?: true
    updatedAt?: true
    brokerId?: true
    createdAt?: true
    status?: true
    oauthProvider?: true
    parentMessageId?: true
    inReplyTo?: true
    channel?: true
    direction?: true
    messageId?: true
    fromAddress?: true
    toAddress?: true
    aiConfidence?: true
    subject?: true
    content?: true
  }

  export type CommunicationCountAggregateInputType = {
    threadId?: true
    aiGenerated?: true
    id?: true
    loadId?: true
    updatedAt?: true
    brokerId?: true
    createdAt?: true
    status?: true
    oauthProvider?: true
    parentMessageId?: true
    inReplyTo?: true
    channel?: true
    direction?: true
    messageId?: true
    extractedData?: true
    fromAddress?: true
    toAddress?: true
    ccAddresses?: true
    aiConfidence?: true
    subject?: true
    content?: true
    attachments?: true
    _all?: true
  }

  export type CommunicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communication to aggregate.
     */
    where?: CommunicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communications to fetch.
     */
    orderBy?: CommunicationOrderByWithRelationInput | CommunicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communications
    **/
    _count?: true | CommunicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunicationMaxAggregateInputType
  }

  export type GetCommunicationAggregateType<T extends CommunicationAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunication[P]>
      : GetScalarType<T[P], AggregateCommunication[P]>
  }




  export type CommunicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunicationWhereInput
    orderBy?: CommunicationOrderByWithAggregationInput | CommunicationOrderByWithAggregationInput[]
    by: CommunicationScalarFieldEnum[] | CommunicationScalarFieldEnum
    having?: CommunicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunicationCountAggregateInputType | true
    _avg?: CommunicationAvgAggregateInputType
    _sum?: CommunicationSumAggregateInputType
    _min?: CommunicationMinAggregateInputType
    _max?: CommunicationMaxAggregateInputType
  }

  export type CommunicationGroupByOutputType = {
    threadId: string | null
    aiGenerated: boolean
    id: string
    loadId: string | null
    updatedAt: Date
    brokerId: string | null
    createdAt: Date
    status: string
    oauthProvider: string | null
    parentMessageId: string | null
    inReplyTo: string | null
    channel: string | null
    direction: string | null
    messageId: string | null
    extractedData: JsonValue | null
    fromAddress: string | null
    toAddress: string | null
    ccAddresses: string[]
    aiConfidence: Decimal | null
    subject: string | null
    content: string | null
    attachments: JsonValue
    _count: CommunicationCountAggregateOutputType | null
    _avg: CommunicationAvgAggregateOutputType | null
    _sum: CommunicationSumAggregateOutputType | null
    _min: CommunicationMinAggregateOutputType | null
    _max: CommunicationMaxAggregateOutputType | null
  }

  type GetCommunicationGroupByPayload<T extends CommunicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunicationGroupByOutputType[P]>
            : GetScalarType<T[P], CommunicationGroupByOutputType[P]>
        }
      >
    >


  export type CommunicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    threadId?: boolean
    aiGenerated?: boolean
    id?: boolean
    loadId?: boolean
    updatedAt?: boolean
    brokerId?: boolean
    createdAt?: boolean
    status?: boolean
    oauthProvider?: boolean
    parentMessageId?: boolean
    inReplyTo?: boolean
    channel?: boolean
    direction?: boolean
    messageId?: boolean
    extractedData?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    ccAddresses?: boolean
    aiConfidence?: boolean
    subject?: boolean
    content?: boolean
    attachments?: boolean
  }, ExtArgs["result"]["communication"]>

  export type CommunicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    threadId?: boolean
    aiGenerated?: boolean
    id?: boolean
    loadId?: boolean
    updatedAt?: boolean
    brokerId?: boolean
    createdAt?: boolean
    status?: boolean
    oauthProvider?: boolean
    parentMessageId?: boolean
    inReplyTo?: boolean
    channel?: boolean
    direction?: boolean
    messageId?: boolean
    extractedData?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    ccAddresses?: boolean
    aiConfidence?: boolean
    subject?: boolean
    content?: boolean
    attachments?: boolean
  }, ExtArgs["result"]["communication"]>

  export type CommunicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    threadId?: boolean
    aiGenerated?: boolean
    id?: boolean
    loadId?: boolean
    updatedAt?: boolean
    brokerId?: boolean
    createdAt?: boolean
    status?: boolean
    oauthProvider?: boolean
    parentMessageId?: boolean
    inReplyTo?: boolean
    channel?: boolean
    direction?: boolean
    messageId?: boolean
    extractedData?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    ccAddresses?: boolean
    aiConfidence?: boolean
    subject?: boolean
    content?: boolean
    attachments?: boolean
  }, ExtArgs["result"]["communication"]>

  export type CommunicationSelectScalar = {
    threadId?: boolean
    aiGenerated?: boolean
    id?: boolean
    loadId?: boolean
    updatedAt?: boolean
    brokerId?: boolean
    createdAt?: boolean
    status?: boolean
    oauthProvider?: boolean
    parentMessageId?: boolean
    inReplyTo?: boolean
    channel?: boolean
    direction?: boolean
    messageId?: boolean
    extractedData?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    ccAddresses?: boolean
    aiConfidence?: boolean
    subject?: boolean
    content?: boolean
    attachments?: boolean
  }

  export type CommunicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"threadId" | "aiGenerated" | "id" | "loadId" | "updatedAt" | "brokerId" | "createdAt" | "status" | "oauthProvider" | "parentMessageId" | "inReplyTo" | "channel" | "direction" | "messageId" | "extractedData" | "fromAddress" | "toAddress" | "ccAddresses" | "aiConfidence" | "subject" | "content" | "attachments", ExtArgs["result"]["communication"]>

  export type $CommunicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Communication"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      threadId: string | null
      aiGenerated: boolean
      id: string
      loadId: string | null
      updatedAt: Date
      brokerId: string | null
      createdAt: Date
      status: string
      oauthProvider: string | null
      parentMessageId: string | null
      inReplyTo: string | null
      channel: string | null
      direction: string | null
      messageId: string | null
      extractedData: Prisma.JsonValue | null
      fromAddress: string | null
      toAddress: string | null
      ccAddresses: string[]
      aiConfidence: Prisma.Decimal | null
      subject: string | null
      content: string | null
      attachments: Prisma.JsonValue
    }, ExtArgs["result"]["communication"]>
    composites: {}
  }

  type CommunicationGetPayload<S extends boolean | null | undefined | CommunicationDefaultArgs> = $Result.GetResult<Prisma.$CommunicationPayload, S>

  type CommunicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommunicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommunicationCountAggregateInputType | true
    }

  export interface CommunicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Communication'], meta: { name: 'Communication' } }
    /**
     * Find zero or one Communication that matches the filter.
     * @param {CommunicationFindUniqueArgs} args - Arguments to find a Communication
     * @example
     * // Get one Communication
     * const communication = await prisma.communication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunicationFindUniqueArgs>(args: SelectSubset<T, CommunicationFindUniqueArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Communication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommunicationFindUniqueOrThrowArgs} args - Arguments to find a Communication
     * @example
     * // Get one Communication
     * const communication = await prisma.communication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunicationFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Communication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationFindFirstArgs} args - Arguments to find a Communication
     * @example
     * // Get one Communication
     * const communication = await prisma.communication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunicationFindFirstArgs>(args?: SelectSubset<T, CommunicationFindFirstArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Communication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationFindFirstOrThrowArgs} args - Arguments to find a Communication
     * @example
     * // Get one Communication
     * const communication = await prisma.communication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunicationFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Communications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communications
     * const communications = await prisma.communication.findMany()
     * 
     * // Get first 10 Communications
     * const communications = await prisma.communication.findMany({ take: 10 })
     * 
     * // Only select the `threadId`
     * const communicationWithThreadIdOnly = await prisma.communication.findMany({ select: { threadId: true } })
     * 
     */
    findMany<T extends CommunicationFindManyArgs>(args?: SelectSubset<T, CommunicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Communication.
     * @param {CommunicationCreateArgs} args - Arguments to create a Communication.
     * @example
     * // Create one Communication
     * const Communication = await prisma.communication.create({
     *   data: {
     *     // ... data to create a Communication
     *   }
     * })
     * 
     */
    create<T extends CommunicationCreateArgs>(args: SelectSubset<T, CommunicationCreateArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Communications.
     * @param {CommunicationCreateManyArgs} args - Arguments to create many Communications.
     * @example
     * // Create many Communications
     * const communication = await prisma.communication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunicationCreateManyArgs>(args?: SelectSubset<T, CommunicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Communications and returns the data saved in the database.
     * @param {CommunicationCreateManyAndReturnArgs} args - Arguments to create many Communications.
     * @example
     * // Create many Communications
     * const communication = await prisma.communication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Communications and only return the `threadId`
     * const communicationWithThreadIdOnly = await prisma.communication.createManyAndReturn({
     *   select: { threadId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunicationCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Communication.
     * @param {CommunicationDeleteArgs} args - Arguments to delete one Communication.
     * @example
     * // Delete one Communication
     * const Communication = await prisma.communication.delete({
     *   where: {
     *     // ... filter to delete one Communication
     *   }
     * })
     * 
     */
    delete<T extends CommunicationDeleteArgs>(args: SelectSubset<T, CommunicationDeleteArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Communication.
     * @param {CommunicationUpdateArgs} args - Arguments to update one Communication.
     * @example
     * // Update one Communication
     * const communication = await prisma.communication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunicationUpdateArgs>(args: SelectSubset<T, CommunicationUpdateArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Communications.
     * @param {CommunicationDeleteManyArgs} args - Arguments to filter Communications to delete.
     * @example
     * // Delete a few Communications
     * const { count } = await prisma.communication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunicationDeleteManyArgs>(args?: SelectSubset<T, CommunicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communications
     * const communication = await prisma.communication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunicationUpdateManyArgs>(args: SelectSubset<T, CommunicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communications and returns the data updated in the database.
     * @param {CommunicationUpdateManyAndReturnArgs} args - Arguments to update many Communications.
     * @example
     * // Update many Communications
     * const communication = await prisma.communication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Communications and only return the `threadId`
     * const communicationWithThreadIdOnly = await prisma.communication.updateManyAndReturn({
     *   select: { threadId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommunicationUpdateManyAndReturnArgs>(args: SelectSubset<T, CommunicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Communication.
     * @param {CommunicationUpsertArgs} args - Arguments to update or create a Communication.
     * @example
     * // Update or create a Communication
     * const communication = await prisma.communication.upsert({
     *   create: {
     *     // ... data to create a Communication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Communication we want to update
     *   }
     * })
     */
    upsert<T extends CommunicationUpsertArgs>(args: SelectSubset<T, CommunicationUpsertArgs<ExtArgs>>): Prisma__CommunicationClient<$Result.GetResult<Prisma.$CommunicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Communications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCountArgs} args - Arguments to filter Communications to count.
     * @example
     * // Count the number of Communications
     * const count = await prisma.communication.count({
     *   where: {
     *     // ... the filter for the Communications we want to count
     *   }
     * })
    **/
    count<T extends CommunicationCountArgs>(
      args?: Subset<T, CommunicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Communication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunicationAggregateArgs>(args: Subset<T, CommunicationAggregateArgs>): Prisma.PrismaPromise<GetCommunicationAggregateType<T>>

    /**
     * Group by Communication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunicationGroupByArgs['orderBy'] }
        : { orderBy?: CommunicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Communication model
   */
  readonly fields: CommunicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Communication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Communication model
   */
  interface CommunicationFieldRefs {
    readonly threadId: FieldRef<"Communication", 'String'>
    readonly aiGenerated: FieldRef<"Communication", 'Boolean'>
    readonly id: FieldRef<"Communication", 'String'>
    readonly loadId: FieldRef<"Communication", 'String'>
    readonly updatedAt: FieldRef<"Communication", 'DateTime'>
    readonly brokerId: FieldRef<"Communication", 'String'>
    readonly createdAt: FieldRef<"Communication", 'DateTime'>
    readonly status: FieldRef<"Communication", 'String'>
    readonly oauthProvider: FieldRef<"Communication", 'String'>
    readonly parentMessageId: FieldRef<"Communication", 'String'>
    readonly inReplyTo: FieldRef<"Communication", 'String'>
    readonly channel: FieldRef<"Communication", 'String'>
    readonly direction: FieldRef<"Communication", 'String'>
    readonly messageId: FieldRef<"Communication", 'String'>
    readonly extractedData: FieldRef<"Communication", 'Json'>
    readonly fromAddress: FieldRef<"Communication", 'String'>
    readonly toAddress: FieldRef<"Communication", 'String'>
    readonly ccAddresses: FieldRef<"Communication", 'String[]'>
    readonly aiConfidence: FieldRef<"Communication", 'Decimal'>
    readonly subject: FieldRef<"Communication", 'String'>
    readonly content: FieldRef<"Communication", 'String'>
    readonly attachments: FieldRef<"Communication", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Communication findUnique
   */
  export type CommunicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter, which Communication to fetch.
     */
    where: CommunicationWhereUniqueInput
  }

  /**
   * Communication findUniqueOrThrow
   */
  export type CommunicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter, which Communication to fetch.
     */
    where: CommunicationWhereUniqueInput
  }

  /**
   * Communication findFirst
   */
  export type CommunicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter, which Communication to fetch.
     */
    where?: CommunicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communications to fetch.
     */
    orderBy?: CommunicationOrderByWithRelationInput | CommunicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communications.
     */
    cursor?: CommunicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communications.
     */
    distinct?: CommunicationScalarFieldEnum | CommunicationScalarFieldEnum[]
  }

  /**
   * Communication findFirstOrThrow
   */
  export type CommunicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter, which Communication to fetch.
     */
    where?: CommunicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communications to fetch.
     */
    orderBy?: CommunicationOrderByWithRelationInput | CommunicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communications.
     */
    cursor?: CommunicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communications.
     */
    distinct?: CommunicationScalarFieldEnum | CommunicationScalarFieldEnum[]
  }

  /**
   * Communication findMany
   */
  export type CommunicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter, which Communications to fetch.
     */
    where?: CommunicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communications to fetch.
     */
    orderBy?: CommunicationOrderByWithRelationInput | CommunicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communications.
     */
    cursor?: CommunicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communications.
     */
    skip?: number
    distinct?: CommunicationScalarFieldEnum | CommunicationScalarFieldEnum[]
  }

  /**
   * Communication create
   */
  export type CommunicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * The data needed to create a Communication.
     */
    data?: XOR<CommunicationCreateInput, CommunicationUncheckedCreateInput>
  }

  /**
   * Communication createMany
   */
  export type CommunicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communications.
     */
    data: CommunicationCreateManyInput | CommunicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Communication createManyAndReturn
   */
  export type CommunicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * The data used to create many Communications.
     */
    data: CommunicationCreateManyInput | CommunicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Communication update
   */
  export type CommunicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * The data needed to update a Communication.
     */
    data: XOR<CommunicationUpdateInput, CommunicationUncheckedUpdateInput>
    /**
     * Choose, which Communication to update.
     */
    where: CommunicationWhereUniqueInput
  }

  /**
   * Communication updateMany
   */
  export type CommunicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communications.
     */
    data: XOR<CommunicationUpdateManyMutationInput, CommunicationUncheckedUpdateManyInput>
    /**
     * Filter which Communications to update
     */
    where?: CommunicationWhereInput
    /**
     * Limit how many Communications to update.
     */
    limit?: number
  }

  /**
   * Communication updateManyAndReturn
   */
  export type CommunicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * The data used to update Communications.
     */
    data: XOR<CommunicationUpdateManyMutationInput, CommunicationUncheckedUpdateManyInput>
    /**
     * Filter which Communications to update
     */
    where?: CommunicationWhereInput
    /**
     * Limit how many Communications to update.
     */
    limit?: number
  }

  /**
   * Communication upsert
   */
  export type CommunicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * The filter to search for the Communication to update in case it exists.
     */
    where: CommunicationWhereUniqueInput
    /**
     * In case the Communication found by the `where` argument doesn't exist, create a new Communication with this data.
     */
    create: XOR<CommunicationCreateInput, CommunicationUncheckedCreateInput>
    /**
     * In case the Communication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunicationUpdateInput, CommunicationUncheckedUpdateInput>
  }

  /**
   * Communication delete
   */
  export type CommunicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
    /**
     * Filter which Communication to delete.
     */
    where: CommunicationWhereUniqueInput
  }

  /**
   * Communication deleteMany
   */
  export type CommunicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communications to delete
     */
    where?: CommunicationWhereInput
    /**
     * Limit how many Communications to delete.
     */
    limit?: number
  }

  /**
   * Communication without action
   */
  export type CommunicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Communication
     */
    select?: CommunicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Communication
     */
    omit?: CommunicationOmit<ExtArgs> | null
  }


  /**
   * Model EmailAccount
   */

  export type AggregateEmailAccount = {
    _count: EmailAccountCountAggregateOutputType | null
    _avg: EmailAccountAvgAggregateOutputType | null
    _sum: EmailAccountSumAggregateOutputType | null
    _min: EmailAccountMinAggregateOutputType | null
    _max: EmailAccountMaxAggregateOutputType | null
  }

  export type EmailAccountAvgAggregateOutputType = {
    imapPort: number | null
    errorCount: number | null
  }

  export type EmailAccountSumAggregateOutputType = {
    imapPort: number | null
    errorCount: number | null
  }

  export type EmailAccountMinAggregateOutputType = {
    imapPassword: string | null
    oauthScope: string | null
    imapUseTls: boolean | null
    imapPort: number | null
    tokenExpiresAt: Date | null
    webhookSubscriptionId: string | null
    updatedAt: Date | null
    emailAddress: string | null
    lastSyncAt: Date | null
    webhookSecret: string | null
    lastError: string | null
    webhookExpiresAt: Date | null
    imapHost: string | null
    createdAt: Date | null
    errorCount: number | null
    tenantId: string | null
    brokerId: string | null
    processingEnabled: boolean | null
    autoReplyEnabled: boolean | null
    accessToken: string | null
    id: string | null
    createdBy: string | null
    refreshToken: string | null
    clientId: string | null
    displayName: string | null
    imapUsername: string | null
    provider: string | null
    status: string | null
  }

  export type EmailAccountMaxAggregateOutputType = {
    imapPassword: string | null
    oauthScope: string | null
    imapUseTls: boolean | null
    imapPort: number | null
    tokenExpiresAt: Date | null
    webhookSubscriptionId: string | null
    updatedAt: Date | null
    emailAddress: string | null
    lastSyncAt: Date | null
    webhookSecret: string | null
    lastError: string | null
    webhookExpiresAt: Date | null
    imapHost: string | null
    createdAt: Date | null
    errorCount: number | null
    tenantId: string | null
    brokerId: string | null
    processingEnabled: boolean | null
    autoReplyEnabled: boolean | null
    accessToken: string | null
    id: string | null
    createdBy: string | null
    refreshToken: string | null
    clientId: string | null
    displayName: string | null
    imapUsername: string | null
    provider: string | null
    status: string | null
  }

  export type EmailAccountCountAggregateOutputType = {
    imapPassword: number
    oauthScope: number
    imapUseTls: number
    imapPort: number
    tokenExpiresAt: number
    webhookSubscriptionId: number
    updatedAt: number
    emailAddress: number
    lastSyncAt: number
    webhookSecret: number
    lastError: number
    webhookExpiresAt: number
    imapHost: number
    createdAt: number
    errorCount: number
    tenantId: number
    monitorFolders: number
    brokerId: number
    processingEnabled: number
    autoReplyEnabled: number
    accessToken: number
    senderWhitelist: number
    id: number
    createdBy: number
    refreshToken: number
    senderBlacklist: number
    clientId: number
    subjectFilters: number
    displayName: number
    imapUsername: number
    provider: number
    status: number
    _all: number
  }


  export type EmailAccountAvgAggregateInputType = {
    imapPort?: true
    errorCount?: true
  }

  export type EmailAccountSumAggregateInputType = {
    imapPort?: true
    errorCount?: true
  }

  export type EmailAccountMinAggregateInputType = {
    imapPassword?: true
    oauthScope?: true
    imapUseTls?: true
    imapPort?: true
    tokenExpiresAt?: true
    webhookSubscriptionId?: true
    updatedAt?: true
    emailAddress?: true
    lastSyncAt?: true
    webhookSecret?: true
    lastError?: true
    webhookExpiresAt?: true
    imapHost?: true
    createdAt?: true
    errorCount?: true
    tenantId?: true
    brokerId?: true
    processingEnabled?: true
    autoReplyEnabled?: true
    accessToken?: true
    id?: true
    createdBy?: true
    refreshToken?: true
    clientId?: true
    displayName?: true
    imapUsername?: true
    provider?: true
    status?: true
  }

  export type EmailAccountMaxAggregateInputType = {
    imapPassword?: true
    oauthScope?: true
    imapUseTls?: true
    imapPort?: true
    tokenExpiresAt?: true
    webhookSubscriptionId?: true
    updatedAt?: true
    emailAddress?: true
    lastSyncAt?: true
    webhookSecret?: true
    lastError?: true
    webhookExpiresAt?: true
    imapHost?: true
    createdAt?: true
    errorCount?: true
    tenantId?: true
    brokerId?: true
    processingEnabled?: true
    autoReplyEnabled?: true
    accessToken?: true
    id?: true
    createdBy?: true
    refreshToken?: true
    clientId?: true
    displayName?: true
    imapUsername?: true
    provider?: true
    status?: true
  }

  export type EmailAccountCountAggregateInputType = {
    imapPassword?: true
    oauthScope?: true
    imapUseTls?: true
    imapPort?: true
    tokenExpiresAt?: true
    webhookSubscriptionId?: true
    updatedAt?: true
    emailAddress?: true
    lastSyncAt?: true
    webhookSecret?: true
    lastError?: true
    webhookExpiresAt?: true
    imapHost?: true
    createdAt?: true
    errorCount?: true
    tenantId?: true
    monitorFolders?: true
    brokerId?: true
    processingEnabled?: true
    autoReplyEnabled?: true
    accessToken?: true
    senderWhitelist?: true
    id?: true
    createdBy?: true
    refreshToken?: true
    senderBlacklist?: true
    clientId?: true
    subjectFilters?: true
    displayName?: true
    imapUsername?: true
    provider?: true
    status?: true
    _all?: true
  }

  export type EmailAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAccount to aggregate.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailAccounts
    **/
    _count?: true | EmailAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailAccountMaxAggregateInputType
  }

  export type GetEmailAccountAggregateType<T extends EmailAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailAccount[P]>
      : GetScalarType<T[P], AggregateEmailAccount[P]>
  }




  export type EmailAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailAccountWhereInput
    orderBy?: EmailAccountOrderByWithAggregationInput | EmailAccountOrderByWithAggregationInput[]
    by: EmailAccountScalarFieldEnum[] | EmailAccountScalarFieldEnum
    having?: EmailAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailAccountCountAggregateInputType | true
    _avg?: EmailAccountAvgAggregateInputType
    _sum?: EmailAccountSumAggregateInputType
    _min?: EmailAccountMinAggregateInputType
    _max?: EmailAccountMaxAggregateInputType
  }

  export type EmailAccountGroupByOutputType = {
    imapPassword: string | null
    oauthScope: string | null
    imapUseTls: boolean
    imapPort: number | null
    tokenExpiresAt: Date | null
    webhookSubscriptionId: string | null
    updatedAt: Date
    emailAddress: string
    lastSyncAt: Date | null
    webhookSecret: string | null
    lastError: string | null
    webhookExpiresAt: Date | null
    imapHost: string | null
    createdAt: Date
    errorCount: number
    tenantId: string | null
    monitorFolders: string[]
    brokerId: string
    processingEnabled: boolean
    autoReplyEnabled: boolean
    accessToken: string | null
    senderWhitelist: string[]
    id: string
    createdBy: string
    refreshToken: string | null
    senderBlacklist: string[]
    clientId: string | null
    subjectFilters: string[]
    displayName: string | null
    imapUsername: string | null
    provider: string
    status: string
    _count: EmailAccountCountAggregateOutputType | null
    _avg: EmailAccountAvgAggregateOutputType | null
    _sum: EmailAccountSumAggregateOutputType | null
    _min: EmailAccountMinAggregateOutputType | null
    _max: EmailAccountMaxAggregateOutputType | null
  }

  type GetEmailAccountGroupByPayload<T extends EmailAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailAccountGroupByOutputType[P]>
            : GetScalarType<T[P], EmailAccountGroupByOutputType[P]>
        }
      >
    >


  export type EmailAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imapPassword?: boolean
    oauthScope?: boolean
    imapUseTls?: boolean
    imapPort?: boolean
    tokenExpiresAt?: boolean
    webhookSubscriptionId?: boolean
    updatedAt?: boolean
    emailAddress?: boolean
    lastSyncAt?: boolean
    webhookSecret?: boolean
    lastError?: boolean
    webhookExpiresAt?: boolean
    imapHost?: boolean
    createdAt?: boolean
    errorCount?: boolean
    tenantId?: boolean
    monitorFolders?: boolean
    brokerId?: boolean
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: boolean
    senderWhitelist?: boolean
    id?: boolean
    createdBy?: boolean
    refreshToken?: boolean
    senderBlacklist?: boolean
    clientId?: boolean
    subjectFilters?: boolean
    displayName?: boolean
    imapUsername?: boolean
    provider?: boolean
    status?: boolean
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imapPassword?: boolean
    oauthScope?: boolean
    imapUseTls?: boolean
    imapPort?: boolean
    tokenExpiresAt?: boolean
    webhookSubscriptionId?: boolean
    updatedAt?: boolean
    emailAddress?: boolean
    lastSyncAt?: boolean
    webhookSecret?: boolean
    lastError?: boolean
    webhookExpiresAt?: boolean
    imapHost?: boolean
    createdAt?: boolean
    errorCount?: boolean
    tenantId?: boolean
    monitorFolders?: boolean
    brokerId?: boolean
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: boolean
    senderWhitelist?: boolean
    id?: boolean
    createdBy?: boolean
    refreshToken?: boolean
    senderBlacklist?: boolean
    clientId?: boolean
    subjectFilters?: boolean
    displayName?: boolean
    imapUsername?: boolean
    provider?: boolean
    status?: boolean
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    imapPassword?: boolean
    oauthScope?: boolean
    imapUseTls?: boolean
    imapPort?: boolean
    tokenExpiresAt?: boolean
    webhookSubscriptionId?: boolean
    updatedAt?: boolean
    emailAddress?: boolean
    lastSyncAt?: boolean
    webhookSecret?: boolean
    lastError?: boolean
    webhookExpiresAt?: boolean
    imapHost?: boolean
    createdAt?: boolean
    errorCount?: boolean
    tenantId?: boolean
    monitorFolders?: boolean
    brokerId?: boolean
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: boolean
    senderWhitelist?: boolean
    id?: boolean
    createdBy?: boolean
    refreshToken?: boolean
    senderBlacklist?: boolean
    clientId?: boolean
    subjectFilters?: boolean
    displayName?: boolean
    imapUsername?: boolean
    provider?: boolean
    status?: boolean
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectScalar = {
    imapPassword?: boolean
    oauthScope?: boolean
    imapUseTls?: boolean
    imapPort?: boolean
    tokenExpiresAt?: boolean
    webhookSubscriptionId?: boolean
    updatedAt?: boolean
    emailAddress?: boolean
    lastSyncAt?: boolean
    webhookSecret?: boolean
    lastError?: boolean
    webhookExpiresAt?: boolean
    imapHost?: boolean
    createdAt?: boolean
    errorCount?: boolean
    tenantId?: boolean
    monitorFolders?: boolean
    brokerId?: boolean
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: boolean
    senderWhitelist?: boolean
    id?: boolean
    createdBy?: boolean
    refreshToken?: boolean
    senderBlacklist?: boolean
    clientId?: boolean
    subjectFilters?: boolean
    displayName?: boolean
    imapUsername?: boolean
    provider?: boolean
    status?: boolean
  }

  export type EmailAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"imapPassword" | "oauthScope" | "imapUseTls" | "imapPort" | "tokenExpiresAt" | "webhookSubscriptionId" | "updatedAt" | "emailAddress" | "lastSyncAt" | "webhookSecret" | "lastError" | "webhookExpiresAt" | "imapHost" | "createdAt" | "errorCount" | "tenantId" | "monitorFolders" | "brokerId" | "processingEnabled" | "autoReplyEnabled" | "accessToken" | "senderWhitelist" | "id" | "createdBy" | "refreshToken" | "senderBlacklist" | "clientId" | "subjectFilters" | "displayName" | "imapUsername" | "provider" | "status", ExtArgs["result"]["emailAccount"]>

  export type $EmailAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailAccount"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      imapPassword: string | null
      oauthScope: string | null
      imapUseTls: boolean
      imapPort: number | null
      tokenExpiresAt: Date | null
      webhookSubscriptionId: string | null
      updatedAt: Date
      emailAddress: string
      lastSyncAt: Date | null
      webhookSecret: string | null
      lastError: string | null
      webhookExpiresAt: Date | null
      imapHost: string | null
      createdAt: Date
      errorCount: number
      tenantId: string | null
      monitorFolders: string[]
      brokerId: string
      processingEnabled: boolean
      autoReplyEnabled: boolean
      accessToken: string | null
      senderWhitelist: string[]
      id: string
      createdBy: string
      refreshToken: string | null
      senderBlacklist: string[]
      clientId: string | null
      subjectFilters: string[]
      displayName: string | null
      imapUsername: string | null
      provider: string
      status: string
    }, ExtArgs["result"]["emailAccount"]>
    composites: {}
  }

  type EmailAccountGetPayload<S extends boolean | null | undefined | EmailAccountDefaultArgs> = $Result.GetResult<Prisma.$EmailAccountPayload, S>

  type EmailAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailAccountCountAggregateInputType | true
    }

  export interface EmailAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailAccount'], meta: { name: 'EmailAccount' } }
    /**
     * Find zero or one EmailAccount that matches the filter.
     * @param {EmailAccountFindUniqueArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailAccountFindUniqueArgs>(args: SelectSubset<T, EmailAccountFindUniqueArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailAccountFindUniqueOrThrowArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindFirstArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailAccountFindFirstArgs>(args?: SelectSubset<T, EmailAccountFindFirstArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindFirstOrThrowArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailAccounts
     * const emailAccounts = await prisma.emailAccount.findMany()
     * 
     * // Get first 10 EmailAccounts
     * const emailAccounts = await prisma.emailAccount.findMany({ take: 10 })
     * 
     * // Only select the `imapPassword`
     * const emailAccountWithImapPasswordOnly = await prisma.emailAccount.findMany({ select: { imapPassword: true } })
     * 
     */
    findMany<T extends EmailAccountFindManyArgs>(args?: SelectSubset<T, EmailAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailAccount.
     * @param {EmailAccountCreateArgs} args - Arguments to create a EmailAccount.
     * @example
     * // Create one EmailAccount
     * const EmailAccount = await prisma.emailAccount.create({
     *   data: {
     *     // ... data to create a EmailAccount
     *   }
     * })
     * 
     */
    create<T extends EmailAccountCreateArgs>(args: SelectSubset<T, EmailAccountCreateArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailAccounts.
     * @param {EmailAccountCreateManyArgs} args - Arguments to create many EmailAccounts.
     * @example
     * // Create many EmailAccounts
     * const emailAccount = await prisma.emailAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailAccountCreateManyArgs>(args?: SelectSubset<T, EmailAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailAccounts and returns the data saved in the database.
     * @param {EmailAccountCreateManyAndReturnArgs} args - Arguments to create many EmailAccounts.
     * @example
     * // Create many EmailAccounts
     * const emailAccount = await prisma.emailAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailAccounts and only return the `imapPassword`
     * const emailAccountWithImapPasswordOnly = await prisma.emailAccount.createManyAndReturn({
     *   select: { imapPassword: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailAccount.
     * @param {EmailAccountDeleteArgs} args - Arguments to delete one EmailAccount.
     * @example
     * // Delete one EmailAccount
     * const EmailAccount = await prisma.emailAccount.delete({
     *   where: {
     *     // ... filter to delete one EmailAccount
     *   }
     * })
     * 
     */
    delete<T extends EmailAccountDeleteArgs>(args: SelectSubset<T, EmailAccountDeleteArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailAccount.
     * @param {EmailAccountUpdateArgs} args - Arguments to update one EmailAccount.
     * @example
     * // Update one EmailAccount
     * const emailAccount = await prisma.emailAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailAccountUpdateArgs>(args: SelectSubset<T, EmailAccountUpdateArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailAccounts.
     * @param {EmailAccountDeleteManyArgs} args - Arguments to filter EmailAccounts to delete.
     * @example
     * // Delete a few EmailAccounts
     * const { count } = await prisma.emailAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailAccountDeleteManyArgs>(args?: SelectSubset<T, EmailAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailAccounts
     * const emailAccount = await prisma.emailAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailAccountUpdateManyArgs>(args: SelectSubset<T, EmailAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailAccounts and returns the data updated in the database.
     * @param {EmailAccountUpdateManyAndReturnArgs} args - Arguments to update many EmailAccounts.
     * @example
     * // Update many EmailAccounts
     * const emailAccount = await prisma.emailAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailAccounts and only return the `imapPassword`
     * const emailAccountWithImapPasswordOnly = await prisma.emailAccount.updateManyAndReturn({
     *   select: { imapPassword: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailAccount.
     * @param {EmailAccountUpsertArgs} args - Arguments to update or create a EmailAccount.
     * @example
     * // Update or create a EmailAccount
     * const emailAccount = await prisma.emailAccount.upsert({
     *   create: {
     *     // ... data to create a EmailAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailAccount we want to update
     *   }
     * })
     */
    upsert<T extends EmailAccountUpsertArgs>(args: SelectSubset<T, EmailAccountUpsertArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountCountArgs} args - Arguments to filter EmailAccounts to count.
     * @example
     * // Count the number of EmailAccounts
     * const count = await prisma.emailAccount.count({
     *   where: {
     *     // ... the filter for the EmailAccounts we want to count
     *   }
     * })
    **/
    count<T extends EmailAccountCountArgs>(
      args?: Subset<T, EmailAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAccountAggregateArgs>(args: Subset<T, EmailAccountAggregateArgs>): Prisma.PrismaPromise<GetEmailAccountAggregateType<T>>

    /**
     * Group by EmailAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailAccountGroupByArgs['orderBy'] }
        : { orderBy?: EmailAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailAccount model
   */
  readonly fields: EmailAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailAccount model
   */
  interface EmailAccountFieldRefs {
    readonly imapPassword: FieldRef<"EmailAccount", 'String'>
    readonly oauthScope: FieldRef<"EmailAccount", 'String'>
    readonly imapUseTls: FieldRef<"EmailAccount", 'Boolean'>
    readonly imapPort: FieldRef<"EmailAccount", 'Int'>
    readonly tokenExpiresAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly webhookSubscriptionId: FieldRef<"EmailAccount", 'String'>
    readonly updatedAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly emailAddress: FieldRef<"EmailAccount", 'String'>
    readonly lastSyncAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly webhookSecret: FieldRef<"EmailAccount", 'String'>
    readonly lastError: FieldRef<"EmailAccount", 'String'>
    readonly webhookExpiresAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly imapHost: FieldRef<"EmailAccount", 'String'>
    readonly createdAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly errorCount: FieldRef<"EmailAccount", 'Int'>
    readonly tenantId: FieldRef<"EmailAccount", 'String'>
    readonly monitorFolders: FieldRef<"EmailAccount", 'String[]'>
    readonly brokerId: FieldRef<"EmailAccount", 'String'>
    readonly processingEnabled: FieldRef<"EmailAccount", 'Boolean'>
    readonly autoReplyEnabled: FieldRef<"EmailAccount", 'Boolean'>
    readonly accessToken: FieldRef<"EmailAccount", 'String'>
    readonly senderWhitelist: FieldRef<"EmailAccount", 'String[]'>
    readonly id: FieldRef<"EmailAccount", 'String'>
    readonly createdBy: FieldRef<"EmailAccount", 'String'>
    readonly refreshToken: FieldRef<"EmailAccount", 'String'>
    readonly senderBlacklist: FieldRef<"EmailAccount", 'String[]'>
    readonly clientId: FieldRef<"EmailAccount", 'String'>
    readonly subjectFilters: FieldRef<"EmailAccount", 'String[]'>
    readonly displayName: FieldRef<"EmailAccount", 'String'>
    readonly imapUsername: FieldRef<"EmailAccount", 'String'>
    readonly provider: FieldRef<"EmailAccount", 'String'>
    readonly status: FieldRef<"EmailAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmailAccount findUnique
   */
  export type EmailAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount findUniqueOrThrow
   */
  export type EmailAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount findFirst
   */
  export type EmailAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAccounts.
     */
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount findFirstOrThrow
   */
  export type EmailAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAccounts.
     */
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount findMany
   */
  export type EmailAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter, which EmailAccounts to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount create
   */
  export type EmailAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailAccount.
     */
    data: XOR<EmailAccountCreateInput, EmailAccountUncheckedCreateInput>
  }

  /**
   * EmailAccount createMany
   */
  export type EmailAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailAccounts.
     */
    data: EmailAccountCreateManyInput | EmailAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailAccount createManyAndReturn
   */
  export type EmailAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data used to create many EmailAccounts.
     */
    data: EmailAccountCreateManyInput | EmailAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailAccount update
   */
  export type EmailAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailAccount.
     */
    data: XOR<EmailAccountUpdateInput, EmailAccountUncheckedUpdateInput>
    /**
     * Choose, which EmailAccount to update.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount updateMany
   */
  export type EmailAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailAccounts.
     */
    data: XOR<EmailAccountUpdateManyMutationInput, EmailAccountUncheckedUpdateManyInput>
    /**
     * Filter which EmailAccounts to update
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to update.
     */
    limit?: number
  }

  /**
   * EmailAccount updateManyAndReturn
   */
  export type EmailAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data used to update EmailAccounts.
     */
    data: XOR<EmailAccountUpdateManyMutationInput, EmailAccountUncheckedUpdateManyInput>
    /**
     * Filter which EmailAccounts to update
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to update.
     */
    limit?: number
  }

  /**
   * EmailAccount upsert
   */
  export type EmailAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailAccount to update in case it exists.
     */
    where: EmailAccountWhereUniqueInput
    /**
     * In case the EmailAccount found by the `where` argument doesn't exist, create a new EmailAccount with this data.
     */
    create: XOR<EmailAccountCreateInput, EmailAccountUncheckedCreateInput>
    /**
     * In case the EmailAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailAccountUpdateInput, EmailAccountUncheckedUpdateInput>
  }

  /**
   * EmailAccount delete
   */
  export type EmailAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Filter which EmailAccount to delete.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount deleteMany
   */
  export type EmailAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAccounts to delete
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to delete.
     */
    limit?: number
  }

  /**
   * EmailAccount without action
   */
  export type EmailAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
  }


  /**
   * Model EmailProcessingLog
   */

  export type AggregateEmailProcessingLog = {
    _count: EmailProcessingLogCountAggregateOutputType | null
    _avg: EmailProcessingLogAvgAggregateOutputType | null
    _sum: EmailProcessingLogSumAggregateOutputType | null
    _min: EmailProcessingLogMinAggregateOutputType | null
    _max: EmailProcessingLogMaxAggregateOutputType | null
  }

  export type EmailProcessingLogAvgAggregateOutputType = {
    retryCount: number | null
    extractionConfidence: Decimal | null
  }

  export type EmailProcessingLogSumAggregateOutputType = {
    retryCount: number | null
    extractionConfidence: Decimal | null
  }

  export type EmailProcessingLogMinAggregateOutputType = {
    subject: string | null
    emailBodyText: string | null
    threadId: string | null
    createdAt: Date | null
    processingStatus: string | null
    emailAccountId: string | null
    id: string | null
    retryCount: number | null
    emailBodyHtml: string | null
    receivedAt: Date | null
    messageId: string | null
    extractionConfidence: Decimal | null
    senderEmail: string | null
    brokerId: string | null
    intentClassification: string | null
    loadId: string | null
    loadNumber: string | null
    errorMessage: string | null
    processedAt: Date | null
  }

  export type EmailProcessingLogMaxAggregateOutputType = {
    subject: string | null
    emailBodyText: string | null
    threadId: string | null
    createdAt: Date | null
    processingStatus: string | null
    emailAccountId: string | null
    id: string | null
    retryCount: number | null
    emailBodyHtml: string | null
    receivedAt: Date | null
    messageId: string | null
    extractionConfidence: Decimal | null
    senderEmail: string | null
    brokerId: string | null
    intentClassification: string | null
    loadId: string | null
    loadNumber: string | null
    errorMessage: string | null
    processedAt: Date | null
  }

  export type EmailProcessingLogCountAggregateOutputType = {
    subject: number
    emailBodyText: number
    complexityFlags: number
    threadId: number
    createdAt: number
    processingStatus: number
    rawEmailHeaders: number
    emailAccountId: number
    id: number
    retryCount: number
    emailBodyHtml: number
    attachmentsInfo: number
    errorDetails: number
    receivedAt: number
    messageId: number
    extractionConfidence: number
    senderEmail: number
    brokerId: number
    intentClassification: number
    loadId: number
    loadNumber: number
    errorMessage: number
    processedAt: number
    _all: number
  }


  export type EmailProcessingLogAvgAggregateInputType = {
    retryCount?: true
    extractionConfidence?: true
  }

  export type EmailProcessingLogSumAggregateInputType = {
    retryCount?: true
    extractionConfidence?: true
  }

  export type EmailProcessingLogMinAggregateInputType = {
    subject?: true
    emailBodyText?: true
    threadId?: true
    createdAt?: true
    processingStatus?: true
    emailAccountId?: true
    id?: true
    retryCount?: true
    emailBodyHtml?: true
    receivedAt?: true
    messageId?: true
    extractionConfidence?: true
    senderEmail?: true
    brokerId?: true
    intentClassification?: true
    loadId?: true
    loadNumber?: true
    errorMessage?: true
    processedAt?: true
  }

  export type EmailProcessingLogMaxAggregateInputType = {
    subject?: true
    emailBodyText?: true
    threadId?: true
    createdAt?: true
    processingStatus?: true
    emailAccountId?: true
    id?: true
    retryCount?: true
    emailBodyHtml?: true
    receivedAt?: true
    messageId?: true
    extractionConfidence?: true
    senderEmail?: true
    brokerId?: true
    intentClassification?: true
    loadId?: true
    loadNumber?: true
    errorMessage?: true
    processedAt?: true
  }

  export type EmailProcessingLogCountAggregateInputType = {
    subject?: true
    emailBodyText?: true
    complexityFlags?: true
    threadId?: true
    createdAt?: true
    processingStatus?: true
    rawEmailHeaders?: true
    emailAccountId?: true
    id?: true
    retryCount?: true
    emailBodyHtml?: true
    attachmentsInfo?: true
    errorDetails?: true
    receivedAt?: true
    messageId?: true
    extractionConfidence?: true
    senderEmail?: true
    brokerId?: true
    intentClassification?: true
    loadId?: true
    loadNumber?: true
    errorMessage?: true
    processedAt?: true
    _all?: true
  }

  export type EmailProcessingLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailProcessingLog to aggregate.
     */
    where?: EmailProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailProcessingLogs to fetch.
     */
    orderBy?: EmailProcessingLogOrderByWithRelationInput | EmailProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailProcessingLogs
    **/
    _count?: true | EmailProcessingLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailProcessingLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailProcessingLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailProcessingLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailProcessingLogMaxAggregateInputType
  }

  export type GetEmailProcessingLogAggregateType<T extends EmailProcessingLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailProcessingLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailProcessingLog[P]>
      : GetScalarType<T[P], AggregateEmailProcessingLog[P]>
  }




  export type EmailProcessingLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailProcessingLogWhereInput
    orderBy?: EmailProcessingLogOrderByWithAggregationInput | EmailProcessingLogOrderByWithAggregationInput[]
    by: EmailProcessingLogScalarFieldEnum[] | EmailProcessingLogScalarFieldEnum
    having?: EmailProcessingLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailProcessingLogCountAggregateInputType | true
    _avg?: EmailProcessingLogAvgAggregateInputType
    _sum?: EmailProcessingLogSumAggregateInputType
    _min?: EmailProcessingLogMinAggregateInputType
    _max?: EmailProcessingLogMaxAggregateInputType
  }

  export type EmailProcessingLogGroupByOutputType = {
    subject: string | null
    emailBodyText: string | null
    complexityFlags: string[]
    threadId: string | null
    createdAt: Date
    processingStatus: string
    rawEmailHeaders: JsonValue | null
    emailAccountId: string | null
    id: string
    retryCount: number
    emailBodyHtml: string | null
    attachmentsInfo: JsonValue | null
    errorDetails: JsonValue | null
    receivedAt: Date | null
    messageId: string
    extractionConfidence: Decimal | null
    senderEmail: string | null
    brokerId: string
    intentClassification: string | null
    loadId: string | null
    loadNumber: string | null
    errorMessage: string | null
    processedAt: Date
    _count: EmailProcessingLogCountAggregateOutputType | null
    _avg: EmailProcessingLogAvgAggregateOutputType | null
    _sum: EmailProcessingLogSumAggregateOutputType | null
    _min: EmailProcessingLogMinAggregateOutputType | null
    _max: EmailProcessingLogMaxAggregateOutputType | null
  }

  type GetEmailProcessingLogGroupByPayload<T extends EmailProcessingLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailProcessingLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailProcessingLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailProcessingLogGroupByOutputType[P]>
            : GetScalarType<T[P], EmailProcessingLogGroupByOutputType[P]>
        }
      >
    >


  export type EmailProcessingLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    subject?: boolean
    emailBodyText?: boolean
    complexityFlags?: boolean
    threadId?: boolean
    createdAt?: boolean
    processingStatus?: boolean
    rawEmailHeaders?: boolean
    emailAccountId?: boolean
    id?: boolean
    retryCount?: boolean
    emailBodyHtml?: boolean
    attachmentsInfo?: boolean
    errorDetails?: boolean
    receivedAt?: boolean
    messageId?: boolean
    extractionConfidence?: boolean
    senderEmail?: boolean
    brokerId?: boolean
    intentClassification?: boolean
    loadId?: boolean
    loadNumber?: boolean
    errorMessage?: boolean
    processedAt?: boolean
  }, ExtArgs["result"]["emailProcessingLog"]>

  export type EmailProcessingLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    subject?: boolean
    emailBodyText?: boolean
    complexityFlags?: boolean
    threadId?: boolean
    createdAt?: boolean
    processingStatus?: boolean
    rawEmailHeaders?: boolean
    emailAccountId?: boolean
    id?: boolean
    retryCount?: boolean
    emailBodyHtml?: boolean
    attachmentsInfo?: boolean
    errorDetails?: boolean
    receivedAt?: boolean
    messageId?: boolean
    extractionConfidence?: boolean
    senderEmail?: boolean
    brokerId?: boolean
    intentClassification?: boolean
    loadId?: boolean
    loadNumber?: boolean
    errorMessage?: boolean
    processedAt?: boolean
  }, ExtArgs["result"]["emailProcessingLog"]>

  export type EmailProcessingLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    subject?: boolean
    emailBodyText?: boolean
    complexityFlags?: boolean
    threadId?: boolean
    createdAt?: boolean
    processingStatus?: boolean
    rawEmailHeaders?: boolean
    emailAccountId?: boolean
    id?: boolean
    retryCount?: boolean
    emailBodyHtml?: boolean
    attachmentsInfo?: boolean
    errorDetails?: boolean
    receivedAt?: boolean
    messageId?: boolean
    extractionConfidence?: boolean
    senderEmail?: boolean
    brokerId?: boolean
    intentClassification?: boolean
    loadId?: boolean
    loadNumber?: boolean
    errorMessage?: boolean
    processedAt?: boolean
  }, ExtArgs["result"]["emailProcessingLog"]>

  export type EmailProcessingLogSelectScalar = {
    subject?: boolean
    emailBodyText?: boolean
    complexityFlags?: boolean
    threadId?: boolean
    createdAt?: boolean
    processingStatus?: boolean
    rawEmailHeaders?: boolean
    emailAccountId?: boolean
    id?: boolean
    retryCount?: boolean
    emailBodyHtml?: boolean
    attachmentsInfo?: boolean
    errorDetails?: boolean
    receivedAt?: boolean
    messageId?: boolean
    extractionConfidence?: boolean
    senderEmail?: boolean
    brokerId?: boolean
    intentClassification?: boolean
    loadId?: boolean
    loadNumber?: boolean
    errorMessage?: boolean
    processedAt?: boolean
  }

  export type EmailProcessingLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"subject" | "emailBodyText" | "complexityFlags" | "threadId" | "createdAt" | "processingStatus" | "rawEmailHeaders" | "emailAccountId" | "id" | "retryCount" | "emailBodyHtml" | "attachmentsInfo" | "errorDetails" | "receivedAt" | "messageId" | "extractionConfidence" | "senderEmail" | "brokerId" | "intentClassification" | "loadId" | "loadNumber" | "errorMessage" | "processedAt", ExtArgs["result"]["emailProcessingLog"]>

  export type $EmailProcessingLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailProcessingLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      subject: string | null
      emailBodyText: string | null
      complexityFlags: string[]
      threadId: string | null
      createdAt: Date
      processingStatus: string
      rawEmailHeaders: Prisma.JsonValue | null
      emailAccountId: string | null
      id: string
      retryCount: number
      emailBodyHtml: string | null
      attachmentsInfo: Prisma.JsonValue | null
      errorDetails: Prisma.JsonValue | null
      receivedAt: Date | null
      messageId: string
      extractionConfidence: Prisma.Decimal | null
      senderEmail: string | null
      brokerId: string
      intentClassification: string | null
      loadId: string | null
      loadNumber: string | null
      errorMessage: string | null
      processedAt: Date
    }, ExtArgs["result"]["emailProcessingLog"]>
    composites: {}
  }

  type EmailProcessingLogGetPayload<S extends boolean | null | undefined | EmailProcessingLogDefaultArgs> = $Result.GetResult<Prisma.$EmailProcessingLogPayload, S>

  type EmailProcessingLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailProcessingLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailProcessingLogCountAggregateInputType | true
    }

  export interface EmailProcessingLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailProcessingLog'], meta: { name: 'EmailProcessingLog' } }
    /**
     * Find zero or one EmailProcessingLog that matches the filter.
     * @param {EmailProcessingLogFindUniqueArgs} args - Arguments to find a EmailProcessingLog
     * @example
     * // Get one EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailProcessingLogFindUniqueArgs>(args: SelectSubset<T, EmailProcessingLogFindUniqueArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailProcessingLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailProcessingLogFindUniqueOrThrowArgs} args - Arguments to find a EmailProcessingLog
     * @example
     * // Get one EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailProcessingLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailProcessingLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailProcessingLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogFindFirstArgs} args - Arguments to find a EmailProcessingLog
     * @example
     * // Get one EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailProcessingLogFindFirstArgs>(args?: SelectSubset<T, EmailProcessingLogFindFirstArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailProcessingLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogFindFirstOrThrowArgs} args - Arguments to find a EmailProcessingLog
     * @example
     * // Get one EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailProcessingLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailProcessingLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailProcessingLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailProcessingLogs
     * const emailProcessingLogs = await prisma.emailProcessingLog.findMany()
     * 
     * // Get first 10 EmailProcessingLogs
     * const emailProcessingLogs = await prisma.emailProcessingLog.findMany({ take: 10 })
     * 
     * // Only select the `subject`
     * const emailProcessingLogWithSubjectOnly = await prisma.emailProcessingLog.findMany({ select: { subject: true } })
     * 
     */
    findMany<T extends EmailProcessingLogFindManyArgs>(args?: SelectSubset<T, EmailProcessingLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailProcessingLog.
     * @param {EmailProcessingLogCreateArgs} args - Arguments to create a EmailProcessingLog.
     * @example
     * // Create one EmailProcessingLog
     * const EmailProcessingLog = await prisma.emailProcessingLog.create({
     *   data: {
     *     // ... data to create a EmailProcessingLog
     *   }
     * })
     * 
     */
    create<T extends EmailProcessingLogCreateArgs>(args: SelectSubset<T, EmailProcessingLogCreateArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailProcessingLogs.
     * @param {EmailProcessingLogCreateManyArgs} args - Arguments to create many EmailProcessingLogs.
     * @example
     * // Create many EmailProcessingLogs
     * const emailProcessingLog = await prisma.emailProcessingLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailProcessingLogCreateManyArgs>(args?: SelectSubset<T, EmailProcessingLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailProcessingLogs and returns the data saved in the database.
     * @param {EmailProcessingLogCreateManyAndReturnArgs} args - Arguments to create many EmailProcessingLogs.
     * @example
     * // Create many EmailProcessingLogs
     * const emailProcessingLog = await prisma.emailProcessingLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailProcessingLogs and only return the `subject`
     * const emailProcessingLogWithSubjectOnly = await prisma.emailProcessingLog.createManyAndReturn({
     *   select: { subject: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailProcessingLogCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailProcessingLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailProcessingLog.
     * @param {EmailProcessingLogDeleteArgs} args - Arguments to delete one EmailProcessingLog.
     * @example
     * // Delete one EmailProcessingLog
     * const EmailProcessingLog = await prisma.emailProcessingLog.delete({
     *   where: {
     *     // ... filter to delete one EmailProcessingLog
     *   }
     * })
     * 
     */
    delete<T extends EmailProcessingLogDeleteArgs>(args: SelectSubset<T, EmailProcessingLogDeleteArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailProcessingLog.
     * @param {EmailProcessingLogUpdateArgs} args - Arguments to update one EmailProcessingLog.
     * @example
     * // Update one EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailProcessingLogUpdateArgs>(args: SelectSubset<T, EmailProcessingLogUpdateArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailProcessingLogs.
     * @param {EmailProcessingLogDeleteManyArgs} args - Arguments to filter EmailProcessingLogs to delete.
     * @example
     * // Delete a few EmailProcessingLogs
     * const { count } = await prisma.emailProcessingLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailProcessingLogDeleteManyArgs>(args?: SelectSubset<T, EmailProcessingLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailProcessingLogs
     * const emailProcessingLog = await prisma.emailProcessingLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailProcessingLogUpdateManyArgs>(args: SelectSubset<T, EmailProcessingLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailProcessingLogs and returns the data updated in the database.
     * @param {EmailProcessingLogUpdateManyAndReturnArgs} args - Arguments to update many EmailProcessingLogs.
     * @example
     * // Update many EmailProcessingLogs
     * const emailProcessingLog = await prisma.emailProcessingLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailProcessingLogs and only return the `subject`
     * const emailProcessingLogWithSubjectOnly = await prisma.emailProcessingLog.updateManyAndReturn({
     *   select: { subject: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailProcessingLogUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailProcessingLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailProcessingLog.
     * @param {EmailProcessingLogUpsertArgs} args - Arguments to update or create a EmailProcessingLog.
     * @example
     * // Update or create a EmailProcessingLog
     * const emailProcessingLog = await prisma.emailProcessingLog.upsert({
     *   create: {
     *     // ... data to create a EmailProcessingLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailProcessingLog we want to update
     *   }
     * })
     */
    upsert<T extends EmailProcessingLogUpsertArgs>(args: SelectSubset<T, EmailProcessingLogUpsertArgs<ExtArgs>>): Prisma__EmailProcessingLogClient<$Result.GetResult<Prisma.$EmailProcessingLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogCountArgs} args - Arguments to filter EmailProcessingLogs to count.
     * @example
     * // Count the number of EmailProcessingLogs
     * const count = await prisma.emailProcessingLog.count({
     *   where: {
     *     // ... the filter for the EmailProcessingLogs we want to count
     *   }
     * })
    **/
    count<T extends EmailProcessingLogCountArgs>(
      args?: Subset<T, EmailProcessingLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailProcessingLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailProcessingLogAggregateArgs>(args: Subset<T, EmailProcessingLogAggregateArgs>): Prisma.PrismaPromise<GetEmailProcessingLogAggregateType<T>>

    /**
     * Group by EmailProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailProcessingLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailProcessingLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailProcessingLogGroupByArgs['orderBy'] }
        : { orderBy?: EmailProcessingLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailProcessingLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailProcessingLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailProcessingLog model
   */
  readonly fields: EmailProcessingLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailProcessingLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailProcessingLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailProcessingLog model
   */
  interface EmailProcessingLogFieldRefs {
    readonly subject: FieldRef<"EmailProcessingLog", 'String'>
    readonly emailBodyText: FieldRef<"EmailProcessingLog", 'String'>
    readonly complexityFlags: FieldRef<"EmailProcessingLog", 'String[]'>
    readonly threadId: FieldRef<"EmailProcessingLog", 'String'>
    readonly createdAt: FieldRef<"EmailProcessingLog", 'DateTime'>
    readonly processingStatus: FieldRef<"EmailProcessingLog", 'String'>
    readonly rawEmailHeaders: FieldRef<"EmailProcessingLog", 'Json'>
    readonly emailAccountId: FieldRef<"EmailProcessingLog", 'String'>
    readonly id: FieldRef<"EmailProcessingLog", 'String'>
    readonly retryCount: FieldRef<"EmailProcessingLog", 'Int'>
    readonly emailBodyHtml: FieldRef<"EmailProcessingLog", 'String'>
    readonly attachmentsInfo: FieldRef<"EmailProcessingLog", 'Json'>
    readonly errorDetails: FieldRef<"EmailProcessingLog", 'Json'>
    readonly receivedAt: FieldRef<"EmailProcessingLog", 'DateTime'>
    readonly messageId: FieldRef<"EmailProcessingLog", 'String'>
    readonly extractionConfidence: FieldRef<"EmailProcessingLog", 'Decimal'>
    readonly senderEmail: FieldRef<"EmailProcessingLog", 'String'>
    readonly brokerId: FieldRef<"EmailProcessingLog", 'String'>
    readonly intentClassification: FieldRef<"EmailProcessingLog", 'String'>
    readonly loadId: FieldRef<"EmailProcessingLog", 'String'>
    readonly loadNumber: FieldRef<"EmailProcessingLog", 'String'>
    readonly errorMessage: FieldRef<"EmailProcessingLog", 'String'>
    readonly processedAt: FieldRef<"EmailProcessingLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailProcessingLog findUnique
   */
  export type EmailProcessingLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailProcessingLog to fetch.
     */
    where: EmailProcessingLogWhereUniqueInput
  }

  /**
   * EmailProcessingLog findUniqueOrThrow
   */
  export type EmailProcessingLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailProcessingLog to fetch.
     */
    where: EmailProcessingLogWhereUniqueInput
  }

  /**
   * EmailProcessingLog findFirst
   */
  export type EmailProcessingLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailProcessingLog to fetch.
     */
    where?: EmailProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailProcessingLogs to fetch.
     */
    orderBy?: EmailProcessingLogOrderByWithRelationInput | EmailProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailProcessingLogs.
     */
    cursor?: EmailProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailProcessingLogs.
     */
    distinct?: EmailProcessingLogScalarFieldEnum | EmailProcessingLogScalarFieldEnum[]
  }

  /**
   * EmailProcessingLog findFirstOrThrow
   */
  export type EmailProcessingLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailProcessingLog to fetch.
     */
    where?: EmailProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailProcessingLogs to fetch.
     */
    orderBy?: EmailProcessingLogOrderByWithRelationInput | EmailProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailProcessingLogs.
     */
    cursor?: EmailProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailProcessingLogs.
     */
    distinct?: EmailProcessingLogScalarFieldEnum | EmailProcessingLogScalarFieldEnum[]
  }

  /**
   * EmailProcessingLog findMany
   */
  export type EmailProcessingLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailProcessingLogs to fetch.
     */
    where?: EmailProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailProcessingLogs to fetch.
     */
    orderBy?: EmailProcessingLogOrderByWithRelationInput | EmailProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailProcessingLogs.
     */
    cursor?: EmailProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailProcessingLogs.
     */
    skip?: number
    distinct?: EmailProcessingLogScalarFieldEnum | EmailProcessingLogScalarFieldEnum[]
  }

  /**
   * EmailProcessingLog create
   */
  export type EmailProcessingLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailProcessingLog.
     */
    data: XOR<EmailProcessingLogCreateInput, EmailProcessingLogUncheckedCreateInput>
  }

  /**
   * EmailProcessingLog createMany
   */
  export type EmailProcessingLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailProcessingLogs.
     */
    data: EmailProcessingLogCreateManyInput | EmailProcessingLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailProcessingLog createManyAndReturn
   */
  export type EmailProcessingLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * The data used to create many EmailProcessingLogs.
     */
    data: EmailProcessingLogCreateManyInput | EmailProcessingLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailProcessingLog update
   */
  export type EmailProcessingLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailProcessingLog.
     */
    data: XOR<EmailProcessingLogUpdateInput, EmailProcessingLogUncheckedUpdateInput>
    /**
     * Choose, which EmailProcessingLog to update.
     */
    where: EmailProcessingLogWhereUniqueInput
  }

  /**
   * EmailProcessingLog updateMany
   */
  export type EmailProcessingLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailProcessingLogs.
     */
    data: XOR<EmailProcessingLogUpdateManyMutationInput, EmailProcessingLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailProcessingLogs to update
     */
    where?: EmailProcessingLogWhereInput
    /**
     * Limit how many EmailProcessingLogs to update.
     */
    limit?: number
  }

  /**
   * EmailProcessingLog updateManyAndReturn
   */
  export type EmailProcessingLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * The data used to update EmailProcessingLogs.
     */
    data: XOR<EmailProcessingLogUpdateManyMutationInput, EmailProcessingLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailProcessingLogs to update
     */
    where?: EmailProcessingLogWhereInput
    /**
     * Limit how many EmailProcessingLogs to update.
     */
    limit?: number
  }

  /**
   * EmailProcessingLog upsert
   */
  export type EmailProcessingLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailProcessingLog to update in case it exists.
     */
    where: EmailProcessingLogWhereUniqueInput
    /**
     * In case the EmailProcessingLog found by the `where` argument doesn't exist, create a new EmailProcessingLog with this data.
     */
    create: XOR<EmailProcessingLogCreateInput, EmailProcessingLogUncheckedCreateInput>
    /**
     * In case the EmailProcessingLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailProcessingLogUpdateInput, EmailProcessingLogUncheckedUpdateInput>
  }

  /**
   * EmailProcessingLog delete
   */
  export type EmailProcessingLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
    /**
     * Filter which EmailProcessingLog to delete.
     */
    where: EmailProcessingLogWhereUniqueInput
  }

  /**
   * EmailProcessingLog deleteMany
   */
  export type EmailProcessingLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailProcessingLogs to delete
     */
    where?: EmailProcessingLogWhereInput
    /**
     * Limit how many EmailProcessingLogs to delete.
     */
    limit?: number
  }

  /**
   * EmailProcessingLog without action
   */
  export type EmailProcessingLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailProcessingLog
     */
    select?: EmailProcessingLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailProcessingLog
     */
    omit?: EmailProcessingLogOmit<ExtArgs> | null
  }


  /**
   * Model Email
   */

  export type AggregateEmail = {
    _count: EmailCountAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  export type EmailMinAggregateOutputType = {
    messageId: string | null
    content: string | null
    processedAt: Date | null
    subject: string | null
    provider: string | null
    fromAddress: string | null
    status: string | null
    receivedAt: Date | null
    createdAt: Date | null
    id: string | null
    brokerId: string | null
    toAddress: string | null
  }

  export type EmailMaxAggregateOutputType = {
    messageId: string | null
    content: string | null
    processedAt: Date | null
    subject: string | null
    provider: string | null
    fromAddress: string | null
    status: string | null
    receivedAt: Date | null
    createdAt: Date | null
    id: string | null
    brokerId: string | null
    toAddress: string | null
  }

  export type EmailCountAggregateOutputType = {
    messageId: number
    rawData: number
    content: number
    processedAt: number
    subject: number
    provider: number
    fromAddress: number
    status: number
    receivedAt: number
    createdAt: number
    id: number
    brokerId: number
    toAddress: number
    _all: number
  }


  export type EmailMinAggregateInputType = {
    messageId?: true
    content?: true
    processedAt?: true
    subject?: true
    provider?: true
    fromAddress?: true
    status?: true
    receivedAt?: true
    createdAt?: true
    id?: true
    brokerId?: true
    toAddress?: true
  }

  export type EmailMaxAggregateInputType = {
    messageId?: true
    content?: true
    processedAt?: true
    subject?: true
    provider?: true
    fromAddress?: true
    status?: true
    receivedAt?: true
    createdAt?: true
    id?: true
    brokerId?: true
    toAddress?: true
  }

  export type EmailCountAggregateInputType = {
    messageId?: true
    rawData?: true
    content?: true
    processedAt?: true
    subject?: true
    provider?: true
    fromAddress?: true
    status?: true
    receivedAt?: true
    createdAt?: true
    id?: true
    brokerId?: true
    toAddress?: true
    _all?: true
  }

  export type EmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Email to aggregate.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emails
    **/
    _count?: true | EmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailMaxAggregateInputType
  }

  export type GetEmailAggregateType<T extends EmailAggregateArgs> = {
        [P in keyof T & keyof AggregateEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmail[P]>
      : GetScalarType<T[P], AggregateEmail[P]>
  }




  export type EmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithAggregationInput | EmailOrderByWithAggregationInput[]
    by: EmailScalarFieldEnum[] | EmailScalarFieldEnum
    having?: EmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCountAggregateInputType | true
    _min?: EmailMinAggregateInputType
    _max?: EmailMaxAggregateInputType
  }

  export type EmailGroupByOutputType = {
    messageId: string
    rawData: JsonValue | null
    content: string | null
    processedAt: Date
    subject: string | null
    provider: string | null
    fromAddress: string
    status: string
    receivedAt: Date
    createdAt: Date
    id: string
    brokerId: string
    toAddress: string
    _count: EmailCountAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  type GetEmailGroupByPayload<T extends EmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailGroupByOutputType[P]>
            : GetScalarType<T[P], EmailGroupByOutputType[P]>
        }
      >
    >


  export type EmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    rawData?: boolean
    content?: boolean
    processedAt?: boolean
    subject?: boolean
    provider?: boolean
    fromAddress?: boolean
    status?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    id?: boolean
    brokerId?: boolean
    toAddress?: boolean
  }, ExtArgs["result"]["email"]>

  export type EmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    rawData?: boolean
    content?: boolean
    processedAt?: boolean
    subject?: boolean
    provider?: boolean
    fromAddress?: boolean
    status?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    id?: boolean
    brokerId?: boolean
    toAddress?: boolean
  }, ExtArgs["result"]["email"]>

  export type EmailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    rawData?: boolean
    content?: boolean
    processedAt?: boolean
    subject?: boolean
    provider?: boolean
    fromAddress?: boolean
    status?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    id?: boolean
    brokerId?: boolean
    toAddress?: boolean
  }, ExtArgs["result"]["email"]>

  export type EmailSelectScalar = {
    messageId?: boolean
    rawData?: boolean
    content?: boolean
    processedAt?: boolean
    subject?: boolean
    provider?: boolean
    fromAddress?: boolean
    status?: boolean
    receivedAt?: boolean
    createdAt?: boolean
    id?: boolean
    brokerId?: boolean
    toAddress?: boolean
  }

  export type EmailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"messageId" | "rawData" | "content" | "processedAt" | "subject" | "provider" | "fromAddress" | "status" | "receivedAt" | "createdAt" | "id" | "brokerId" | "toAddress", ExtArgs["result"]["email"]>

  export type $EmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Email"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      messageId: string
      rawData: Prisma.JsonValue | null
      content: string | null
      processedAt: Date
      subject: string | null
      provider: string | null
      fromAddress: string
      status: string
      receivedAt: Date
      createdAt: Date
      id: string
      brokerId: string
      toAddress: string
    }, ExtArgs["result"]["email"]>
    composites: {}
  }

  type EmailGetPayload<S extends boolean | null | undefined | EmailDefaultArgs> = $Result.GetResult<Prisma.$EmailPayload, S>

  type EmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailCountAggregateInputType | true
    }

  export interface EmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Email'], meta: { name: 'Email' } }
    /**
     * Find zero or one Email that matches the filter.
     * @param {EmailFindUniqueArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailFindUniqueArgs>(args: SelectSubset<T, EmailFindUniqueArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Email that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailFindUniqueOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Email that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailFindFirstArgs>(args?: SelectSubset<T, EmailFindFirstArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Email that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Emails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emails
     * const emails = await prisma.email.findMany()
     * 
     * // Get first 10 Emails
     * const emails = await prisma.email.findMany({ take: 10 })
     * 
     * // Only select the `messageId`
     * const emailWithMessageIdOnly = await prisma.email.findMany({ select: { messageId: true } })
     * 
     */
    findMany<T extends EmailFindManyArgs>(args?: SelectSubset<T, EmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Email.
     * @param {EmailCreateArgs} args - Arguments to create a Email.
     * @example
     * // Create one Email
     * const Email = await prisma.email.create({
     *   data: {
     *     // ... data to create a Email
     *   }
     * })
     * 
     */
    create<T extends EmailCreateArgs>(args: SelectSubset<T, EmailCreateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Emails.
     * @param {EmailCreateManyArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailCreateManyArgs>(args?: SelectSubset<T, EmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Emails and returns the data saved in the database.
     * @param {EmailCreateManyAndReturnArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Emails and only return the `messageId`
     * const emailWithMessageIdOnly = await prisma.email.createManyAndReturn({
     *   select: { messageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Email.
     * @param {EmailDeleteArgs} args - Arguments to delete one Email.
     * @example
     * // Delete one Email
     * const Email = await prisma.email.delete({
     *   where: {
     *     // ... filter to delete one Email
     *   }
     * })
     * 
     */
    delete<T extends EmailDeleteArgs>(args: SelectSubset<T, EmailDeleteArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Email.
     * @param {EmailUpdateArgs} args - Arguments to update one Email.
     * @example
     * // Update one Email
     * const email = await prisma.email.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailUpdateArgs>(args: SelectSubset<T, EmailUpdateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Emails.
     * @param {EmailDeleteManyArgs} args - Arguments to filter Emails to delete.
     * @example
     * // Delete a few Emails
     * const { count } = await prisma.email.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailDeleteManyArgs>(args?: SelectSubset<T, EmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailUpdateManyArgs>(args: SelectSubset<T, EmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails and returns the data updated in the database.
     * @param {EmailUpdateManyAndReturnArgs} args - Arguments to update many Emails.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Emails and only return the `messageId`
     * const emailWithMessageIdOnly = await prisma.email.updateManyAndReturn({
     *   select: { messageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Email.
     * @param {EmailUpsertArgs} args - Arguments to update or create a Email.
     * @example
     * // Update or create a Email
     * const email = await prisma.email.upsert({
     *   create: {
     *     // ... data to create a Email
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Email we want to update
     *   }
     * })
     */
    upsert<T extends EmailUpsertArgs>(args: SelectSubset<T, EmailUpsertArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCountArgs} args - Arguments to filter Emails to count.
     * @example
     * // Count the number of Emails
     * const count = await prisma.email.count({
     *   where: {
     *     // ... the filter for the Emails we want to count
     *   }
     * })
    **/
    count<T extends EmailCountArgs>(
      args?: Subset<T, EmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAggregateArgs>(args: Subset<T, EmailAggregateArgs>): Prisma.PrismaPromise<GetEmailAggregateType<T>>

    /**
     * Group by Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailGroupByArgs['orderBy'] }
        : { orderBy?: EmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Email model
   */
  readonly fields: EmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Email.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Email model
   */
  interface EmailFieldRefs {
    readonly messageId: FieldRef<"Email", 'String'>
    readonly rawData: FieldRef<"Email", 'Json'>
    readonly content: FieldRef<"Email", 'String'>
    readonly processedAt: FieldRef<"Email", 'DateTime'>
    readonly subject: FieldRef<"Email", 'String'>
    readonly provider: FieldRef<"Email", 'String'>
    readonly fromAddress: FieldRef<"Email", 'String'>
    readonly status: FieldRef<"Email", 'String'>
    readonly receivedAt: FieldRef<"Email", 'DateTime'>
    readonly createdAt: FieldRef<"Email", 'DateTime'>
    readonly id: FieldRef<"Email", 'String'>
    readonly brokerId: FieldRef<"Email", 'String'>
    readonly toAddress: FieldRef<"Email", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Email findUnique
   */
  export type EmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findUniqueOrThrow
   */
  export type EmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findFirst
   */
  export type EmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findFirstOrThrow
   */
  export type EmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findMany
   */
  export type EmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter, which Emails to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email create
   */
  export type EmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data needed to create a Email.
     */
    data: XOR<EmailCreateInput, EmailUncheckedCreateInput>
  }

  /**
   * Email createMany
   */
  export type EmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Email createManyAndReturn
   */
  export type EmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Email update
   */
  export type EmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data needed to update a Email.
     */
    data: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
    /**
     * Choose, which Email to update.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email updateMany
   */
  export type EmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emails.
     */
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to update.
     */
    limit?: number
  }

  /**
   * Email updateManyAndReturn
   */
  export type EmailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data used to update Emails.
     */
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to update.
     */
    limit?: number
  }

  /**
   * Email upsert
   */
  export type EmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The filter to search for the Email to update in case it exists.
     */
    where: EmailWhereUniqueInput
    /**
     * In case the Email found by the `where` argument doesn't exist, create a new Email with this data.
     */
    create: XOR<EmailCreateInput, EmailUncheckedCreateInput>
    /**
     * In case the Email was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
  }

  /**
   * Email delete
   */
  export type EmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Filter which Email to delete.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email deleteMany
   */
  export type EmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emails to delete
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to delete.
     */
    limit?: number
  }

  /**
   * Email without action
   */
  export type EmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
  }


  /**
   * Model LoadBlast
   */

  export type AggregateLoadBlast = {
    _count: LoadBlastCountAggregateOutputType | null
    _avg: LoadBlastAvgAggregateOutputType | null
    _sum: LoadBlastSumAggregateOutputType | null
    _min: LoadBlastMinAggregateOutputType | null
    _max: LoadBlastMaxAggregateOutputType | null
  }

  export type LoadBlastAvgAggregateOutputType = {
    retryCount: number | null
  }

  export type LoadBlastSumAggregateOutputType = {
    retryCount: number | null
  }

  export type LoadBlastMinAggregateOutputType = {
    loadId: string | null
    id: string | null
    createdAt: Date | null
    carrierId: string | null
    blastType: string | null
    blastStatus: string | null
    subjectLine: string | null
    messageContent: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    responseReceivedAt: Date | null
    responseType: string | null
    responseContent: string | null
    resendMessageId: string | null
    twilioMessageId: string | null
    datPostingId: string | null
    errorMessage: string | null
    retryCount: number | null
    createdBy: string | null
  }

  export type LoadBlastMaxAggregateOutputType = {
    loadId: string | null
    id: string | null
    createdAt: Date | null
    carrierId: string | null
    blastType: string | null
    blastStatus: string | null
    subjectLine: string | null
    messageContent: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    responseReceivedAt: Date | null
    responseType: string | null
    responseContent: string | null
    resendMessageId: string | null
    twilioMessageId: string | null
    datPostingId: string | null
    errorMessage: string | null
    retryCount: number | null
    createdBy: string | null
  }

  export type LoadBlastCountAggregateOutputType = {
    loadId: number
    id: number
    createdAt: number
    carrierId: number
    blastType: number
    blastStatus: number
    subjectLine: number
    messageContent: number
    sentAt: number
    deliveredAt: number
    openedAt: number
    clickedAt: number
    responseReceivedAt: number
    responseType: number
    responseContent: number
    resendMessageId: number
    twilioMessageId: number
    datPostingId: number
    errorMessage: number
    retryCount: number
    createdBy: number
    _all: number
  }


  export type LoadBlastAvgAggregateInputType = {
    retryCount?: true
  }

  export type LoadBlastSumAggregateInputType = {
    retryCount?: true
  }

  export type LoadBlastMinAggregateInputType = {
    loadId?: true
    id?: true
    createdAt?: true
    carrierId?: true
    blastType?: true
    blastStatus?: true
    subjectLine?: true
    messageContent?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    responseReceivedAt?: true
    responseType?: true
    responseContent?: true
    resendMessageId?: true
    twilioMessageId?: true
    datPostingId?: true
    errorMessage?: true
    retryCount?: true
    createdBy?: true
  }

  export type LoadBlastMaxAggregateInputType = {
    loadId?: true
    id?: true
    createdAt?: true
    carrierId?: true
    blastType?: true
    blastStatus?: true
    subjectLine?: true
    messageContent?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    responseReceivedAt?: true
    responseType?: true
    responseContent?: true
    resendMessageId?: true
    twilioMessageId?: true
    datPostingId?: true
    errorMessage?: true
    retryCount?: true
    createdBy?: true
  }

  export type LoadBlastCountAggregateInputType = {
    loadId?: true
    id?: true
    createdAt?: true
    carrierId?: true
    blastType?: true
    blastStatus?: true
    subjectLine?: true
    messageContent?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    responseReceivedAt?: true
    responseType?: true
    responseContent?: true
    resendMessageId?: true
    twilioMessageId?: true
    datPostingId?: true
    errorMessage?: true
    retryCount?: true
    createdBy?: true
    _all?: true
  }

  export type LoadBlastAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoadBlast to aggregate.
     */
    where?: LoadBlastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadBlasts to fetch.
     */
    orderBy?: LoadBlastOrderByWithRelationInput | LoadBlastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoadBlastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadBlasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadBlasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoadBlasts
    **/
    _count?: true | LoadBlastCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoadBlastAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoadBlastSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoadBlastMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoadBlastMaxAggregateInputType
  }

  export type GetLoadBlastAggregateType<T extends LoadBlastAggregateArgs> = {
        [P in keyof T & keyof AggregateLoadBlast]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoadBlast[P]>
      : GetScalarType<T[P], AggregateLoadBlast[P]>
  }




  export type LoadBlastGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoadBlastWhereInput
    orderBy?: LoadBlastOrderByWithAggregationInput | LoadBlastOrderByWithAggregationInput[]
    by: LoadBlastScalarFieldEnum[] | LoadBlastScalarFieldEnum
    having?: LoadBlastScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoadBlastCountAggregateInputType | true
    _avg?: LoadBlastAvgAggregateInputType
    _sum?: LoadBlastSumAggregateInputType
    _min?: LoadBlastMinAggregateInputType
    _max?: LoadBlastMaxAggregateInputType
  }

  export type LoadBlastGroupByOutputType = {
    loadId: string | null
    id: string
    createdAt: Date
    carrierId: string | null
    blastType: string
    blastStatus: string
    subjectLine: string | null
    messageContent: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    responseReceivedAt: Date | null
    responseType: string | null
    responseContent: string | null
    resendMessageId: string | null
    twilioMessageId: string | null
    datPostingId: string | null
    errorMessage: string | null
    retryCount: number
    createdBy: string
    _count: LoadBlastCountAggregateOutputType | null
    _avg: LoadBlastAvgAggregateOutputType | null
    _sum: LoadBlastSumAggregateOutputType | null
    _min: LoadBlastMinAggregateOutputType | null
    _max: LoadBlastMaxAggregateOutputType | null
  }

  type GetLoadBlastGroupByPayload<T extends LoadBlastGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoadBlastGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoadBlastGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoadBlastGroupByOutputType[P]>
            : GetScalarType<T[P], LoadBlastGroupByOutputType[P]>
        }
      >
    >


  export type LoadBlastSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    loadId?: boolean
    id?: boolean
    createdAt?: boolean
    carrierId?: boolean
    blastType?: boolean
    blastStatus?: boolean
    subjectLine?: boolean
    messageContent?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    responseReceivedAt?: boolean
    responseType?: boolean
    responseContent?: boolean
    resendMessageId?: boolean
    twilioMessageId?: boolean
    datPostingId?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdBy?: boolean
  }, ExtArgs["result"]["loadBlast"]>

  export type LoadBlastSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    loadId?: boolean
    id?: boolean
    createdAt?: boolean
    carrierId?: boolean
    blastType?: boolean
    blastStatus?: boolean
    subjectLine?: boolean
    messageContent?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    responseReceivedAt?: boolean
    responseType?: boolean
    responseContent?: boolean
    resendMessageId?: boolean
    twilioMessageId?: boolean
    datPostingId?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdBy?: boolean
  }, ExtArgs["result"]["loadBlast"]>

  export type LoadBlastSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    loadId?: boolean
    id?: boolean
    createdAt?: boolean
    carrierId?: boolean
    blastType?: boolean
    blastStatus?: boolean
    subjectLine?: boolean
    messageContent?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    responseReceivedAt?: boolean
    responseType?: boolean
    responseContent?: boolean
    resendMessageId?: boolean
    twilioMessageId?: boolean
    datPostingId?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdBy?: boolean
  }, ExtArgs["result"]["loadBlast"]>

  export type LoadBlastSelectScalar = {
    loadId?: boolean
    id?: boolean
    createdAt?: boolean
    carrierId?: boolean
    blastType?: boolean
    blastStatus?: boolean
    subjectLine?: boolean
    messageContent?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    responseReceivedAt?: boolean
    responseType?: boolean
    responseContent?: boolean
    resendMessageId?: boolean
    twilioMessageId?: boolean
    datPostingId?: boolean
    errorMessage?: boolean
    retryCount?: boolean
    createdBy?: boolean
  }

  export type LoadBlastOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"loadId" | "id" | "createdAt" | "carrierId" | "blastType" | "blastStatus" | "subjectLine" | "messageContent" | "sentAt" | "deliveredAt" | "openedAt" | "clickedAt" | "responseReceivedAt" | "responseType" | "responseContent" | "resendMessageId" | "twilioMessageId" | "datPostingId" | "errorMessage" | "retryCount" | "createdBy", ExtArgs["result"]["loadBlast"]>

  export type $LoadBlastPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoadBlast"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      loadId: string | null
      id: string
      createdAt: Date
      carrierId: string | null
      blastType: string
      blastStatus: string
      subjectLine: string | null
      messageContent: string | null
      sentAt: Date | null
      deliveredAt: Date | null
      openedAt: Date | null
      clickedAt: Date | null
      responseReceivedAt: Date | null
      responseType: string | null
      responseContent: string | null
      resendMessageId: string | null
      twilioMessageId: string | null
      datPostingId: string | null
      errorMessage: string | null
      retryCount: number
      createdBy: string
    }, ExtArgs["result"]["loadBlast"]>
    composites: {}
  }

  type LoadBlastGetPayload<S extends boolean | null | undefined | LoadBlastDefaultArgs> = $Result.GetResult<Prisma.$LoadBlastPayload, S>

  type LoadBlastCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoadBlastFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoadBlastCountAggregateInputType | true
    }

  export interface LoadBlastDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoadBlast'], meta: { name: 'LoadBlast' } }
    /**
     * Find zero or one LoadBlast that matches the filter.
     * @param {LoadBlastFindUniqueArgs} args - Arguments to find a LoadBlast
     * @example
     * // Get one LoadBlast
     * const loadBlast = await prisma.loadBlast.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoadBlastFindUniqueArgs>(args: SelectSubset<T, LoadBlastFindUniqueArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LoadBlast that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoadBlastFindUniqueOrThrowArgs} args - Arguments to find a LoadBlast
     * @example
     * // Get one LoadBlast
     * const loadBlast = await prisma.loadBlast.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoadBlastFindUniqueOrThrowArgs>(args: SelectSubset<T, LoadBlastFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoadBlast that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastFindFirstArgs} args - Arguments to find a LoadBlast
     * @example
     * // Get one LoadBlast
     * const loadBlast = await prisma.loadBlast.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoadBlastFindFirstArgs>(args?: SelectSubset<T, LoadBlastFindFirstArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LoadBlast that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastFindFirstOrThrowArgs} args - Arguments to find a LoadBlast
     * @example
     * // Get one LoadBlast
     * const loadBlast = await prisma.loadBlast.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoadBlastFindFirstOrThrowArgs>(args?: SelectSubset<T, LoadBlastFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LoadBlasts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoadBlasts
     * const loadBlasts = await prisma.loadBlast.findMany()
     * 
     * // Get first 10 LoadBlasts
     * const loadBlasts = await prisma.loadBlast.findMany({ take: 10 })
     * 
     * // Only select the `loadId`
     * const loadBlastWithLoadIdOnly = await prisma.loadBlast.findMany({ select: { loadId: true } })
     * 
     */
    findMany<T extends LoadBlastFindManyArgs>(args?: SelectSubset<T, LoadBlastFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LoadBlast.
     * @param {LoadBlastCreateArgs} args - Arguments to create a LoadBlast.
     * @example
     * // Create one LoadBlast
     * const LoadBlast = await prisma.loadBlast.create({
     *   data: {
     *     // ... data to create a LoadBlast
     *   }
     * })
     * 
     */
    create<T extends LoadBlastCreateArgs>(args: SelectSubset<T, LoadBlastCreateArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LoadBlasts.
     * @param {LoadBlastCreateManyArgs} args - Arguments to create many LoadBlasts.
     * @example
     * // Create many LoadBlasts
     * const loadBlast = await prisma.loadBlast.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoadBlastCreateManyArgs>(args?: SelectSubset<T, LoadBlastCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LoadBlasts and returns the data saved in the database.
     * @param {LoadBlastCreateManyAndReturnArgs} args - Arguments to create many LoadBlasts.
     * @example
     * // Create many LoadBlasts
     * const loadBlast = await prisma.loadBlast.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LoadBlasts and only return the `loadId`
     * const loadBlastWithLoadIdOnly = await prisma.loadBlast.createManyAndReturn({
     *   select: { loadId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoadBlastCreateManyAndReturnArgs>(args?: SelectSubset<T, LoadBlastCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LoadBlast.
     * @param {LoadBlastDeleteArgs} args - Arguments to delete one LoadBlast.
     * @example
     * // Delete one LoadBlast
     * const LoadBlast = await prisma.loadBlast.delete({
     *   where: {
     *     // ... filter to delete one LoadBlast
     *   }
     * })
     * 
     */
    delete<T extends LoadBlastDeleteArgs>(args: SelectSubset<T, LoadBlastDeleteArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LoadBlast.
     * @param {LoadBlastUpdateArgs} args - Arguments to update one LoadBlast.
     * @example
     * // Update one LoadBlast
     * const loadBlast = await prisma.loadBlast.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoadBlastUpdateArgs>(args: SelectSubset<T, LoadBlastUpdateArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LoadBlasts.
     * @param {LoadBlastDeleteManyArgs} args - Arguments to filter LoadBlasts to delete.
     * @example
     * // Delete a few LoadBlasts
     * const { count } = await prisma.loadBlast.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoadBlastDeleteManyArgs>(args?: SelectSubset<T, LoadBlastDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoadBlasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoadBlasts
     * const loadBlast = await prisma.loadBlast.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoadBlastUpdateManyArgs>(args: SelectSubset<T, LoadBlastUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoadBlasts and returns the data updated in the database.
     * @param {LoadBlastUpdateManyAndReturnArgs} args - Arguments to update many LoadBlasts.
     * @example
     * // Update many LoadBlasts
     * const loadBlast = await prisma.loadBlast.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LoadBlasts and only return the `loadId`
     * const loadBlastWithLoadIdOnly = await prisma.loadBlast.updateManyAndReturn({
     *   select: { loadId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoadBlastUpdateManyAndReturnArgs>(args: SelectSubset<T, LoadBlastUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LoadBlast.
     * @param {LoadBlastUpsertArgs} args - Arguments to update or create a LoadBlast.
     * @example
     * // Update or create a LoadBlast
     * const loadBlast = await prisma.loadBlast.upsert({
     *   create: {
     *     // ... data to create a LoadBlast
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoadBlast we want to update
     *   }
     * })
     */
    upsert<T extends LoadBlastUpsertArgs>(args: SelectSubset<T, LoadBlastUpsertArgs<ExtArgs>>): Prisma__LoadBlastClient<$Result.GetResult<Prisma.$LoadBlastPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LoadBlasts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastCountArgs} args - Arguments to filter LoadBlasts to count.
     * @example
     * // Count the number of LoadBlasts
     * const count = await prisma.loadBlast.count({
     *   where: {
     *     // ... the filter for the LoadBlasts we want to count
     *   }
     * })
    **/
    count<T extends LoadBlastCountArgs>(
      args?: Subset<T, LoadBlastCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadBlastCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoadBlast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadBlastAggregateArgs>(args: Subset<T, LoadBlastAggregateArgs>): Prisma.PrismaPromise<GetLoadBlastAggregateType<T>>

    /**
     * Group by LoadBlast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoadBlastGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoadBlastGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoadBlastGroupByArgs['orderBy'] }
        : { orderBy?: LoadBlastGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoadBlastGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoadBlastGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoadBlast model
   */
  readonly fields: LoadBlastFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoadBlast.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoadBlastClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoadBlast model
   */
  interface LoadBlastFieldRefs {
    readonly loadId: FieldRef<"LoadBlast", 'String'>
    readonly id: FieldRef<"LoadBlast", 'String'>
    readonly createdAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly carrierId: FieldRef<"LoadBlast", 'String'>
    readonly blastType: FieldRef<"LoadBlast", 'String'>
    readonly blastStatus: FieldRef<"LoadBlast", 'String'>
    readonly subjectLine: FieldRef<"LoadBlast", 'String'>
    readonly messageContent: FieldRef<"LoadBlast", 'String'>
    readonly sentAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly deliveredAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly openedAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly clickedAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly responseReceivedAt: FieldRef<"LoadBlast", 'DateTime'>
    readonly responseType: FieldRef<"LoadBlast", 'String'>
    readonly responseContent: FieldRef<"LoadBlast", 'String'>
    readonly resendMessageId: FieldRef<"LoadBlast", 'String'>
    readonly twilioMessageId: FieldRef<"LoadBlast", 'String'>
    readonly datPostingId: FieldRef<"LoadBlast", 'String'>
    readonly errorMessage: FieldRef<"LoadBlast", 'String'>
    readonly retryCount: FieldRef<"LoadBlast", 'Int'>
    readonly createdBy: FieldRef<"LoadBlast", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LoadBlast findUnique
   */
  export type LoadBlastFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter, which LoadBlast to fetch.
     */
    where: LoadBlastWhereUniqueInput
  }

  /**
   * LoadBlast findUniqueOrThrow
   */
  export type LoadBlastFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter, which LoadBlast to fetch.
     */
    where: LoadBlastWhereUniqueInput
  }

  /**
   * LoadBlast findFirst
   */
  export type LoadBlastFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter, which LoadBlast to fetch.
     */
    where?: LoadBlastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadBlasts to fetch.
     */
    orderBy?: LoadBlastOrderByWithRelationInput | LoadBlastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoadBlasts.
     */
    cursor?: LoadBlastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadBlasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadBlasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoadBlasts.
     */
    distinct?: LoadBlastScalarFieldEnum | LoadBlastScalarFieldEnum[]
  }

  /**
   * LoadBlast findFirstOrThrow
   */
  export type LoadBlastFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter, which LoadBlast to fetch.
     */
    where?: LoadBlastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadBlasts to fetch.
     */
    orderBy?: LoadBlastOrderByWithRelationInput | LoadBlastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoadBlasts.
     */
    cursor?: LoadBlastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadBlasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadBlasts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoadBlasts.
     */
    distinct?: LoadBlastScalarFieldEnum | LoadBlastScalarFieldEnum[]
  }

  /**
   * LoadBlast findMany
   */
  export type LoadBlastFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter, which LoadBlasts to fetch.
     */
    where?: LoadBlastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoadBlasts to fetch.
     */
    orderBy?: LoadBlastOrderByWithRelationInput | LoadBlastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoadBlasts.
     */
    cursor?: LoadBlastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoadBlasts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoadBlasts.
     */
    skip?: number
    distinct?: LoadBlastScalarFieldEnum | LoadBlastScalarFieldEnum[]
  }

  /**
   * LoadBlast create
   */
  export type LoadBlastCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * The data needed to create a LoadBlast.
     */
    data: XOR<LoadBlastCreateInput, LoadBlastUncheckedCreateInput>
  }

  /**
   * LoadBlast createMany
   */
  export type LoadBlastCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoadBlasts.
     */
    data: LoadBlastCreateManyInput | LoadBlastCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoadBlast createManyAndReturn
   */
  export type LoadBlastCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * The data used to create many LoadBlasts.
     */
    data: LoadBlastCreateManyInput | LoadBlastCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LoadBlast update
   */
  export type LoadBlastUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * The data needed to update a LoadBlast.
     */
    data: XOR<LoadBlastUpdateInput, LoadBlastUncheckedUpdateInput>
    /**
     * Choose, which LoadBlast to update.
     */
    where: LoadBlastWhereUniqueInput
  }

  /**
   * LoadBlast updateMany
   */
  export type LoadBlastUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoadBlasts.
     */
    data: XOR<LoadBlastUpdateManyMutationInput, LoadBlastUncheckedUpdateManyInput>
    /**
     * Filter which LoadBlasts to update
     */
    where?: LoadBlastWhereInput
    /**
     * Limit how many LoadBlasts to update.
     */
    limit?: number
  }

  /**
   * LoadBlast updateManyAndReturn
   */
  export type LoadBlastUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * The data used to update LoadBlasts.
     */
    data: XOR<LoadBlastUpdateManyMutationInput, LoadBlastUncheckedUpdateManyInput>
    /**
     * Filter which LoadBlasts to update
     */
    where?: LoadBlastWhereInput
    /**
     * Limit how many LoadBlasts to update.
     */
    limit?: number
  }

  /**
   * LoadBlast upsert
   */
  export type LoadBlastUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * The filter to search for the LoadBlast to update in case it exists.
     */
    where: LoadBlastWhereUniqueInput
    /**
     * In case the LoadBlast found by the `where` argument doesn't exist, create a new LoadBlast with this data.
     */
    create: XOR<LoadBlastCreateInput, LoadBlastUncheckedCreateInput>
    /**
     * In case the LoadBlast was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoadBlastUpdateInput, LoadBlastUncheckedUpdateInput>
  }

  /**
   * LoadBlast delete
   */
  export type LoadBlastDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
    /**
     * Filter which LoadBlast to delete.
     */
    where: LoadBlastWhereUniqueInput
  }

  /**
   * LoadBlast deleteMany
   */
  export type LoadBlastDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoadBlasts to delete
     */
    where?: LoadBlastWhereInput
    /**
     * Limit how many LoadBlasts to delete.
     */
    limit?: number
  }

  /**
   * LoadBlast without action
   */
  export type LoadBlastDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoadBlast
     */
    select?: LoadBlastSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LoadBlast
     */
    omit?: LoadBlastOmit<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    read: boolean | null
    brokerId: string | null
    createdAt: Date | null
    message: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    read: boolean | null
    brokerId: string | null
    createdAt: Date | null
    message: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    read: number
    metadata: number
    brokerId: number
    createdAt: number
    message: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    read?: true
    brokerId?: true
    createdAt?: true
    message?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    read?: true
    brokerId?: true
    createdAt?: true
    message?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    read?: true
    metadata?: true
    brokerId?: true
    createdAt?: true
    message?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: string
    title: string
    read: boolean
    metadata: JsonValue | null
    brokerId: string
    createdAt: Date
    message: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    read?: boolean
    metadata?: boolean
    brokerId?: boolean
    createdAt?: boolean
    message?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    read?: boolean
    metadata?: boolean
    brokerId?: boolean
    createdAt?: boolean
    message?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    read?: boolean
    metadata?: boolean
    brokerId?: boolean
    createdAt?: boolean
    message?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    read?: boolean
    metadata?: boolean
    brokerId?: boolean
    createdAt?: boolean
    message?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "read" | "metadata" | "brokerId" | "createdAt" | "message", ExtArgs["result"]["notification"]>

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      read: boolean
      metadata: Prisma.JsonValue | null
      brokerId: string
      createdAt: Date
      message: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly brokerId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly message: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
  }


  /**
   * Model OAuthState
   */

  export type AggregateOAuthState = {
    _count: OAuthStateCountAggregateOutputType | null
    _min: OAuthStateMinAggregateOutputType | null
    _max: OAuthStateMaxAggregateOutputType | null
  }

  export type OAuthStateMinAggregateOutputType = {
    createdAt: Date | null
    userId: string | null
    expiresAt: Date | null
    state: string | null
    provider: string | null
  }

  export type OAuthStateMaxAggregateOutputType = {
    createdAt: Date | null
    userId: string | null
    expiresAt: Date | null
    state: string | null
    provider: string | null
  }

  export type OAuthStateCountAggregateOutputType = {
    createdAt: number
    userId: number
    expiresAt: number
    state: number
    provider: number
    _all: number
  }


  export type OAuthStateMinAggregateInputType = {
    createdAt?: true
    userId?: true
    expiresAt?: true
    state?: true
    provider?: true
  }

  export type OAuthStateMaxAggregateInputType = {
    createdAt?: true
    userId?: true
    expiresAt?: true
    state?: true
    provider?: true
  }

  export type OAuthStateCountAggregateInputType = {
    createdAt?: true
    userId?: true
    expiresAt?: true
    state?: true
    provider?: true
    _all?: true
  }

  export type OAuthStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthState to aggregate.
     */
    where?: OAuthStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthStates to fetch.
     */
    orderBy?: OAuthStateOrderByWithRelationInput | OAuthStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OAuthStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OAuthStates
    **/
    _count?: true | OAuthStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OAuthStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OAuthStateMaxAggregateInputType
  }

  export type GetOAuthStateAggregateType<T extends OAuthStateAggregateArgs> = {
        [P in keyof T & keyof AggregateOAuthState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOAuthState[P]>
      : GetScalarType<T[P], AggregateOAuthState[P]>
  }




  export type OAuthStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OAuthStateWhereInput
    orderBy?: OAuthStateOrderByWithAggregationInput | OAuthStateOrderByWithAggregationInput[]
    by: OAuthStateScalarFieldEnum[] | OAuthStateScalarFieldEnum
    having?: OAuthStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OAuthStateCountAggregateInputType | true
    _min?: OAuthStateMinAggregateInputType
    _max?: OAuthStateMaxAggregateInputType
  }

  export type OAuthStateGroupByOutputType = {
    createdAt: Date
    userId: string
    expiresAt: Date
    state: string
    provider: string
    _count: OAuthStateCountAggregateOutputType | null
    _min: OAuthStateMinAggregateOutputType | null
    _max: OAuthStateMaxAggregateOutputType | null
  }

  type GetOAuthStateGroupByPayload<T extends OAuthStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OAuthStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OAuthStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OAuthStateGroupByOutputType[P]>
            : GetScalarType<T[P], OAuthStateGroupByOutputType[P]>
        }
      >
    >


  export type OAuthStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    userId?: boolean
    expiresAt?: boolean
    state?: boolean
    provider?: boolean
  }, ExtArgs["result"]["oAuthState"]>

  export type OAuthStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    userId?: boolean
    expiresAt?: boolean
    state?: boolean
    provider?: boolean
  }, ExtArgs["result"]["oAuthState"]>

  export type OAuthStateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    userId?: boolean
    expiresAt?: boolean
    state?: boolean
    provider?: boolean
  }, ExtArgs["result"]["oAuthState"]>

  export type OAuthStateSelectScalar = {
    createdAt?: boolean
    userId?: boolean
    expiresAt?: boolean
    state?: boolean
    provider?: boolean
  }

  export type OAuthStateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"createdAt" | "userId" | "expiresAt" | "state" | "provider", ExtArgs["result"]["oAuthState"]>

  export type $OAuthStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OAuthState"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      userId: string
      expiresAt: Date
      state: string
      provider: string
    }, ExtArgs["result"]["oAuthState"]>
    composites: {}
  }

  type OAuthStateGetPayload<S extends boolean | null | undefined | OAuthStateDefaultArgs> = $Result.GetResult<Prisma.$OAuthStatePayload, S>

  type OAuthStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OAuthStateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OAuthStateCountAggregateInputType | true
    }

  export interface OAuthStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OAuthState'], meta: { name: 'OAuthState' } }
    /**
     * Find zero or one OAuthState that matches the filter.
     * @param {OAuthStateFindUniqueArgs} args - Arguments to find a OAuthState
     * @example
     * // Get one OAuthState
     * const oAuthState = await prisma.oAuthState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OAuthStateFindUniqueArgs>(args: SelectSubset<T, OAuthStateFindUniqueArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OAuthState that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OAuthStateFindUniqueOrThrowArgs} args - Arguments to find a OAuthState
     * @example
     * // Get one OAuthState
     * const oAuthState = await prisma.oAuthState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OAuthStateFindUniqueOrThrowArgs>(args: SelectSubset<T, OAuthStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OAuthState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateFindFirstArgs} args - Arguments to find a OAuthState
     * @example
     * // Get one OAuthState
     * const oAuthState = await prisma.oAuthState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OAuthStateFindFirstArgs>(args?: SelectSubset<T, OAuthStateFindFirstArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OAuthState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateFindFirstOrThrowArgs} args - Arguments to find a OAuthState
     * @example
     * // Get one OAuthState
     * const oAuthState = await prisma.oAuthState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OAuthStateFindFirstOrThrowArgs>(args?: SelectSubset<T, OAuthStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OAuthStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OAuthStates
     * const oAuthStates = await prisma.oAuthState.findMany()
     * 
     * // Get first 10 OAuthStates
     * const oAuthStates = await prisma.oAuthState.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const oAuthStateWithCreatedAtOnly = await prisma.oAuthState.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends OAuthStateFindManyArgs>(args?: SelectSubset<T, OAuthStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OAuthState.
     * @param {OAuthStateCreateArgs} args - Arguments to create a OAuthState.
     * @example
     * // Create one OAuthState
     * const OAuthState = await prisma.oAuthState.create({
     *   data: {
     *     // ... data to create a OAuthState
     *   }
     * })
     * 
     */
    create<T extends OAuthStateCreateArgs>(args: SelectSubset<T, OAuthStateCreateArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OAuthStates.
     * @param {OAuthStateCreateManyArgs} args - Arguments to create many OAuthStates.
     * @example
     * // Create many OAuthStates
     * const oAuthState = await prisma.oAuthState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OAuthStateCreateManyArgs>(args?: SelectSubset<T, OAuthStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OAuthStates and returns the data saved in the database.
     * @param {OAuthStateCreateManyAndReturnArgs} args - Arguments to create many OAuthStates.
     * @example
     * // Create many OAuthStates
     * const oAuthState = await prisma.oAuthState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OAuthStates and only return the `createdAt`
     * const oAuthStateWithCreatedAtOnly = await prisma.oAuthState.createManyAndReturn({
     *   select: { createdAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OAuthStateCreateManyAndReturnArgs>(args?: SelectSubset<T, OAuthStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OAuthState.
     * @param {OAuthStateDeleteArgs} args - Arguments to delete one OAuthState.
     * @example
     * // Delete one OAuthState
     * const OAuthState = await prisma.oAuthState.delete({
     *   where: {
     *     // ... filter to delete one OAuthState
     *   }
     * })
     * 
     */
    delete<T extends OAuthStateDeleteArgs>(args: SelectSubset<T, OAuthStateDeleteArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OAuthState.
     * @param {OAuthStateUpdateArgs} args - Arguments to update one OAuthState.
     * @example
     * // Update one OAuthState
     * const oAuthState = await prisma.oAuthState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OAuthStateUpdateArgs>(args: SelectSubset<T, OAuthStateUpdateArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OAuthStates.
     * @param {OAuthStateDeleteManyArgs} args - Arguments to filter OAuthStates to delete.
     * @example
     * // Delete a few OAuthStates
     * const { count } = await prisma.oAuthState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OAuthStateDeleteManyArgs>(args?: SelectSubset<T, OAuthStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OAuthStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OAuthStates
     * const oAuthState = await prisma.oAuthState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OAuthStateUpdateManyArgs>(args: SelectSubset<T, OAuthStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OAuthStates and returns the data updated in the database.
     * @param {OAuthStateUpdateManyAndReturnArgs} args - Arguments to update many OAuthStates.
     * @example
     * // Update many OAuthStates
     * const oAuthState = await prisma.oAuthState.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OAuthStates and only return the `createdAt`
     * const oAuthStateWithCreatedAtOnly = await prisma.oAuthState.updateManyAndReturn({
     *   select: { createdAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OAuthStateUpdateManyAndReturnArgs>(args: SelectSubset<T, OAuthStateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OAuthState.
     * @param {OAuthStateUpsertArgs} args - Arguments to update or create a OAuthState.
     * @example
     * // Update or create a OAuthState
     * const oAuthState = await prisma.oAuthState.upsert({
     *   create: {
     *     // ... data to create a OAuthState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OAuthState we want to update
     *   }
     * })
     */
    upsert<T extends OAuthStateUpsertArgs>(args: SelectSubset<T, OAuthStateUpsertArgs<ExtArgs>>): Prisma__OAuthStateClient<$Result.GetResult<Prisma.$OAuthStatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OAuthStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateCountArgs} args - Arguments to filter OAuthStates to count.
     * @example
     * // Count the number of OAuthStates
     * const count = await prisma.oAuthState.count({
     *   where: {
     *     // ... the filter for the OAuthStates we want to count
     *   }
     * })
    **/
    count<T extends OAuthStateCountArgs>(
      args?: Subset<T, OAuthStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OAuthStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OAuthState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OAuthStateAggregateArgs>(args: Subset<T, OAuthStateAggregateArgs>): Prisma.PrismaPromise<GetOAuthStateAggregateType<T>>

    /**
     * Group by OAuthState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OAuthStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OAuthStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OAuthStateGroupByArgs['orderBy'] }
        : { orderBy?: OAuthStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OAuthStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOAuthStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OAuthState model
   */
  readonly fields: OAuthStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OAuthState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OAuthStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OAuthState model
   */
  interface OAuthStateFieldRefs {
    readonly createdAt: FieldRef<"OAuthState", 'DateTime'>
    readonly userId: FieldRef<"OAuthState", 'String'>
    readonly expiresAt: FieldRef<"OAuthState", 'DateTime'>
    readonly state: FieldRef<"OAuthState", 'String'>
    readonly provider: FieldRef<"OAuthState", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OAuthState findUnique
   */
  export type OAuthStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter, which OAuthState to fetch.
     */
    where: OAuthStateWhereUniqueInput
  }

  /**
   * OAuthState findUniqueOrThrow
   */
  export type OAuthStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter, which OAuthState to fetch.
     */
    where: OAuthStateWhereUniqueInput
  }

  /**
   * OAuthState findFirst
   */
  export type OAuthStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter, which OAuthState to fetch.
     */
    where?: OAuthStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthStates to fetch.
     */
    orderBy?: OAuthStateOrderByWithRelationInput | OAuthStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthStates.
     */
    cursor?: OAuthStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthStates.
     */
    distinct?: OAuthStateScalarFieldEnum | OAuthStateScalarFieldEnum[]
  }

  /**
   * OAuthState findFirstOrThrow
   */
  export type OAuthStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter, which OAuthState to fetch.
     */
    where?: OAuthStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthStates to fetch.
     */
    orderBy?: OAuthStateOrderByWithRelationInput | OAuthStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OAuthStates.
     */
    cursor?: OAuthStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OAuthStates.
     */
    distinct?: OAuthStateScalarFieldEnum | OAuthStateScalarFieldEnum[]
  }

  /**
   * OAuthState findMany
   */
  export type OAuthStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter, which OAuthStates to fetch.
     */
    where?: OAuthStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OAuthStates to fetch.
     */
    orderBy?: OAuthStateOrderByWithRelationInput | OAuthStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OAuthStates.
     */
    cursor?: OAuthStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OAuthStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OAuthStates.
     */
    skip?: number
    distinct?: OAuthStateScalarFieldEnum | OAuthStateScalarFieldEnum[]
  }

  /**
   * OAuthState create
   */
  export type OAuthStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * The data needed to create a OAuthState.
     */
    data: XOR<OAuthStateCreateInput, OAuthStateUncheckedCreateInput>
  }

  /**
   * OAuthState createMany
   */
  export type OAuthStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OAuthStates.
     */
    data: OAuthStateCreateManyInput | OAuthStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OAuthState createManyAndReturn
   */
  export type OAuthStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * The data used to create many OAuthStates.
     */
    data: OAuthStateCreateManyInput | OAuthStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OAuthState update
   */
  export type OAuthStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * The data needed to update a OAuthState.
     */
    data: XOR<OAuthStateUpdateInput, OAuthStateUncheckedUpdateInput>
    /**
     * Choose, which OAuthState to update.
     */
    where: OAuthStateWhereUniqueInput
  }

  /**
   * OAuthState updateMany
   */
  export type OAuthStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OAuthStates.
     */
    data: XOR<OAuthStateUpdateManyMutationInput, OAuthStateUncheckedUpdateManyInput>
    /**
     * Filter which OAuthStates to update
     */
    where?: OAuthStateWhereInput
    /**
     * Limit how many OAuthStates to update.
     */
    limit?: number
  }

  /**
   * OAuthState updateManyAndReturn
   */
  export type OAuthStateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * The data used to update OAuthStates.
     */
    data: XOR<OAuthStateUpdateManyMutationInput, OAuthStateUncheckedUpdateManyInput>
    /**
     * Filter which OAuthStates to update
     */
    where?: OAuthStateWhereInput
    /**
     * Limit how many OAuthStates to update.
     */
    limit?: number
  }

  /**
   * OAuthState upsert
   */
  export type OAuthStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * The filter to search for the OAuthState to update in case it exists.
     */
    where: OAuthStateWhereUniqueInput
    /**
     * In case the OAuthState found by the `where` argument doesn't exist, create a new OAuthState with this data.
     */
    create: XOR<OAuthStateCreateInput, OAuthStateUncheckedCreateInput>
    /**
     * In case the OAuthState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OAuthStateUpdateInput, OAuthStateUncheckedUpdateInput>
  }

  /**
   * OAuthState delete
   */
  export type OAuthStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
    /**
     * Filter which OAuthState to delete.
     */
    where: OAuthStateWhereUniqueInput
  }

  /**
   * OAuthState deleteMany
   */
  export type OAuthStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OAuthStates to delete
     */
    where?: OAuthStateWhereInput
    /**
     * Limit how many OAuthStates to delete.
     */
    limit?: number
  }

  /**
   * OAuthState without action
   */
  export type OAuthStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OAuthState
     */
    select?: OAuthStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OAuthState
     */
    omit?: OAuthStateOmit<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    updatedAt: Date | null
    id: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    updatedAt: Date | null
    id: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type UserSettingsCountAggregateOutputType = {
    updatedAt: number
    confidenceThresholds: number
    id: number
    notifications: number
    createdAt: number
    userId: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    updatedAt?: true
    id?: true
    createdAt?: true
    userId?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    updatedAt?: true
    id?: true
    createdAt?: true
    userId?: true
  }

  export type UserSettingsCountAggregateInputType = {
    updatedAt?: true
    confidenceThresholds?: true
    id?: true
    notifications?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    updatedAt: Date
    confidenceThresholds: JsonValue
    id: string
    notifications: JsonValue
    createdAt: Date
    userId: string
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    confidenceThresholds?: boolean
    id?: boolean
    notifications?: boolean
    createdAt?: boolean
    userId?: boolean
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    confidenceThresholds?: boolean
    id?: boolean
    notifications?: boolean
    createdAt?: boolean
    userId?: boolean
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    updatedAt?: boolean
    confidenceThresholds?: boolean
    id?: boolean
    notifications?: boolean
    createdAt?: boolean
    userId?: boolean
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    updatedAt?: boolean
    confidenceThresholds?: boolean
    id?: boolean
    notifications?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type UserSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"updatedAt" | "confidenceThresholds" | "id" | "notifications" | "createdAt" | "userId", ExtArgs["result"]["userSettings"]>

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      updatedAt: Date
      confidenceThresholds: Prisma.JsonValue
      id: string
      notifications: Prisma.JsonValue
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `updatedAt`
     * const userSettingsWithUpdatedAtOnly = await prisma.userSettings.findMany({ select: { updatedAt: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `updatedAt`
     * const userSettingsWithUpdatedAtOnly = await prisma.userSettings.createManyAndReturn({
     *   select: { updatedAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings and returns the data updated in the database.
     * @param {UserSettingsUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSettings and only return the `updatedAt`
     * const userSettingsWithUpdatedAtOnly = await prisma.userSettings.updateManyAndReturn({
     *   select: { updatedAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */
  interface UserSettingsFieldRefs {
    readonly updatedAt: FieldRef<"UserSettings", 'DateTime'>
    readonly confidenceThresholds: FieldRef<"UserSettings", 'Json'>
    readonly id: FieldRef<"UserSettings", 'String'>
    readonly notifications: FieldRef<"UserSettings", 'Json'>
    readonly createdAt: FieldRef<"UserSettings", 'DateTime'>
    readonly userId: FieldRef<"UserSettings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSettings updateManyAndReturn
   */
  export type UserSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to delete.
     */
    limit?: number
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    lastProvider: 'lastProvider',
    lastLogin: 'lastLogin',
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    provider: 'provider',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BrokerScalarFieldEnum: {
    updatedAt: 'updatedAt',
    email: 'email',
    preferences: 'preferences',
    createdAt: 'createdAt',
    oauthTokens: 'oauthTokens',
    apiKeys: 'apiKeys',
    id: 'id',
    companyName: 'companyName',
    userId: 'userId',
    subscriptionTier: 'subscriptionTier'
  };

  export type BrokerScalarFieldEnum = (typeof BrokerScalarFieldEnum)[keyof typeof BrokerScalarFieldEnum]


  export const EmailConnectionScalarFieldEnum: {
    oauthRefreshToken: 'oauthRefreshToken',
    provider: 'provider',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    errorMessage: 'errorMessage',
    brokerId: 'brokerId',
    imapPasswordEncrypted: 'imapPasswordEncrypted',
    oauthTokenExpiresAt: 'oauthTokenExpiresAt',
    status: 'status',
    imapHost: 'imapHost',
    imapUseSsl: 'imapUseSsl',
    isPrimary: 'isPrimary',
    userId: 'userId',
    oauthAccessToken: 'oauthAccessToken',
    lastChecked: 'lastChecked',
    id: 'id',
    email: 'email',
    imapPort: 'imapPort',
    imapUsername: 'imapUsername'
  };

  export type EmailConnectionScalarFieldEnum = (typeof EmailConnectionScalarFieldEnum)[keyof typeof EmailConnectionScalarFieldEnum]


  export const LoadScalarFieldEnum: {
    brokerReviewedAt: 'brokerReviewedAt',
    brokerReviewNotes: 'brokerReviewNotes',
    weightLb: 'weightLb',
    shipperName: 'shipperName',
    equipment: 'equipment',
    complexityOverrides: 'complexityOverrides',
    pickupDt: 'pickupDt',
    shipperEmail: 'shipperEmail',
    destZip: 'destZip',
    shipperPhone: 'shipperPhone',
    commodity: 'commodity',
    originZip: 'originZip',
    sourceEmailId: 'sourceEmailId',
    status: 'status',
    reviewedBy: 'reviewedBy',
    riskScore: 'riskScore',
    loadNumber: 'loadNumber',
    sourceType: 'sourceType',
    sourceEmailAccountId: 'sourceEmailAccountId',
    rawEmailText: 'rawEmailText',
    updatedAt: 'updatedAt',
    extractionConfidence: 'extractionConfidence',
    brokerId: 'brokerId',
    missingFields: 'missingFields',
    aiNotes: 'aiNotes',
    marginTarget: 'marginTarget',
    createdAt: 'createdAt',
    priorityLevel: 'priorityLevel',
    createdBy: 'createdBy',
    modifiedBy: 'modifiedBy',
    postToCarriers: 'postToCarriers',
    postToDat: 'postToDat',
    postingDelayMinutes: 'postingDelayMinutes',
    maxCarriersToContact: 'maxCarriersToContact',
    id: 'id',
    preferredRatePerMile: 'preferredRatePerMile',
    complexityFlags: 'complexityFlags',
    requiresHumanReview: 'requiresHumanReview',
    reviewReason: 'reviewReason',
    complexityAnalysis: 'complexityAnalysis',
    brokerReviewStatus: 'brokerReviewStatus',
    assignedSpecialist: 'assignedSpecialist',
    hazmat: 'hazmat',
    totalMiles: 'totalMiles',
    ratePerMile: 'ratePerMile'
  };

  export type LoadScalarFieldEnum = (typeof LoadScalarFieldEnum)[keyof typeof LoadScalarFieldEnum]


  export const CarrierScalarFieldEnum: {
    updatedAt: 'updatedAt',
    lastContactDate: 'lastContactDate',
    serviceAreas: 'serviceAreas',
    creditRating: 'creditRating',
    createdBy: 'createdBy',
    loadsCompleted: 'loadsCompleted',
    insuranceExpiry: 'insuranceExpiry',
    contactPhone: 'contactPhone',
    preferenceTier: 'preferenceTier',
    createdAt: 'createdAt',
    contactEmail: 'contactEmail',
    notes: 'notes',
    averageRatePerMile: 'averageRatePerMile',
    modifiedBy: 'modifiedBy',
    loadsAccepted: 'loadsAccepted',
    smsEnabled: 'smsEnabled',
    contactName: 'contactName',
    dotNumber: 'dotNumber',
    id: 'id',
    carrierName: 'carrierName',
    isPreferred: 'isPreferred',
    equipmentTypes: 'equipmentTypes',
    status: 'status',
    mcNumber: 'mcNumber',
    phoneNumber: 'phoneNumber',
    emailEnabled: 'emailEnabled',
    loadsOffered: 'loadsOffered'
  };

  export type CarrierScalarFieldEnum = (typeof CarrierScalarFieldEnum)[keyof typeof CarrierScalarFieldEnum]


  export const QuoteScalarFieldEnum: {
    responseMethod: 'responseMethod',
    sentAt: 'sentAt',
    ratePerMile: 'ratePerMile',
    updatedAt: 'updatedAt',
    rate: 'rate',
    status: 'status',
    id: 'id',
    respondedAt: 'respondedAt',
    carrierMc: 'carrierMc',
    createdAt: 'createdAt',
    loadId: 'loadId',
    carrierId: 'carrierId',
    carrierName: 'carrierName',
    validUntil: 'validUntil',
    carrierEmail: 'carrierEmail',
    notes: 'notes',
    carrierPhone: 'carrierPhone'
  };

  export type QuoteScalarFieldEnum = (typeof QuoteScalarFieldEnum)[keyof typeof QuoteScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    createdAt: 'createdAt',
    role: 'role',
    loadId: 'loadId',
    content: 'content',
    id: 'id',
    brokerId: 'brokerId',
    metadata: 'metadata'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const CommunicationScalarFieldEnum: {
    threadId: 'threadId',
    aiGenerated: 'aiGenerated',
    id: 'id',
    loadId: 'loadId',
    updatedAt: 'updatedAt',
    brokerId: 'brokerId',
    createdAt: 'createdAt',
    status: 'status',
    oauthProvider: 'oauthProvider',
    parentMessageId: 'parentMessageId',
    inReplyTo: 'inReplyTo',
    channel: 'channel',
    direction: 'direction',
    messageId: 'messageId',
    extractedData: 'extractedData',
    fromAddress: 'fromAddress',
    toAddress: 'toAddress',
    ccAddresses: 'ccAddresses',
    aiConfidence: 'aiConfidence',
    subject: 'subject',
    content: 'content',
    attachments: 'attachments'
  };

  export type CommunicationScalarFieldEnum = (typeof CommunicationScalarFieldEnum)[keyof typeof CommunicationScalarFieldEnum]


  export const EmailAccountScalarFieldEnum: {
    imapPassword: 'imapPassword',
    oauthScope: 'oauthScope',
    imapUseTls: 'imapUseTls',
    imapPort: 'imapPort',
    tokenExpiresAt: 'tokenExpiresAt',
    webhookSubscriptionId: 'webhookSubscriptionId',
    updatedAt: 'updatedAt',
    emailAddress: 'emailAddress',
    lastSyncAt: 'lastSyncAt',
    webhookSecret: 'webhookSecret',
    lastError: 'lastError',
    webhookExpiresAt: 'webhookExpiresAt',
    imapHost: 'imapHost',
    createdAt: 'createdAt',
    errorCount: 'errorCount',
    tenantId: 'tenantId',
    monitorFolders: 'monitorFolders',
    brokerId: 'brokerId',
    processingEnabled: 'processingEnabled',
    autoReplyEnabled: 'autoReplyEnabled',
    accessToken: 'accessToken',
    senderWhitelist: 'senderWhitelist',
    id: 'id',
    createdBy: 'createdBy',
    refreshToken: 'refreshToken',
    senderBlacklist: 'senderBlacklist',
    clientId: 'clientId',
    subjectFilters: 'subjectFilters',
    displayName: 'displayName',
    imapUsername: 'imapUsername',
    provider: 'provider',
    status: 'status'
  };

  export type EmailAccountScalarFieldEnum = (typeof EmailAccountScalarFieldEnum)[keyof typeof EmailAccountScalarFieldEnum]


  export const EmailProcessingLogScalarFieldEnum: {
    subject: 'subject',
    emailBodyText: 'emailBodyText',
    complexityFlags: 'complexityFlags',
    threadId: 'threadId',
    createdAt: 'createdAt',
    processingStatus: 'processingStatus',
    rawEmailHeaders: 'rawEmailHeaders',
    emailAccountId: 'emailAccountId',
    id: 'id',
    retryCount: 'retryCount',
    emailBodyHtml: 'emailBodyHtml',
    attachmentsInfo: 'attachmentsInfo',
    errorDetails: 'errorDetails',
    receivedAt: 'receivedAt',
    messageId: 'messageId',
    extractionConfidence: 'extractionConfidence',
    senderEmail: 'senderEmail',
    brokerId: 'brokerId',
    intentClassification: 'intentClassification',
    loadId: 'loadId',
    loadNumber: 'loadNumber',
    errorMessage: 'errorMessage',
    processedAt: 'processedAt'
  };

  export type EmailProcessingLogScalarFieldEnum = (typeof EmailProcessingLogScalarFieldEnum)[keyof typeof EmailProcessingLogScalarFieldEnum]


  export const EmailScalarFieldEnum: {
    messageId: 'messageId',
    rawData: 'rawData',
    content: 'content',
    processedAt: 'processedAt',
    subject: 'subject',
    provider: 'provider',
    fromAddress: 'fromAddress',
    status: 'status',
    receivedAt: 'receivedAt',
    createdAt: 'createdAt',
    id: 'id',
    brokerId: 'brokerId',
    toAddress: 'toAddress'
  };

  export type EmailScalarFieldEnum = (typeof EmailScalarFieldEnum)[keyof typeof EmailScalarFieldEnum]


  export const LoadBlastScalarFieldEnum: {
    loadId: 'loadId',
    id: 'id',
    createdAt: 'createdAt',
    carrierId: 'carrierId',
    blastType: 'blastType',
    blastStatus: 'blastStatus',
    subjectLine: 'subjectLine',
    messageContent: 'messageContent',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    openedAt: 'openedAt',
    clickedAt: 'clickedAt',
    responseReceivedAt: 'responseReceivedAt',
    responseType: 'responseType',
    responseContent: 'responseContent',
    resendMessageId: 'resendMessageId',
    twilioMessageId: 'twilioMessageId',
    datPostingId: 'datPostingId',
    errorMessage: 'errorMessage',
    retryCount: 'retryCount',
    createdBy: 'createdBy'
  };

  export type LoadBlastScalarFieldEnum = (typeof LoadBlastScalarFieldEnum)[keyof typeof LoadBlastScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    read: 'read',
    metadata: 'metadata',
    brokerId: 'brokerId',
    createdAt: 'createdAt',
    message: 'message'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const OAuthStateScalarFieldEnum: {
    createdAt: 'createdAt',
    userId: 'userId',
    expiresAt: 'expiresAt',
    state: 'state',
    provider: 'provider'
  };

  export type OAuthStateScalarFieldEnum = (typeof OAuthStateScalarFieldEnum)[keyof typeof OAuthStateScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    updatedAt: 'updatedAt',
    confidenceThresholds: 'confidenceThresholds',
    id: 'id',
    notifications: 'notifications',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    lastProvider?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    id?: UuidFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    name?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    lastProvider?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    email?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    lastProvider?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    name?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
  }, "id">

  export type UserOrderByWithAggregationInput = {
    lastProvider?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    lastProvider?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    id?: UuidWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
  }

  export type BrokerWhereInput = {
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    updatedAt?: DateTimeFilter<"Broker"> | Date | string
    email?: StringFilter<"Broker"> | string
    preferences?: JsonFilter<"Broker">
    createdAt?: DateTimeFilter<"Broker"> | Date | string
    oauthTokens?: JsonFilter<"Broker">
    apiKeys?: JsonFilter<"Broker">
    id?: UuidFilter<"Broker"> | string
    companyName?: StringFilter<"Broker"> | string
    userId?: UuidNullableFilter<"Broker"> | string | null
    subscriptionTier?: StringFilter<"Broker"> | string
  }

  export type BrokerOrderByWithRelationInput = {
    updatedAt?: SortOrder
    email?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    oauthTokens?: SortOrder
    apiKeys?: SortOrder
    id?: SortOrder
    companyName?: SortOrder
    userId?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrder
  }

  export type BrokerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    updatedAt?: DateTimeFilter<"Broker"> | Date | string
    email?: StringFilter<"Broker"> | string
    preferences?: JsonFilter<"Broker">
    createdAt?: DateTimeFilter<"Broker"> | Date | string
    oauthTokens?: JsonFilter<"Broker">
    apiKeys?: JsonFilter<"Broker">
    companyName?: StringFilter<"Broker"> | string
    userId?: UuidNullableFilter<"Broker"> | string | null
    subscriptionTier?: StringFilter<"Broker"> | string
  }, "id">

  export type BrokerOrderByWithAggregationInput = {
    updatedAt?: SortOrder
    email?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    oauthTokens?: SortOrder
    apiKeys?: SortOrder
    id?: SortOrder
    companyName?: SortOrder
    userId?: SortOrderInput | SortOrder
    subscriptionTier?: SortOrder
    _count?: BrokerCountOrderByAggregateInput
    _max?: BrokerMaxOrderByAggregateInput
    _min?: BrokerMinOrderByAggregateInput
  }

  export type BrokerScalarWhereWithAggregatesInput = {
    AND?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    OR?: BrokerScalarWhereWithAggregatesInput[]
    NOT?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    updatedAt?: DateTimeWithAggregatesFilter<"Broker"> | Date | string
    email?: StringWithAggregatesFilter<"Broker"> | string
    preferences?: JsonWithAggregatesFilter<"Broker">
    createdAt?: DateTimeWithAggregatesFilter<"Broker"> | Date | string
    oauthTokens?: JsonWithAggregatesFilter<"Broker">
    apiKeys?: JsonWithAggregatesFilter<"Broker">
    id?: UuidWithAggregatesFilter<"Broker"> | string
    companyName?: StringWithAggregatesFilter<"Broker"> | string
    userId?: UuidNullableWithAggregatesFilter<"Broker"> | string | null
    subscriptionTier?: StringWithAggregatesFilter<"Broker"> | string
  }

  export type EmailConnectionWhereInput = {
    AND?: EmailConnectionWhereInput | EmailConnectionWhereInput[]
    OR?: EmailConnectionWhereInput[]
    NOT?: EmailConnectionWhereInput | EmailConnectionWhereInput[]
    oauthRefreshToken?: StringNullableFilter<"EmailConnection"> | string | null
    provider?: StringFilter<"EmailConnection"> | string
    updatedAt?: DateTimeFilter<"EmailConnection"> | Date | string
    createdAt?: DateTimeFilter<"EmailConnection"> | Date | string
    errorMessage?: StringNullableFilter<"EmailConnection"> | string | null
    brokerId?: UuidFilter<"EmailConnection"> | string
    imapPasswordEncrypted?: StringNullableFilter<"EmailConnection"> | string | null
    oauthTokenExpiresAt?: DateTimeNullableFilter<"EmailConnection"> | Date | string | null
    status?: StringFilter<"EmailConnection"> | string
    imapHost?: StringNullableFilter<"EmailConnection"> | string | null
    imapUseSsl?: BoolFilter<"EmailConnection"> | boolean
    isPrimary?: BoolFilter<"EmailConnection"> | boolean
    userId?: UuidNullableFilter<"EmailConnection"> | string | null
    oauthAccessToken?: StringNullableFilter<"EmailConnection"> | string | null
    lastChecked?: DateTimeNullableFilter<"EmailConnection"> | Date | string | null
    id?: UuidFilter<"EmailConnection"> | string
    email?: StringFilter<"EmailConnection"> | string
    imapPort?: IntNullableFilter<"EmailConnection"> | number | null
    imapUsername?: StringNullableFilter<"EmailConnection"> | string | null
  }

  export type EmailConnectionOrderByWithRelationInput = {
    oauthRefreshToken?: SortOrderInput | SortOrder
    provider?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    imapPasswordEncrypted?: SortOrderInput | SortOrder
    oauthTokenExpiresAt?: SortOrderInput | SortOrder
    status?: SortOrder
    imapHost?: SortOrderInput | SortOrder
    imapUseSsl?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrderInput | SortOrder
    oauthAccessToken?: SortOrderInput | SortOrder
    lastChecked?: SortOrderInput | SortOrder
    id?: SortOrder
    email?: SortOrder
    imapPort?: SortOrderInput | SortOrder
    imapUsername?: SortOrderInput | SortOrder
  }

  export type EmailConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_provider_email?: EmailConnectionUserIdProviderEmailCompoundUniqueInput
    AND?: EmailConnectionWhereInput | EmailConnectionWhereInput[]
    OR?: EmailConnectionWhereInput[]
    NOT?: EmailConnectionWhereInput | EmailConnectionWhereInput[]
    oauthRefreshToken?: StringNullableFilter<"EmailConnection"> | string | null
    provider?: StringFilter<"EmailConnection"> | string
    updatedAt?: DateTimeFilter<"EmailConnection"> | Date | string
    createdAt?: DateTimeFilter<"EmailConnection"> | Date | string
    errorMessage?: StringNullableFilter<"EmailConnection"> | string | null
    brokerId?: UuidFilter<"EmailConnection"> | string
    imapPasswordEncrypted?: StringNullableFilter<"EmailConnection"> | string | null
    oauthTokenExpiresAt?: DateTimeNullableFilter<"EmailConnection"> | Date | string | null
    status?: StringFilter<"EmailConnection"> | string
    imapHost?: StringNullableFilter<"EmailConnection"> | string | null
    imapUseSsl?: BoolFilter<"EmailConnection"> | boolean
    isPrimary?: BoolFilter<"EmailConnection"> | boolean
    userId?: UuidNullableFilter<"EmailConnection"> | string | null
    oauthAccessToken?: StringNullableFilter<"EmailConnection"> | string | null
    lastChecked?: DateTimeNullableFilter<"EmailConnection"> | Date | string | null
    email?: StringFilter<"EmailConnection"> | string
    imapPort?: IntNullableFilter<"EmailConnection"> | number | null
    imapUsername?: StringNullableFilter<"EmailConnection"> | string | null
  }, "id" | "userId_provider_email">

  export type EmailConnectionOrderByWithAggregationInput = {
    oauthRefreshToken?: SortOrderInput | SortOrder
    provider?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    imapPasswordEncrypted?: SortOrderInput | SortOrder
    oauthTokenExpiresAt?: SortOrderInput | SortOrder
    status?: SortOrder
    imapHost?: SortOrderInput | SortOrder
    imapUseSsl?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrderInput | SortOrder
    oauthAccessToken?: SortOrderInput | SortOrder
    lastChecked?: SortOrderInput | SortOrder
    id?: SortOrder
    email?: SortOrder
    imapPort?: SortOrderInput | SortOrder
    imapUsername?: SortOrderInput | SortOrder
    _count?: EmailConnectionCountOrderByAggregateInput
    _avg?: EmailConnectionAvgOrderByAggregateInput
    _max?: EmailConnectionMaxOrderByAggregateInput
    _min?: EmailConnectionMinOrderByAggregateInput
    _sum?: EmailConnectionSumOrderByAggregateInput
  }

  export type EmailConnectionScalarWhereWithAggregatesInput = {
    AND?: EmailConnectionScalarWhereWithAggregatesInput | EmailConnectionScalarWhereWithAggregatesInput[]
    OR?: EmailConnectionScalarWhereWithAggregatesInput[]
    NOT?: EmailConnectionScalarWhereWithAggregatesInput | EmailConnectionScalarWhereWithAggregatesInput[]
    oauthRefreshToken?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
    provider?: StringWithAggregatesFilter<"EmailConnection"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailConnection"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailConnection"> | Date | string
    errorMessage?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
    brokerId?: UuidWithAggregatesFilter<"EmailConnection"> | string
    imapPasswordEncrypted?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
    oauthTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"EmailConnection"> | Date | string | null
    status?: StringWithAggregatesFilter<"EmailConnection"> | string
    imapHost?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
    imapUseSsl?: BoolWithAggregatesFilter<"EmailConnection"> | boolean
    isPrimary?: BoolWithAggregatesFilter<"EmailConnection"> | boolean
    userId?: UuidNullableWithAggregatesFilter<"EmailConnection"> | string | null
    oauthAccessToken?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
    lastChecked?: DateTimeNullableWithAggregatesFilter<"EmailConnection"> | Date | string | null
    id?: UuidWithAggregatesFilter<"EmailConnection"> | string
    email?: StringWithAggregatesFilter<"EmailConnection"> | string
    imapPort?: IntNullableWithAggregatesFilter<"EmailConnection"> | number | null
    imapUsername?: StringNullableWithAggregatesFilter<"EmailConnection"> | string | null
  }

  export type LoadWhereInput = {
    AND?: LoadWhereInput | LoadWhereInput[]
    OR?: LoadWhereInput[]
    NOT?: LoadWhereInput | LoadWhereInput[]
    brokerReviewedAt?: DateTimeNullableFilter<"Load"> | Date | string | null
    brokerReviewNotes?: StringNullableFilter<"Load"> | string | null
    weightLb?: IntFilter<"Load"> | number
    shipperName?: StringNullableFilter<"Load"> | string | null
    equipment?: StringFilter<"Load"> | string
    complexityOverrides?: StringNullableListFilter<"Load">
    pickupDt?: DateTimeFilter<"Load"> | Date | string
    shipperEmail?: StringNullableFilter<"Load"> | string | null
    destZip?: StringFilter<"Load"> | string
    shipperPhone?: StringNullableFilter<"Load"> | string | null
    commodity?: StringNullableFilter<"Load"> | string | null
    originZip?: StringFilter<"Load"> | string
    sourceEmailId?: StringNullableFilter<"Load"> | string | null
    status?: StringFilter<"Load"> | string
    reviewedBy?: StringNullableFilter<"Load"> | string | null
    riskScore?: IntFilter<"Load"> | number
    loadNumber?: StringNullableFilter<"Load"> | string | null
    sourceType?: StringFilter<"Load"> | string
    sourceEmailAccountId?: UuidNullableFilter<"Load"> | string | null
    rawEmailText?: StringNullableFilter<"Load"> | string | null
    updatedAt?: DateTimeFilter<"Load"> | Date | string
    extractionConfidence?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    brokerId?: UuidNullableFilter<"Load"> | string | null
    missingFields?: StringNullableListFilter<"Load">
    aiNotes?: StringNullableFilter<"Load"> | string | null
    marginTarget?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Load"> | Date | string
    priorityLevel?: IntFilter<"Load"> | number
    createdBy?: StringFilter<"Load"> | string
    modifiedBy?: StringNullableFilter<"Load"> | string | null
    postToCarriers?: BoolFilter<"Load"> | boolean
    postToDat?: BoolFilter<"Load"> | boolean
    postingDelayMinutes?: IntFilter<"Load"> | number
    maxCarriersToContact?: IntFilter<"Load"> | number
    id?: UuidFilter<"Load"> | string
    preferredRatePerMile?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: StringNullableListFilter<"Load">
    requiresHumanReview?: BoolFilter<"Load"> | boolean
    reviewReason?: StringNullableFilter<"Load"> | string | null
    complexityAnalysis?: StringNullableFilter<"Load"> | string | null
    brokerReviewStatus?: StringNullableFilter<"Load"> | string | null
    assignedSpecialist?: StringNullableFilter<"Load"> | string | null
    hazmat?: BoolFilter<"Load"> | boolean
    totalMiles?: IntNullableFilter<"Load"> | number | null
    ratePerMile?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadOrderByWithRelationInput = {
    brokerReviewedAt?: SortOrderInput | SortOrder
    brokerReviewNotes?: SortOrderInput | SortOrder
    weightLb?: SortOrder
    shipperName?: SortOrderInput | SortOrder
    equipment?: SortOrder
    complexityOverrides?: SortOrder
    pickupDt?: SortOrder
    shipperEmail?: SortOrderInput | SortOrder
    destZip?: SortOrder
    shipperPhone?: SortOrderInput | SortOrder
    commodity?: SortOrderInput | SortOrder
    originZip?: SortOrder
    sourceEmailId?: SortOrderInput | SortOrder
    status?: SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    loadNumber?: SortOrderInput | SortOrder
    sourceType?: SortOrder
    sourceEmailAccountId?: SortOrderInput | SortOrder
    rawEmailText?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    extractionConfidence?: SortOrderInput | SortOrder
    brokerId?: SortOrderInput | SortOrder
    missingFields?: SortOrder
    aiNotes?: SortOrderInput | SortOrder
    marginTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    priorityLevel?: SortOrder
    createdBy?: SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    postToCarriers?: SortOrder
    postToDat?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    id?: SortOrder
    preferredRatePerMile?: SortOrderInput | SortOrder
    complexityFlags?: SortOrder
    requiresHumanReview?: SortOrder
    reviewReason?: SortOrderInput | SortOrder
    complexityAnalysis?: SortOrderInput | SortOrder
    brokerReviewStatus?: SortOrderInput | SortOrder
    assignedSpecialist?: SortOrderInput | SortOrder
    hazmat?: SortOrder
    totalMiles?: SortOrderInput | SortOrder
    ratePerMile?: SortOrderInput | SortOrder
  }

  export type LoadWhereUniqueInput = Prisma.AtLeast<{
    loadNumber?: string
    id?: string
    AND?: LoadWhereInput | LoadWhereInput[]
    OR?: LoadWhereInput[]
    NOT?: LoadWhereInput | LoadWhereInput[]
    brokerReviewedAt?: DateTimeNullableFilter<"Load"> | Date | string | null
    brokerReviewNotes?: StringNullableFilter<"Load"> | string | null
    weightLb?: IntFilter<"Load"> | number
    shipperName?: StringNullableFilter<"Load"> | string | null
    equipment?: StringFilter<"Load"> | string
    complexityOverrides?: StringNullableListFilter<"Load">
    pickupDt?: DateTimeFilter<"Load"> | Date | string
    shipperEmail?: StringNullableFilter<"Load"> | string | null
    destZip?: StringFilter<"Load"> | string
    shipperPhone?: StringNullableFilter<"Load"> | string | null
    commodity?: StringNullableFilter<"Load"> | string | null
    originZip?: StringFilter<"Load"> | string
    sourceEmailId?: StringNullableFilter<"Load"> | string | null
    status?: StringFilter<"Load"> | string
    reviewedBy?: StringNullableFilter<"Load"> | string | null
    riskScore?: IntFilter<"Load"> | number
    sourceType?: StringFilter<"Load"> | string
    sourceEmailAccountId?: UuidNullableFilter<"Load"> | string | null
    rawEmailText?: StringNullableFilter<"Load"> | string | null
    updatedAt?: DateTimeFilter<"Load"> | Date | string
    extractionConfidence?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    brokerId?: UuidNullableFilter<"Load"> | string | null
    missingFields?: StringNullableListFilter<"Load">
    aiNotes?: StringNullableFilter<"Load"> | string | null
    marginTarget?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Load"> | Date | string
    priorityLevel?: IntFilter<"Load"> | number
    createdBy?: StringFilter<"Load"> | string
    modifiedBy?: StringNullableFilter<"Load"> | string | null
    postToCarriers?: BoolFilter<"Load"> | boolean
    postToDat?: BoolFilter<"Load"> | boolean
    postingDelayMinutes?: IntFilter<"Load"> | number
    maxCarriersToContact?: IntFilter<"Load"> | number
    preferredRatePerMile?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: StringNullableListFilter<"Load">
    requiresHumanReview?: BoolFilter<"Load"> | boolean
    reviewReason?: StringNullableFilter<"Load"> | string | null
    complexityAnalysis?: StringNullableFilter<"Load"> | string | null
    brokerReviewStatus?: StringNullableFilter<"Load"> | string | null
    assignedSpecialist?: StringNullableFilter<"Load"> | string | null
    hazmat?: BoolFilter<"Load"> | boolean
    totalMiles?: IntNullableFilter<"Load"> | number | null
    ratePerMile?: DecimalNullableFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
  }, "id" | "loadNumber">

  export type LoadOrderByWithAggregationInput = {
    brokerReviewedAt?: SortOrderInput | SortOrder
    brokerReviewNotes?: SortOrderInput | SortOrder
    weightLb?: SortOrder
    shipperName?: SortOrderInput | SortOrder
    equipment?: SortOrder
    complexityOverrides?: SortOrder
    pickupDt?: SortOrder
    shipperEmail?: SortOrderInput | SortOrder
    destZip?: SortOrder
    shipperPhone?: SortOrderInput | SortOrder
    commodity?: SortOrderInput | SortOrder
    originZip?: SortOrder
    sourceEmailId?: SortOrderInput | SortOrder
    status?: SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    loadNumber?: SortOrderInput | SortOrder
    sourceType?: SortOrder
    sourceEmailAccountId?: SortOrderInput | SortOrder
    rawEmailText?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    extractionConfidence?: SortOrderInput | SortOrder
    brokerId?: SortOrderInput | SortOrder
    missingFields?: SortOrder
    aiNotes?: SortOrderInput | SortOrder
    marginTarget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    priorityLevel?: SortOrder
    createdBy?: SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    postToCarriers?: SortOrder
    postToDat?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    id?: SortOrder
    preferredRatePerMile?: SortOrderInput | SortOrder
    complexityFlags?: SortOrder
    requiresHumanReview?: SortOrder
    reviewReason?: SortOrderInput | SortOrder
    complexityAnalysis?: SortOrderInput | SortOrder
    brokerReviewStatus?: SortOrderInput | SortOrder
    assignedSpecialist?: SortOrderInput | SortOrder
    hazmat?: SortOrder
    totalMiles?: SortOrderInput | SortOrder
    ratePerMile?: SortOrderInput | SortOrder
    _count?: LoadCountOrderByAggregateInput
    _avg?: LoadAvgOrderByAggregateInput
    _max?: LoadMaxOrderByAggregateInput
    _min?: LoadMinOrderByAggregateInput
    _sum?: LoadSumOrderByAggregateInput
  }

  export type LoadScalarWhereWithAggregatesInput = {
    AND?: LoadScalarWhereWithAggregatesInput | LoadScalarWhereWithAggregatesInput[]
    OR?: LoadScalarWhereWithAggregatesInput[]
    NOT?: LoadScalarWhereWithAggregatesInput | LoadScalarWhereWithAggregatesInput[]
    brokerReviewedAt?: DateTimeNullableWithAggregatesFilter<"Load"> | Date | string | null
    brokerReviewNotes?: StringNullableWithAggregatesFilter<"Load"> | string | null
    weightLb?: IntWithAggregatesFilter<"Load"> | number
    shipperName?: StringNullableWithAggregatesFilter<"Load"> | string | null
    equipment?: StringWithAggregatesFilter<"Load"> | string
    complexityOverrides?: StringNullableListFilter<"Load">
    pickupDt?: DateTimeWithAggregatesFilter<"Load"> | Date | string
    shipperEmail?: StringNullableWithAggregatesFilter<"Load"> | string | null
    destZip?: StringWithAggregatesFilter<"Load"> | string
    shipperPhone?: StringNullableWithAggregatesFilter<"Load"> | string | null
    commodity?: StringNullableWithAggregatesFilter<"Load"> | string | null
    originZip?: StringWithAggregatesFilter<"Load"> | string
    sourceEmailId?: StringNullableWithAggregatesFilter<"Load"> | string | null
    status?: StringWithAggregatesFilter<"Load"> | string
    reviewedBy?: StringNullableWithAggregatesFilter<"Load"> | string | null
    riskScore?: IntWithAggregatesFilter<"Load"> | number
    loadNumber?: StringNullableWithAggregatesFilter<"Load"> | string | null
    sourceType?: StringWithAggregatesFilter<"Load"> | string
    sourceEmailAccountId?: UuidNullableWithAggregatesFilter<"Load"> | string | null
    rawEmailText?: StringNullableWithAggregatesFilter<"Load"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Load"> | Date | string
    extractionConfidence?: DecimalNullableWithAggregatesFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    brokerId?: UuidNullableWithAggregatesFilter<"Load"> | string | null
    missingFields?: StringNullableListFilter<"Load">
    aiNotes?: StringNullableWithAggregatesFilter<"Load"> | string | null
    marginTarget?: DecimalNullableWithAggregatesFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Load"> | Date | string
    priorityLevel?: IntWithAggregatesFilter<"Load"> | number
    createdBy?: StringWithAggregatesFilter<"Load"> | string
    modifiedBy?: StringNullableWithAggregatesFilter<"Load"> | string | null
    postToCarriers?: BoolWithAggregatesFilter<"Load"> | boolean
    postToDat?: BoolWithAggregatesFilter<"Load"> | boolean
    postingDelayMinutes?: IntWithAggregatesFilter<"Load"> | number
    maxCarriersToContact?: IntWithAggregatesFilter<"Load"> | number
    id?: UuidWithAggregatesFilter<"Load"> | string
    preferredRatePerMile?: DecimalNullableWithAggregatesFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: StringNullableListFilter<"Load">
    requiresHumanReview?: BoolWithAggregatesFilter<"Load"> | boolean
    reviewReason?: StringNullableWithAggregatesFilter<"Load"> | string | null
    complexityAnalysis?: StringNullableWithAggregatesFilter<"Load"> | string | null
    brokerReviewStatus?: StringNullableWithAggregatesFilter<"Load"> | string | null
    assignedSpecialist?: StringNullableWithAggregatesFilter<"Load"> | string | null
    hazmat?: BoolWithAggregatesFilter<"Load"> | boolean
    totalMiles?: IntNullableWithAggregatesFilter<"Load"> | number | null
    ratePerMile?: DecimalNullableWithAggregatesFilter<"Load"> | Decimal | DecimalJsLike | number | string | null
  }

  export type CarrierWhereInput = {
    AND?: CarrierWhereInput | CarrierWhereInput[]
    OR?: CarrierWhereInput[]
    NOT?: CarrierWhereInput | CarrierWhereInput[]
    updatedAt?: DateTimeFilter<"Carrier"> | Date | string
    lastContactDate?: DateTimeNullableFilter<"Carrier"> | Date | string | null
    serviceAreas?: StringNullableListFilter<"Carrier">
    creditRating?: StringNullableFilter<"Carrier"> | string | null
    createdBy?: StringFilter<"Carrier"> | string
    loadsCompleted?: IntFilter<"Carrier"> | number
    insuranceExpiry?: DateTimeNullableFilter<"Carrier"> | Date | string | null
    contactPhone?: StringNullableFilter<"Carrier"> | string | null
    preferenceTier?: IntFilter<"Carrier"> | number
    createdAt?: DateTimeFilter<"Carrier"> | Date | string
    contactEmail?: StringFilter<"Carrier"> | string
    notes?: StringNullableFilter<"Carrier"> | string | null
    averageRatePerMile?: DecimalNullableFilter<"Carrier"> | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: StringNullableFilter<"Carrier"> | string | null
    loadsAccepted?: IntFilter<"Carrier"> | number
    smsEnabled?: BoolFilter<"Carrier"> | boolean
    contactName?: StringNullableFilter<"Carrier"> | string | null
    dotNumber?: StringNullableFilter<"Carrier"> | string | null
    id?: UuidFilter<"Carrier"> | string
    carrierName?: StringFilter<"Carrier"> | string
    isPreferred?: BoolFilter<"Carrier"> | boolean
    equipmentTypes?: StringNullableListFilter<"Carrier">
    status?: StringFilter<"Carrier"> | string
    mcNumber?: StringNullableFilter<"Carrier"> | string | null
    phoneNumber?: StringNullableFilter<"Carrier"> | string | null
    emailEnabled?: BoolFilter<"Carrier"> | boolean
    loadsOffered?: IntFilter<"Carrier"> | number
  }

  export type CarrierOrderByWithRelationInput = {
    updatedAt?: SortOrder
    lastContactDate?: SortOrderInput | SortOrder
    serviceAreas?: SortOrder
    creditRating?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    loadsCompleted?: SortOrder
    insuranceExpiry?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    preferenceTier?: SortOrder
    createdAt?: SortOrder
    contactEmail?: SortOrder
    notes?: SortOrderInput | SortOrder
    averageRatePerMile?: SortOrderInput | SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    loadsAccepted?: SortOrder
    smsEnabled?: SortOrder
    contactName?: SortOrderInput | SortOrder
    dotNumber?: SortOrderInput | SortOrder
    id?: SortOrder
    carrierName?: SortOrder
    isPreferred?: SortOrder
    equipmentTypes?: SortOrder
    status?: SortOrder
    mcNumber?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    emailEnabled?: SortOrder
    loadsOffered?: SortOrder
  }

  export type CarrierWhereUniqueInput = Prisma.AtLeast<{
    contactEmail?: string
    id?: string
    AND?: CarrierWhereInput | CarrierWhereInput[]
    OR?: CarrierWhereInput[]
    NOT?: CarrierWhereInput | CarrierWhereInput[]
    updatedAt?: DateTimeFilter<"Carrier"> | Date | string
    lastContactDate?: DateTimeNullableFilter<"Carrier"> | Date | string | null
    serviceAreas?: StringNullableListFilter<"Carrier">
    creditRating?: StringNullableFilter<"Carrier"> | string | null
    createdBy?: StringFilter<"Carrier"> | string
    loadsCompleted?: IntFilter<"Carrier"> | number
    insuranceExpiry?: DateTimeNullableFilter<"Carrier"> | Date | string | null
    contactPhone?: StringNullableFilter<"Carrier"> | string | null
    preferenceTier?: IntFilter<"Carrier"> | number
    createdAt?: DateTimeFilter<"Carrier"> | Date | string
    notes?: StringNullableFilter<"Carrier"> | string | null
    averageRatePerMile?: DecimalNullableFilter<"Carrier"> | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: StringNullableFilter<"Carrier"> | string | null
    loadsAccepted?: IntFilter<"Carrier"> | number
    smsEnabled?: BoolFilter<"Carrier"> | boolean
    contactName?: StringNullableFilter<"Carrier"> | string | null
    dotNumber?: StringNullableFilter<"Carrier"> | string | null
    carrierName?: StringFilter<"Carrier"> | string
    isPreferred?: BoolFilter<"Carrier"> | boolean
    equipmentTypes?: StringNullableListFilter<"Carrier">
    status?: StringFilter<"Carrier"> | string
    mcNumber?: StringNullableFilter<"Carrier"> | string | null
    phoneNumber?: StringNullableFilter<"Carrier"> | string | null
    emailEnabled?: BoolFilter<"Carrier"> | boolean
    loadsOffered?: IntFilter<"Carrier"> | number
  }, "id" | "contactEmail">

  export type CarrierOrderByWithAggregationInput = {
    updatedAt?: SortOrder
    lastContactDate?: SortOrderInput | SortOrder
    serviceAreas?: SortOrder
    creditRating?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    loadsCompleted?: SortOrder
    insuranceExpiry?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    preferenceTier?: SortOrder
    createdAt?: SortOrder
    contactEmail?: SortOrder
    notes?: SortOrderInput | SortOrder
    averageRatePerMile?: SortOrderInput | SortOrder
    modifiedBy?: SortOrderInput | SortOrder
    loadsAccepted?: SortOrder
    smsEnabled?: SortOrder
    contactName?: SortOrderInput | SortOrder
    dotNumber?: SortOrderInput | SortOrder
    id?: SortOrder
    carrierName?: SortOrder
    isPreferred?: SortOrder
    equipmentTypes?: SortOrder
    status?: SortOrder
    mcNumber?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    emailEnabled?: SortOrder
    loadsOffered?: SortOrder
    _count?: CarrierCountOrderByAggregateInput
    _avg?: CarrierAvgOrderByAggregateInput
    _max?: CarrierMaxOrderByAggregateInput
    _min?: CarrierMinOrderByAggregateInput
    _sum?: CarrierSumOrderByAggregateInput
  }

  export type CarrierScalarWhereWithAggregatesInput = {
    AND?: CarrierScalarWhereWithAggregatesInput | CarrierScalarWhereWithAggregatesInput[]
    OR?: CarrierScalarWhereWithAggregatesInput[]
    NOT?: CarrierScalarWhereWithAggregatesInput | CarrierScalarWhereWithAggregatesInput[]
    updatedAt?: DateTimeWithAggregatesFilter<"Carrier"> | Date | string
    lastContactDate?: DateTimeNullableWithAggregatesFilter<"Carrier"> | Date | string | null
    serviceAreas?: StringNullableListFilter<"Carrier">
    creditRating?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    createdBy?: StringWithAggregatesFilter<"Carrier"> | string
    loadsCompleted?: IntWithAggregatesFilter<"Carrier"> | number
    insuranceExpiry?: DateTimeNullableWithAggregatesFilter<"Carrier"> | Date | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    preferenceTier?: IntWithAggregatesFilter<"Carrier"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Carrier"> | Date | string
    contactEmail?: StringWithAggregatesFilter<"Carrier"> | string
    notes?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    averageRatePerMile?: DecimalNullableWithAggregatesFilter<"Carrier"> | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    loadsAccepted?: IntWithAggregatesFilter<"Carrier"> | number
    smsEnabled?: BoolWithAggregatesFilter<"Carrier"> | boolean
    contactName?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    dotNumber?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    id?: UuidWithAggregatesFilter<"Carrier"> | string
    carrierName?: StringWithAggregatesFilter<"Carrier"> | string
    isPreferred?: BoolWithAggregatesFilter<"Carrier"> | boolean
    equipmentTypes?: StringNullableListFilter<"Carrier">
    status?: StringWithAggregatesFilter<"Carrier"> | string
    mcNumber?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Carrier"> | string | null
    emailEnabled?: BoolWithAggregatesFilter<"Carrier"> | boolean
    loadsOffered?: IntWithAggregatesFilter<"Carrier"> | number
  }

  export type QuoteWhereInput = {
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    responseMethod?: StringNullableFilter<"Quote"> | string | null
    sentAt?: DateTimeFilter<"Quote"> | Date | string
    ratePerMile?: DecimalNullableFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFilter<"Quote"> | Date | string
    rate?: DecimalNullableFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    status?: StringFilter<"Quote"> | string
    id?: UuidFilter<"Quote"> | string
    respondedAt?: DateTimeNullableFilter<"Quote"> | Date | string | null
    carrierMc?: StringNullableFilter<"Quote"> | string | null
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    loadId?: UuidNullableFilter<"Quote"> | string | null
    carrierId?: UuidNullableFilter<"Quote"> | string | null
    carrierName?: StringNullableFilter<"Quote"> | string | null
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    carrierEmail?: StringNullableFilter<"Quote"> | string | null
    notes?: StringNullableFilter<"Quote"> | string | null
    carrierPhone?: StringNullableFilter<"Quote"> | string | null
  }

  export type QuoteOrderByWithRelationInput = {
    responseMethod?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    ratePerMile?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    rate?: SortOrderInput | SortOrder
    status?: SortOrder
    id?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    carrierMc?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    loadId?: SortOrderInput | SortOrder
    carrierId?: SortOrderInput | SortOrder
    carrierName?: SortOrderInput | SortOrder
    validUntil?: SortOrderInput | SortOrder
    carrierEmail?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    carrierPhone?: SortOrderInput | SortOrder
  }

  export type QuoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    responseMethod?: StringNullableFilter<"Quote"> | string | null
    sentAt?: DateTimeFilter<"Quote"> | Date | string
    ratePerMile?: DecimalNullableFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFilter<"Quote"> | Date | string
    rate?: DecimalNullableFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    status?: StringFilter<"Quote"> | string
    respondedAt?: DateTimeNullableFilter<"Quote"> | Date | string | null
    carrierMc?: StringNullableFilter<"Quote"> | string | null
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    loadId?: UuidNullableFilter<"Quote"> | string | null
    carrierId?: UuidNullableFilter<"Quote"> | string | null
    carrierName?: StringNullableFilter<"Quote"> | string | null
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    carrierEmail?: StringNullableFilter<"Quote"> | string | null
    notes?: StringNullableFilter<"Quote"> | string | null
    carrierPhone?: StringNullableFilter<"Quote"> | string | null
  }, "id">

  export type QuoteOrderByWithAggregationInput = {
    responseMethod?: SortOrderInput | SortOrder
    sentAt?: SortOrder
    ratePerMile?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    rate?: SortOrderInput | SortOrder
    status?: SortOrder
    id?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    carrierMc?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    loadId?: SortOrderInput | SortOrder
    carrierId?: SortOrderInput | SortOrder
    carrierName?: SortOrderInput | SortOrder
    validUntil?: SortOrderInput | SortOrder
    carrierEmail?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    carrierPhone?: SortOrderInput | SortOrder
    _count?: QuoteCountOrderByAggregateInput
    _avg?: QuoteAvgOrderByAggregateInput
    _max?: QuoteMaxOrderByAggregateInput
    _min?: QuoteMinOrderByAggregateInput
    _sum?: QuoteSumOrderByAggregateInput
  }

  export type QuoteScalarWhereWithAggregatesInput = {
    AND?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    OR?: QuoteScalarWhereWithAggregatesInput[]
    NOT?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    responseMethod?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    sentAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
    ratePerMile?: DecimalNullableWithAggregatesFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
    rate?: DecimalNullableWithAggregatesFilter<"Quote"> | Decimal | DecimalJsLike | number | string | null
    status?: StringWithAggregatesFilter<"Quote"> | string
    id?: UuidWithAggregatesFilter<"Quote"> | string
    respondedAt?: DateTimeNullableWithAggregatesFilter<"Quote"> | Date | string | null
    carrierMc?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
    loadId?: UuidNullableWithAggregatesFilter<"Quote"> | string | null
    carrierId?: UuidNullableWithAggregatesFilter<"Quote"> | string | null
    carrierName?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    validUntil?: DateTimeNullableWithAggregatesFilter<"Quote"> | Date | string | null
    carrierEmail?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    carrierPhone?: StringNullableWithAggregatesFilter<"Quote"> | string | null
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    role?: StringFilter<"ChatMessage"> | string
    loadId?: UuidFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    id?: UuidFilter<"ChatMessage"> | string
    brokerId?: UuidFilter<"ChatMessage"> | string
    metadata?: JsonNullableFilter<"ChatMessage">
  }

  export type ChatMessageOrderByWithRelationInput = {
    createdAt?: SortOrder
    role?: SortOrder
    loadId?: SortOrder
    content?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    metadata?: SortOrderInput | SortOrder
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    role?: StringFilter<"ChatMessage"> | string
    loadId?: UuidFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    brokerId?: UuidFilter<"ChatMessage"> | string
    metadata?: JsonNullableFilter<"ChatMessage">
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    createdAt?: SortOrder
    role?: SortOrder
    loadId?: SortOrder
    content?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    role?: StringWithAggregatesFilter<"ChatMessage"> | string
    loadId?: UuidWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    id?: UuidWithAggregatesFilter<"ChatMessage"> | string
    brokerId?: UuidWithAggregatesFilter<"ChatMessage"> | string
    metadata?: JsonNullableWithAggregatesFilter<"ChatMessage">
  }

  export type CommunicationWhereInput = {
    AND?: CommunicationWhereInput | CommunicationWhereInput[]
    OR?: CommunicationWhereInput[]
    NOT?: CommunicationWhereInput | CommunicationWhereInput[]
    threadId?: StringNullableFilter<"Communication"> | string | null
    aiGenerated?: BoolFilter<"Communication"> | boolean
    id?: UuidFilter<"Communication"> | string
    loadId?: UuidNullableFilter<"Communication"> | string | null
    updatedAt?: DateTimeFilter<"Communication"> | Date | string
    brokerId?: UuidNullableFilter<"Communication"> | string | null
    createdAt?: DateTimeFilter<"Communication"> | Date | string
    status?: StringFilter<"Communication"> | string
    oauthProvider?: StringNullableFilter<"Communication"> | string | null
    parentMessageId?: UuidNullableFilter<"Communication"> | string | null
    inReplyTo?: StringNullableFilter<"Communication"> | string | null
    channel?: StringNullableFilter<"Communication"> | string | null
    direction?: StringNullableFilter<"Communication"> | string | null
    messageId?: StringNullableFilter<"Communication"> | string | null
    extractedData?: JsonNullableFilter<"Communication">
    fromAddress?: StringNullableFilter<"Communication"> | string | null
    toAddress?: StringNullableFilter<"Communication"> | string | null
    ccAddresses?: StringNullableListFilter<"Communication">
    aiConfidence?: DecimalNullableFilter<"Communication"> | Decimal | DecimalJsLike | number | string | null
    subject?: StringNullableFilter<"Communication"> | string | null
    content?: StringNullableFilter<"Communication"> | string | null
    attachments?: JsonFilter<"Communication">
  }

  export type CommunicationOrderByWithRelationInput = {
    threadId?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    id?: SortOrder
    loadId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    brokerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    oauthProvider?: SortOrderInput | SortOrder
    parentMessageId?: SortOrderInput | SortOrder
    inReplyTo?: SortOrderInput | SortOrder
    channel?: SortOrderInput | SortOrder
    direction?: SortOrderInput | SortOrder
    messageId?: SortOrderInput | SortOrder
    extractedData?: SortOrderInput | SortOrder
    fromAddress?: SortOrderInput | SortOrder
    toAddress?: SortOrderInput | SortOrder
    ccAddresses?: SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    attachments?: SortOrder
  }

  export type CommunicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommunicationWhereInput | CommunicationWhereInput[]
    OR?: CommunicationWhereInput[]
    NOT?: CommunicationWhereInput | CommunicationWhereInput[]
    threadId?: StringNullableFilter<"Communication"> | string | null
    aiGenerated?: BoolFilter<"Communication"> | boolean
    loadId?: UuidNullableFilter<"Communication"> | string | null
    updatedAt?: DateTimeFilter<"Communication"> | Date | string
    brokerId?: UuidNullableFilter<"Communication"> | string | null
    createdAt?: DateTimeFilter<"Communication"> | Date | string
    status?: StringFilter<"Communication"> | string
    oauthProvider?: StringNullableFilter<"Communication"> | string | null
    parentMessageId?: UuidNullableFilter<"Communication"> | string | null
    inReplyTo?: StringNullableFilter<"Communication"> | string | null
    channel?: StringNullableFilter<"Communication"> | string | null
    direction?: StringNullableFilter<"Communication"> | string | null
    messageId?: StringNullableFilter<"Communication"> | string | null
    extractedData?: JsonNullableFilter<"Communication">
    fromAddress?: StringNullableFilter<"Communication"> | string | null
    toAddress?: StringNullableFilter<"Communication"> | string | null
    ccAddresses?: StringNullableListFilter<"Communication">
    aiConfidence?: DecimalNullableFilter<"Communication"> | Decimal | DecimalJsLike | number | string | null
    subject?: StringNullableFilter<"Communication"> | string | null
    content?: StringNullableFilter<"Communication"> | string | null
    attachments?: JsonFilter<"Communication">
  }, "id">

  export type CommunicationOrderByWithAggregationInput = {
    threadId?: SortOrderInput | SortOrder
    aiGenerated?: SortOrder
    id?: SortOrder
    loadId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    brokerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    oauthProvider?: SortOrderInput | SortOrder
    parentMessageId?: SortOrderInput | SortOrder
    inReplyTo?: SortOrderInput | SortOrder
    channel?: SortOrderInput | SortOrder
    direction?: SortOrderInput | SortOrder
    messageId?: SortOrderInput | SortOrder
    extractedData?: SortOrderInput | SortOrder
    fromAddress?: SortOrderInput | SortOrder
    toAddress?: SortOrderInput | SortOrder
    ccAddresses?: SortOrder
    aiConfidence?: SortOrderInput | SortOrder
    subject?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    attachments?: SortOrder
    _count?: CommunicationCountOrderByAggregateInput
    _avg?: CommunicationAvgOrderByAggregateInput
    _max?: CommunicationMaxOrderByAggregateInput
    _min?: CommunicationMinOrderByAggregateInput
    _sum?: CommunicationSumOrderByAggregateInput
  }

  export type CommunicationScalarWhereWithAggregatesInput = {
    AND?: CommunicationScalarWhereWithAggregatesInput | CommunicationScalarWhereWithAggregatesInput[]
    OR?: CommunicationScalarWhereWithAggregatesInput[]
    NOT?: CommunicationScalarWhereWithAggregatesInput | CommunicationScalarWhereWithAggregatesInput[]
    threadId?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    aiGenerated?: BoolWithAggregatesFilter<"Communication"> | boolean
    id?: UuidWithAggregatesFilter<"Communication"> | string
    loadId?: UuidNullableWithAggregatesFilter<"Communication"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Communication"> | Date | string
    brokerId?: UuidNullableWithAggregatesFilter<"Communication"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Communication"> | Date | string
    status?: StringWithAggregatesFilter<"Communication"> | string
    oauthProvider?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    parentMessageId?: UuidNullableWithAggregatesFilter<"Communication"> | string | null
    inReplyTo?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    channel?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    direction?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    messageId?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    extractedData?: JsonNullableWithAggregatesFilter<"Communication">
    fromAddress?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    toAddress?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    ccAddresses?: StringNullableListFilter<"Communication">
    aiConfidence?: DecimalNullableWithAggregatesFilter<"Communication"> | Decimal | DecimalJsLike | number | string | null
    subject?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    content?: StringNullableWithAggregatesFilter<"Communication"> | string | null
    attachments?: JsonWithAggregatesFilter<"Communication">
  }

  export type EmailAccountWhereInput = {
    AND?: EmailAccountWhereInput | EmailAccountWhereInput[]
    OR?: EmailAccountWhereInput[]
    NOT?: EmailAccountWhereInput | EmailAccountWhereInput[]
    imapPassword?: StringNullableFilter<"EmailAccount"> | string | null
    oauthScope?: StringNullableFilter<"EmailAccount"> | string | null
    imapUseTls?: BoolFilter<"EmailAccount"> | boolean
    imapPort?: IntNullableFilter<"EmailAccount"> | number | null
    tokenExpiresAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    webhookSubscriptionId?: StringNullableFilter<"EmailAccount"> | string | null
    updatedAt?: DateTimeFilter<"EmailAccount"> | Date | string
    emailAddress?: StringFilter<"EmailAccount"> | string
    lastSyncAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    webhookSecret?: StringNullableFilter<"EmailAccount"> | string | null
    lastError?: StringNullableFilter<"EmailAccount"> | string | null
    webhookExpiresAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    imapHost?: StringNullableFilter<"EmailAccount"> | string | null
    createdAt?: DateTimeFilter<"EmailAccount"> | Date | string
    errorCount?: IntFilter<"EmailAccount"> | number
    tenantId?: StringNullableFilter<"EmailAccount"> | string | null
    monitorFolders?: StringNullableListFilter<"EmailAccount">
    brokerId?: UuidFilter<"EmailAccount"> | string
    processingEnabled?: BoolFilter<"EmailAccount"> | boolean
    autoReplyEnabled?: BoolFilter<"EmailAccount"> | boolean
    accessToken?: StringNullableFilter<"EmailAccount"> | string | null
    senderWhitelist?: StringNullableListFilter<"EmailAccount">
    id?: UuidFilter<"EmailAccount"> | string
    createdBy?: StringFilter<"EmailAccount"> | string
    refreshToken?: StringNullableFilter<"EmailAccount"> | string | null
    senderBlacklist?: StringNullableListFilter<"EmailAccount">
    clientId?: StringNullableFilter<"EmailAccount"> | string | null
    subjectFilters?: StringNullableListFilter<"EmailAccount">
    displayName?: StringNullableFilter<"EmailAccount"> | string | null
    imapUsername?: StringNullableFilter<"EmailAccount"> | string | null
    provider?: StringFilter<"EmailAccount"> | string
    status?: StringFilter<"EmailAccount"> | string
  }

  export type EmailAccountOrderByWithRelationInput = {
    imapPassword?: SortOrderInput | SortOrder
    oauthScope?: SortOrderInput | SortOrder
    imapUseTls?: SortOrder
    imapPort?: SortOrderInput | SortOrder
    tokenExpiresAt?: SortOrderInput | SortOrder
    webhookSubscriptionId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    emailAddress?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    webhookSecret?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    webhookExpiresAt?: SortOrderInput | SortOrder
    imapHost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    errorCount?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    monitorFolders?: SortOrder
    brokerId?: SortOrder
    processingEnabled?: SortOrder
    autoReplyEnabled?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    senderWhitelist?: SortOrder
    id?: SortOrder
    createdBy?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    senderBlacklist?: SortOrder
    clientId?: SortOrderInput | SortOrder
    subjectFilters?: SortOrder
    displayName?: SortOrderInput | SortOrder
    imapUsername?: SortOrderInput | SortOrder
    provider?: SortOrder
    status?: SortOrder
  }

  export type EmailAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    brokerId_emailAddress?: EmailAccountBrokerIdEmailAddressCompoundUniqueInput
    AND?: EmailAccountWhereInput | EmailAccountWhereInput[]
    OR?: EmailAccountWhereInput[]
    NOT?: EmailAccountWhereInput | EmailAccountWhereInput[]
    imapPassword?: StringNullableFilter<"EmailAccount"> | string | null
    oauthScope?: StringNullableFilter<"EmailAccount"> | string | null
    imapUseTls?: BoolFilter<"EmailAccount"> | boolean
    imapPort?: IntNullableFilter<"EmailAccount"> | number | null
    tokenExpiresAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    webhookSubscriptionId?: StringNullableFilter<"EmailAccount"> | string | null
    updatedAt?: DateTimeFilter<"EmailAccount"> | Date | string
    emailAddress?: StringFilter<"EmailAccount"> | string
    lastSyncAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    webhookSecret?: StringNullableFilter<"EmailAccount"> | string | null
    lastError?: StringNullableFilter<"EmailAccount"> | string | null
    webhookExpiresAt?: DateTimeNullableFilter<"EmailAccount"> | Date | string | null
    imapHost?: StringNullableFilter<"EmailAccount"> | string | null
    createdAt?: DateTimeFilter<"EmailAccount"> | Date | string
    errorCount?: IntFilter<"EmailAccount"> | number
    tenantId?: StringNullableFilter<"EmailAccount"> | string | null
    monitorFolders?: StringNullableListFilter<"EmailAccount">
    brokerId?: UuidFilter<"EmailAccount"> | string
    processingEnabled?: BoolFilter<"EmailAccount"> | boolean
    autoReplyEnabled?: BoolFilter<"EmailAccount"> | boolean
    accessToken?: StringNullableFilter<"EmailAccount"> | string | null
    senderWhitelist?: StringNullableListFilter<"EmailAccount">
    createdBy?: StringFilter<"EmailAccount"> | string
    refreshToken?: StringNullableFilter<"EmailAccount"> | string | null
    senderBlacklist?: StringNullableListFilter<"EmailAccount">
    clientId?: StringNullableFilter<"EmailAccount"> | string | null
    subjectFilters?: StringNullableListFilter<"EmailAccount">
    displayName?: StringNullableFilter<"EmailAccount"> | string | null
    imapUsername?: StringNullableFilter<"EmailAccount"> | string | null
    provider?: StringFilter<"EmailAccount"> | string
    status?: StringFilter<"EmailAccount"> | string
  }, "id" | "brokerId_emailAddress">

  export type EmailAccountOrderByWithAggregationInput = {
    imapPassword?: SortOrderInput | SortOrder
    oauthScope?: SortOrderInput | SortOrder
    imapUseTls?: SortOrder
    imapPort?: SortOrderInput | SortOrder
    tokenExpiresAt?: SortOrderInput | SortOrder
    webhookSubscriptionId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    emailAddress?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    webhookSecret?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    webhookExpiresAt?: SortOrderInput | SortOrder
    imapHost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    errorCount?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    monitorFolders?: SortOrder
    brokerId?: SortOrder
    processingEnabled?: SortOrder
    autoReplyEnabled?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    senderWhitelist?: SortOrder
    id?: SortOrder
    createdBy?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    senderBlacklist?: SortOrder
    clientId?: SortOrderInput | SortOrder
    subjectFilters?: SortOrder
    displayName?: SortOrderInput | SortOrder
    imapUsername?: SortOrderInput | SortOrder
    provider?: SortOrder
    status?: SortOrder
    _count?: EmailAccountCountOrderByAggregateInput
    _avg?: EmailAccountAvgOrderByAggregateInput
    _max?: EmailAccountMaxOrderByAggregateInput
    _min?: EmailAccountMinOrderByAggregateInput
    _sum?: EmailAccountSumOrderByAggregateInput
  }

  export type EmailAccountScalarWhereWithAggregatesInput = {
    AND?: EmailAccountScalarWhereWithAggregatesInput | EmailAccountScalarWhereWithAggregatesInput[]
    OR?: EmailAccountScalarWhereWithAggregatesInput[]
    NOT?: EmailAccountScalarWhereWithAggregatesInput | EmailAccountScalarWhereWithAggregatesInput[]
    imapPassword?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    oauthScope?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    imapUseTls?: BoolWithAggregatesFilter<"EmailAccount"> | boolean
    imapPort?: IntNullableWithAggregatesFilter<"EmailAccount"> | number | null
    tokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"EmailAccount"> | Date | string | null
    webhookSubscriptionId?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"EmailAccount"> | Date | string
    emailAddress?: StringWithAggregatesFilter<"EmailAccount"> | string
    lastSyncAt?: DateTimeNullableWithAggregatesFilter<"EmailAccount"> | Date | string | null
    webhookSecret?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    lastError?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    webhookExpiresAt?: DateTimeNullableWithAggregatesFilter<"EmailAccount"> | Date | string | null
    imapHost?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailAccount"> | Date | string
    errorCount?: IntWithAggregatesFilter<"EmailAccount"> | number
    tenantId?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    monitorFolders?: StringNullableListFilter<"EmailAccount">
    brokerId?: UuidWithAggregatesFilter<"EmailAccount"> | string
    processingEnabled?: BoolWithAggregatesFilter<"EmailAccount"> | boolean
    autoReplyEnabled?: BoolWithAggregatesFilter<"EmailAccount"> | boolean
    accessToken?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    senderWhitelist?: StringNullableListFilter<"EmailAccount">
    id?: UuidWithAggregatesFilter<"EmailAccount"> | string
    createdBy?: StringWithAggregatesFilter<"EmailAccount"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    senderBlacklist?: StringNullableListFilter<"EmailAccount">
    clientId?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    subjectFilters?: StringNullableListFilter<"EmailAccount">
    displayName?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    imapUsername?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    provider?: StringWithAggregatesFilter<"EmailAccount"> | string
    status?: StringWithAggregatesFilter<"EmailAccount"> | string
  }

  export type EmailProcessingLogWhereInput = {
    AND?: EmailProcessingLogWhereInput | EmailProcessingLogWhereInput[]
    OR?: EmailProcessingLogWhereInput[]
    NOT?: EmailProcessingLogWhereInput | EmailProcessingLogWhereInput[]
    subject?: StringNullableFilter<"EmailProcessingLog"> | string | null
    emailBodyText?: StringNullableFilter<"EmailProcessingLog"> | string | null
    complexityFlags?: StringNullableListFilter<"EmailProcessingLog">
    threadId?: StringNullableFilter<"EmailProcessingLog"> | string | null
    createdAt?: DateTimeFilter<"EmailProcessingLog"> | Date | string
    processingStatus?: StringFilter<"EmailProcessingLog"> | string
    rawEmailHeaders?: JsonNullableFilter<"EmailProcessingLog">
    emailAccountId?: UuidNullableFilter<"EmailProcessingLog"> | string | null
    id?: UuidFilter<"EmailProcessingLog"> | string
    retryCount?: IntFilter<"EmailProcessingLog"> | number
    emailBodyHtml?: StringNullableFilter<"EmailProcessingLog"> | string | null
    attachmentsInfo?: JsonNullableFilter<"EmailProcessingLog">
    errorDetails?: JsonNullableFilter<"EmailProcessingLog">
    receivedAt?: DateTimeNullableFilter<"EmailProcessingLog"> | Date | string | null
    messageId?: StringFilter<"EmailProcessingLog"> | string
    extractionConfidence?: DecimalNullableFilter<"EmailProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    senderEmail?: StringNullableFilter<"EmailProcessingLog"> | string | null
    brokerId?: UuidFilter<"EmailProcessingLog"> | string
    intentClassification?: StringNullableFilter<"EmailProcessingLog"> | string | null
    loadId?: UuidNullableFilter<"EmailProcessingLog"> | string | null
    loadNumber?: StringNullableFilter<"EmailProcessingLog"> | string | null
    errorMessage?: StringNullableFilter<"EmailProcessingLog"> | string | null
    processedAt?: DateTimeFilter<"EmailProcessingLog"> | Date | string
  }

  export type EmailProcessingLogOrderByWithRelationInput = {
    subject?: SortOrderInput | SortOrder
    emailBodyText?: SortOrderInput | SortOrder
    complexityFlags?: SortOrder
    threadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processingStatus?: SortOrder
    rawEmailHeaders?: SortOrderInput | SortOrder
    emailAccountId?: SortOrderInput | SortOrder
    id?: SortOrder
    retryCount?: SortOrder
    emailBodyHtml?: SortOrderInput | SortOrder
    attachmentsInfo?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    receivedAt?: SortOrderInput | SortOrder
    messageId?: SortOrder
    extractionConfidence?: SortOrderInput | SortOrder
    senderEmail?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    intentClassification?: SortOrderInput | SortOrder
    loadId?: SortOrderInput | SortOrder
    loadNumber?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    processedAt?: SortOrder
  }

  export type EmailProcessingLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    emailAccountId_messageId?: EmailProcessingLogEmailAccountIdMessageIdCompoundUniqueInput
    AND?: EmailProcessingLogWhereInput | EmailProcessingLogWhereInput[]
    OR?: EmailProcessingLogWhereInput[]
    NOT?: EmailProcessingLogWhereInput | EmailProcessingLogWhereInput[]
    subject?: StringNullableFilter<"EmailProcessingLog"> | string | null
    emailBodyText?: StringNullableFilter<"EmailProcessingLog"> | string | null
    complexityFlags?: StringNullableListFilter<"EmailProcessingLog">
    threadId?: StringNullableFilter<"EmailProcessingLog"> | string | null
    createdAt?: DateTimeFilter<"EmailProcessingLog"> | Date | string
    processingStatus?: StringFilter<"EmailProcessingLog"> | string
    rawEmailHeaders?: JsonNullableFilter<"EmailProcessingLog">
    emailAccountId?: UuidNullableFilter<"EmailProcessingLog"> | string | null
    retryCount?: IntFilter<"EmailProcessingLog"> | number
    emailBodyHtml?: StringNullableFilter<"EmailProcessingLog"> | string | null
    attachmentsInfo?: JsonNullableFilter<"EmailProcessingLog">
    errorDetails?: JsonNullableFilter<"EmailProcessingLog">
    receivedAt?: DateTimeNullableFilter<"EmailProcessingLog"> | Date | string | null
    messageId?: StringFilter<"EmailProcessingLog"> | string
    extractionConfidence?: DecimalNullableFilter<"EmailProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    senderEmail?: StringNullableFilter<"EmailProcessingLog"> | string | null
    brokerId?: UuidFilter<"EmailProcessingLog"> | string
    intentClassification?: StringNullableFilter<"EmailProcessingLog"> | string | null
    loadId?: UuidNullableFilter<"EmailProcessingLog"> | string | null
    loadNumber?: StringNullableFilter<"EmailProcessingLog"> | string | null
    errorMessage?: StringNullableFilter<"EmailProcessingLog"> | string | null
    processedAt?: DateTimeFilter<"EmailProcessingLog"> | Date | string
  }, "id" | "emailAccountId_messageId">

  export type EmailProcessingLogOrderByWithAggregationInput = {
    subject?: SortOrderInput | SortOrder
    emailBodyText?: SortOrderInput | SortOrder
    complexityFlags?: SortOrder
    threadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    processingStatus?: SortOrder
    rawEmailHeaders?: SortOrderInput | SortOrder
    emailAccountId?: SortOrderInput | SortOrder
    id?: SortOrder
    retryCount?: SortOrder
    emailBodyHtml?: SortOrderInput | SortOrder
    attachmentsInfo?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    receivedAt?: SortOrderInput | SortOrder
    messageId?: SortOrder
    extractionConfidence?: SortOrderInput | SortOrder
    senderEmail?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    intentClassification?: SortOrderInput | SortOrder
    loadId?: SortOrderInput | SortOrder
    loadNumber?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    processedAt?: SortOrder
    _count?: EmailProcessingLogCountOrderByAggregateInput
    _avg?: EmailProcessingLogAvgOrderByAggregateInput
    _max?: EmailProcessingLogMaxOrderByAggregateInput
    _min?: EmailProcessingLogMinOrderByAggregateInput
    _sum?: EmailProcessingLogSumOrderByAggregateInput
  }

  export type EmailProcessingLogScalarWhereWithAggregatesInput = {
    AND?: EmailProcessingLogScalarWhereWithAggregatesInput | EmailProcessingLogScalarWhereWithAggregatesInput[]
    OR?: EmailProcessingLogScalarWhereWithAggregatesInput[]
    NOT?: EmailProcessingLogScalarWhereWithAggregatesInput | EmailProcessingLogScalarWhereWithAggregatesInput[]
    subject?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    emailBodyText?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    complexityFlags?: StringNullableListFilter<"EmailProcessingLog">
    threadId?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailProcessingLog"> | Date | string
    processingStatus?: StringWithAggregatesFilter<"EmailProcessingLog"> | string
    rawEmailHeaders?: JsonNullableWithAggregatesFilter<"EmailProcessingLog">
    emailAccountId?: UuidNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    id?: UuidWithAggregatesFilter<"EmailProcessingLog"> | string
    retryCount?: IntWithAggregatesFilter<"EmailProcessingLog"> | number
    emailBodyHtml?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    attachmentsInfo?: JsonNullableWithAggregatesFilter<"EmailProcessingLog">
    errorDetails?: JsonNullableWithAggregatesFilter<"EmailProcessingLog">
    receivedAt?: DateTimeNullableWithAggregatesFilter<"EmailProcessingLog"> | Date | string | null
    messageId?: StringWithAggregatesFilter<"EmailProcessingLog"> | string
    extractionConfidence?: DecimalNullableWithAggregatesFilter<"EmailProcessingLog"> | Decimal | DecimalJsLike | number | string | null
    senderEmail?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    brokerId?: UuidWithAggregatesFilter<"EmailProcessingLog"> | string
    intentClassification?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    loadId?: UuidNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    loadNumber?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"EmailProcessingLog"> | string | null
    processedAt?: DateTimeWithAggregatesFilter<"EmailProcessingLog"> | Date | string
  }

  export type EmailWhereInput = {
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    messageId?: StringFilter<"Email"> | string
    rawData?: JsonNullableFilter<"Email">
    content?: StringNullableFilter<"Email"> | string | null
    processedAt?: DateTimeFilter<"Email"> | Date | string
    subject?: StringNullableFilter<"Email"> | string | null
    provider?: StringNullableFilter<"Email"> | string | null
    fromAddress?: StringFilter<"Email"> | string
    status?: StringFilter<"Email"> | string
    receivedAt?: DateTimeFilter<"Email"> | Date | string
    createdAt?: DateTimeFilter<"Email"> | Date | string
    id?: UuidFilter<"Email"> | string
    brokerId?: UuidFilter<"Email"> | string
    toAddress?: StringFilter<"Email"> | string
  }

  export type EmailOrderByWithRelationInput = {
    messageId?: SortOrder
    rawData?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    processedAt?: SortOrder
    subject?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    fromAddress?: SortOrder
    status?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    toAddress?: SortOrder
  }

  export type EmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    messageId?: StringFilter<"Email"> | string
    rawData?: JsonNullableFilter<"Email">
    content?: StringNullableFilter<"Email"> | string | null
    processedAt?: DateTimeFilter<"Email"> | Date | string
    subject?: StringNullableFilter<"Email"> | string | null
    provider?: StringNullableFilter<"Email"> | string | null
    fromAddress?: StringFilter<"Email"> | string
    status?: StringFilter<"Email"> | string
    receivedAt?: DateTimeFilter<"Email"> | Date | string
    createdAt?: DateTimeFilter<"Email"> | Date | string
    brokerId?: UuidFilter<"Email"> | string
    toAddress?: StringFilter<"Email"> | string
  }, "id">

  export type EmailOrderByWithAggregationInput = {
    messageId?: SortOrder
    rawData?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    processedAt?: SortOrder
    subject?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    fromAddress?: SortOrder
    status?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    toAddress?: SortOrder
    _count?: EmailCountOrderByAggregateInput
    _max?: EmailMaxOrderByAggregateInput
    _min?: EmailMinOrderByAggregateInput
  }

  export type EmailScalarWhereWithAggregatesInput = {
    AND?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    OR?: EmailScalarWhereWithAggregatesInput[]
    NOT?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    messageId?: StringWithAggregatesFilter<"Email"> | string
    rawData?: JsonNullableWithAggregatesFilter<"Email">
    content?: StringNullableWithAggregatesFilter<"Email"> | string | null
    processedAt?: DateTimeWithAggregatesFilter<"Email"> | Date | string
    subject?: StringNullableWithAggregatesFilter<"Email"> | string | null
    provider?: StringNullableWithAggregatesFilter<"Email"> | string | null
    fromAddress?: StringWithAggregatesFilter<"Email"> | string
    status?: StringWithAggregatesFilter<"Email"> | string
    receivedAt?: DateTimeWithAggregatesFilter<"Email"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Email"> | Date | string
    id?: UuidWithAggregatesFilter<"Email"> | string
    brokerId?: UuidWithAggregatesFilter<"Email"> | string
    toAddress?: StringWithAggregatesFilter<"Email"> | string
  }

  export type LoadBlastWhereInput = {
    AND?: LoadBlastWhereInput | LoadBlastWhereInput[]
    OR?: LoadBlastWhereInput[]
    NOT?: LoadBlastWhereInput | LoadBlastWhereInput[]
    loadId?: UuidNullableFilter<"LoadBlast"> | string | null
    id?: UuidFilter<"LoadBlast"> | string
    createdAt?: DateTimeFilter<"LoadBlast"> | Date | string
    carrierId?: UuidNullableFilter<"LoadBlast"> | string | null
    blastType?: StringFilter<"LoadBlast"> | string
    blastStatus?: StringFilter<"LoadBlast"> | string
    subjectLine?: StringNullableFilter<"LoadBlast"> | string | null
    messageContent?: StringNullableFilter<"LoadBlast"> | string | null
    sentAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    responseReceivedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    responseType?: StringNullableFilter<"LoadBlast"> | string | null
    responseContent?: StringNullableFilter<"LoadBlast"> | string | null
    resendMessageId?: StringNullableFilter<"LoadBlast"> | string | null
    twilioMessageId?: StringNullableFilter<"LoadBlast"> | string | null
    datPostingId?: StringNullableFilter<"LoadBlast"> | string | null
    errorMessage?: StringNullableFilter<"LoadBlast"> | string | null
    retryCount?: IntFilter<"LoadBlast"> | number
    createdBy?: StringFilter<"LoadBlast"> | string
  }

  export type LoadBlastOrderByWithRelationInput = {
    loadId?: SortOrderInput | SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    carrierId?: SortOrderInput | SortOrder
    blastType?: SortOrder
    blastStatus?: SortOrder
    subjectLine?: SortOrderInput | SortOrder
    messageContent?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    responseReceivedAt?: SortOrderInput | SortOrder
    responseType?: SortOrderInput | SortOrder
    responseContent?: SortOrderInput | SortOrder
    resendMessageId?: SortOrderInput | SortOrder
    twilioMessageId?: SortOrderInput | SortOrder
    datPostingId?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    createdBy?: SortOrder
  }

  export type LoadBlastWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoadBlastWhereInput | LoadBlastWhereInput[]
    OR?: LoadBlastWhereInput[]
    NOT?: LoadBlastWhereInput | LoadBlastWhereInput[]
    loadId?: UuidNullableFilter<"LoadBlast"> | string | null
    createdAt?: DateTimeFilter<"LoadBlast"> | Date | string
    carrierId?: UuidNullableFilter<"LoadBlast"> | string | null
    blastType?: StringFilter<"LoadBlast"> | string
    blastStatus?: StringFilter<"LoadBlast"> | string
    subjectLine?: StringNullableFilter<"LoadBlast"> | string | null
    messageContent?: StringNullableFilter<"LoadBlast"> | string | null
    sentAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    responseReceivedAt?: DateTimeNullableFilter<"LoadBlast"> | Date | string | null
    responseType?: StringNullableFilter<"LoadBlast"> | string | null
    responseContent?: StringNullableFilter<"LoadBlast"> | string | null
    resendMessageId?: StringNullableFilter<"LoadBlast"> | string | null
    twilioMessageId?: StringNullableFilter<"LoadBlast"> | string | null
    datPostingId?: StringNullableFilter<"LoadBlast"> | string | null
    errorMessage?: StringNullableFilter<"LoadBlast"> | string | null
    retryCount?: IntFilter<"LoadBlast"> | number
    createdBy?: StringFilter<"LoadBlast"> | string
  }, "id">

  export type LoadBlastOrderByWithAggregationInput = {
    loadId?: SortOrderInput | SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    carrierId?: SortOrderInput | SortOrder
    blastType?: SortOrder
    blastStatus?: SortOrder
    subjectLine?: SortOrderInput | SortOrder
    messageContent?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    responseReceivedAt?: SortOrderInput | SortOrder
    responseType?: SortOrderInput | SortOrder
    responseContent?: SortOrderInput | SortOrder
    resendMessageId?: SortOrderInput | SortOrder
    twilioMessageId?: SortOrderInput | SortOrder
    datPostingId?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    createdBy?: SortOrder
    _count?: LoadBlastCountOrderByAggregateInput
    _avg?: LoadBlastAvgOrderByAggregateInput
    _max?: LoadBlastMaxOrderByAggregateInput
    _min?: LoadBlastMinOrderByAggregateInput
    _sum?: LoadBlastSumOrderByAggregateInput
  }

  export type LoadBlastScalarWhereWithAggregatesInput = {
    AND?: LoadBlastScalarWhereWithAggregatesInput | LoadBlastScalarWhereWithAggregatesInput[]
    OR?: LoadBlastScalarWhereWithAggregatesInput[]
    NOT?: LoadBlastScalarWhereWithAggregatesInput | LoadBlastScalarWhereWithAggregatesInput[]
    loadId?: UuidNullableWithAggregatesFilter<"LoadBlast"> | string | null
    id?: UuidWithAggregatesFilter<"LoadBlast"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LoadBlast"> | Date | string
    carrierId?: UuidNullableWithAggregatesFilter<"LoadBlast"> | string | null
    blastType?: StringWithAggregatesFilter<"LoadBlast"> | string
    blastStatus?: StringWithAggregatesFilter<"LoadBlast"> | string
    subjectLine?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    messageContent?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"LoadBlast"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"LoadBlast"> | Date | string | null
    openedAt?: DateTimeNullableWithAggregatesFilter<"LoadBlast"> | Date | string | null
    clickedAt?: DateTimeNullableWithAggregatesFilter<"LoadBlast"> | Date | string | null
    responseReceivedAt?: DateTimeNullableWithAggregatesFilter<"LoadBlast"> | Date | string | null
    responseType?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    responseContent?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    resendMessageId?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    twilioMessageId?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    datPostingId?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"LoadBlast"> | string | null
    retryCount?: IntWithAggregatesFilter<"LoadBlast"> | number
    createdBy?: StringWithAggregatesFilter<"LoadBlast"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: UuidFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    metadata?: JsonNullableFilter<"Notification">
    brokerId?: UuidFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    message?: StringFilter<"Notification"> | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    read?: SortOrder
    metadata?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    read?: BoolFilter<"Notification"> | boolean
    metadata?: JsonNullableFilter<"Notification">
    brokerId?: UuidFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    message?: StringFilter<"Notification"> | string
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    read?: SortOrder
    metadata?: SortOrderInput | SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    brokerId?: UuidWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    message?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type OAuthStateWhereInput = {
    AND?: OAuthStateWhereInput | OAuthStateWhereInput[]
    OR?: OAuthStateWhereInput[]
    NOT?: OAuthStateWhereInput | OAuthStateWhereInput[]
    createdAt?: DateTimeFilter<"OAuthState"> | Date | string
    userId?: UuidFilter<"OAuthState"> | string
    expiresAt?: DateTimeFilter<"OAuthState"> | Date | string
    state?: StringFilter<"OAuthState"> | string
    provider?: StringFilter<"OAuthState"> | string
  }

  export type OAuthStateOrderByWithRelationInput = {
    createdAt?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    state?: SortOrder
    provider?: SortOrder
  }

  export type OAuthStateWhereUniqueInput = Prisma.AtLeast<{
    state?: string
    AND?: OAuthStateWhereInput | OAuthStateWhereInput[]
    OR?: OAuthStateWhereInput[]
    NOT?: OAuthStateWhereInput | OAuthStateWhereInput[]
    createdAt?: DateTimeFilter<"OAuthState"> | Date | string
    userId?: UuidFilter<"OAuthState"> | string
    expiresAt?: DateTimeFilter<"OAuthState"> | Date | string
    provider?: StringFilter<"OAuthState"> | string
  }, "state">

  export type OAuthStateOrderByWithAggregationInput = {
    createdAt?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    state?: SortOrder
    provider?: SortOrder
    _count?: OAuthStateCountOrderByAggregateInput
    _max?: OAuthStateMaxOrderByAggregateInput
    _min?: OAuthStateMinOrderByAggregateInput
  }

  export type OAuthStateScalarWhereWithAggregatesInput = {
    AND?: OAuthStateScalarWhereWithAggregatesInput | OAuthStateScalarWhereWithAggregatesInput[]
    OR?: OAuthStateScalarWhereWithAggregatesInput[]
    NOT?: OAuthStateScalarWhereWithAggregatesInput | OAuthStateScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"OAuthState"> | Date | string
    userId?: UuidWithAggregatesFilter<"OAuthState"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OAuthState"> | Date | string
    state?: StringWithAggregatesFilter<"OAuthState"> | string
    provider?: StringWithAggregatesFilter<"OAuthState"> | string
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    confidenceThresholds?: JsonFilter<"UserSettings">
    id?: UuidFilter<"UserSettings"> | string
    notifications?: JsonFilter<"UserSettings">
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    userId?: UuidFilter<"UserSettings"> | string
  }

  export type UserSettingsOrderByWithRelationInput = {
    updatedAt?: SortOrder
    confidenceThresholds?: SortOrder
    id?: SortOrder
    notifications?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    confidenceThresholds?: JsonFilter<"UserSettings">
    notifications?: JsonFilter<"UserSettings">
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
  }, "id" | "userId">

  export type UserSettingsOrderByWithAggregationInput = {
    updatedAt?: SortOrder
    confidenceThresholds?: SortOrder
    id?: SortOrder
    notifications?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    updatedAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    confidenceThresholds?: JsonWithAggregatesFilter<"UserSettings">
    id?: UuidWithAggregatesFilter<"UserSettings"> | string
    notifications?: JsonWithAggregatesFilter<"UserSettings">
    createdAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    userId?: UuidWithAggregatesFilter<"UserSettings"> | string
  }

  export type UserCreateInput = {
    lastProvider?: string | null
    lastLogin?: Date | string | null
    id?: string
    createdAt?: Date | string
    name?: string | null
    provider?: string | null
    email: string
  }

  export type UserUncheckedCreateInput = {
    lastProvider?: string | null
    lastLogin?: Date | string | null
    id?: string
    createdAt?: Date | string
    name?: string | null
    provider?: string | null
    email: string
  }

  export type UserUpdateInput = {
    lastProvider?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    lastProvider?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    lastProvider?: string | null
    lastLogin?: Date | string | null
    id?: string
    createdAt?: Date | string
    name?: string | null
    provider?: string | null
    email: string
  }

  export type UserUpdateManyMutationInput = {
    lastProvider?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    lastProvider?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type BrokerCreateInput = {
    updatedAt?: Date | string
    email: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: string
    companyName: string
    userId?: string | null
    subscriptionTier?: string
  }

  export type BrokerUncheckedCreateInput = {
    updatedAt?: Date | string
    email: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: string
    companyName: string
    userId?: string | null
    subscriptionTier?: string
  }

  export type BrokerUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: StringFieldUpdateOperationsInput | string
  }

  export type BrokerUncheckedUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: StringFieldUpdateOperationsInput | string
  }

  export type BrokerCreateManyInput = {
    updatedAt?: Date | string
    email: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: string
    companyName: string
    userId?: string | null
    subscriptionTier?: string
  }

  export type BrokerUpdateManyMutationInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: StringFieldUpdateOperationsInput | string
  }

  export type BrokerUncheckedUpdateManyInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oauthTokens?: JsonNullValueInput | InputJsonValue
    apiKeys?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionTier?: StringFieldUpdateOperationsInput | string
  }

  export type EmailConnectionCreateInput = {
    oauthRefreshToken?: string | null
    provider: string
    updatedAt?: Date | string
    createdAt?: Date | string
    errorMessage?: string | null
    brokerId: string
    imapPasswordEncrypted?: string | null
    oauthTokenExpiresAt?: Date | string | null
    status?: string
    imapHost?: string | null
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: string | null
    oauthAccessToken?: string | null
    lastChecked?: Date | string | null
    id?: string
    email: string
    imapPort?: number | null
    imapUsername?: string | null
  }

  export type EmailConnectionUncheckedCreateInput = {
    oauthRefreshToken?: string | null
    provider: string
    updatedAt?: Date | string
    createdAt?: Date | string
    errorMessage?: string | null
    brokerId: string
    imapPasswordEncrypted?: string | null
    oauthTokenExpiresAt?: Date | string | null
    status?: string
    imapHost?: string | null
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: string | null
    oauthAccessToken?: string | null
    lastChecked?: Date | string | null
    id?: string
    email: string
    imapPort?: number | null
    imapUsername?: string | null
  }

  export type EmailConnectionUpdateInput = {
    oauthRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    imapPasswordEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    oauthTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseSsl?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastChecked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailConnectionUncheckedUpdateInput = {
    oauthRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    imapPasswordEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    oauthTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseSsl?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastChecked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailConnectionCreateManyInput = {
    oauthRefreshToken?: string | null
    provider: string
    updatedAt?: Date | string
    createdAt?: Date | string
    errorMessage?: string | null
    brokerId: string
    imapPasswordEncrypted?: string | null
    oauthTokenExpiresAt?: Date | string | null
    status?: string
    imapHost?: string | null
    imapUseSsl?: boolean
    isPrimary?: boolean
    userId?: string | null
    oauthAccessToken?: string | null
    lastChecked?: Date | string | null
    id?: string
    email: string
    imapPort?: number | null
    imapUsername?: string | null
  }

  export type EmailConnectionUpdateManyMutationInput = {
    oauthRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    imapPasswordEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    oauthTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseSsl?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastChecked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailConnectionUncheckedUpdateManyInput = {
    oauthRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    imapPasswordEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    oauthTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseSsl?: BoolFieldUpdateOperationsInput | boolean
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastChecked?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoadCreateInput = {
    brokerReviewedAt?: Date | string | null
    brokerReviewNotes?: string | null
    weightLb: number
    shipperName?: string | null
    equipment: string
    complexityOverrides?: LoadCreatecomplexityOverridesInput | string[]
    pickupDt: Date | string
    shipperEmail?: string | null
    destZip: string
    shipperPhone?: string | null
    commodity?: string | null
    originZip: string
    sourceEmailId?: string | null
    status?: string
    reviewedBy?: string | null
    riskScore?: number
    loadNumber?: string | null
    sourceType?: string
    sourceEmailAccountId?: string | null
    rawEmailText?: string | null
    updatedAt?: Date | string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    brokerId?: string | null
    missingFields?: LoadCreatemissingFieldsInput | string[]
    aiNotes?: string | null
    marginTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    priorityLevel?: number
    createdBy?: string
    modifiedBy?: string | null
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: number
    maxCarriersToContact?: number
    id?: string
    preferredRatePerMile?: Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadCreatecomplexityFlagsInput | string[]
    requiresHumanReview?: boolean
    reviewReason?: string | null
    complexityAnalysis?: string | null
    brokerReviewStatus?: string | null
    assignedSpecialist?: string | null
    hazmat?: boolean
    totalMiles?: number | null
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadUncheckedCreateInput = {
    brokerReviewedAt?: Date | string | null
    brokerReviewNotes?: string | null
    weightLb: number
    shipperName?: string | null
    equipment: string
    complexityOverrides?: LoadCreatecomplexityOverridesInput | string[]
    pickupDt: Date | string
    shipperEmail?: string | null
    destZip: string
    shipperPhone?: string | null
    commodity?: string | null
    originZip: string
    sourceEmailId?: string | null
    status?: string
    reviewedBy?: string | null
    riskScore?: number
    loadNumber?: string | null
    sourceType?: string
    sourceEmailAccountId?: string | null
    rawEmailText?: string | null
    updatedAt?: Date | string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    brokerId?: string | null
    missingFields?: LoadCreatemissingFieldsInput | string[]
    aiNotes?: string | null
    marginTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    priorityLevel?: number
    createdBy?: string
    modifiedBy?: string | null
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: number
    maxCarriersToContact?: number
    id?: string
    preferredRatePerMile?: Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadCreatecomplexityFlagsInput | string[]
    requiresHumanReview?: boolean
    reviewReason?: string | null
    complexityAnalysis?: string | null
    brokerReviewStatus?: string | null
    assignedSpecialist?: string | null
    hazmat?: boolean
    totalMiles?: number | null
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadUpdateInput = {
    brokerReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brokerReviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    weightLb?: IntFieldUpdateOperationsInput | number
    shipperName?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: StringFieldUpdateOperationsInput | string
    complexityOverrides?: LoadUpdatecomplexityOverridesInput | string[]
    pickupDt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipperEmail?: NullableStringFieldUpdateOperationsInput | string | null
    destZip?: StringFieldUpdateOperationsInput | string
    shipperPhone?: NullableStringFieldUpdateOperationsInput | string | null
    commodity?: NullableStringFieldUpdateOperationsInput | string | null
    originZip?: StringFieldUpdateOperationsInput | string
    sourceEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: IntFieldUpdateOperationsInput | number
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceEmailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    rawEmailText?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    missingFields?: LoadUpdatemissingFieldsInput | string[]
    aiNotes?: NullableStringFieldUpdateOperationsInput | string | null
    marginTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priorityLevel?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postToCarriers?: BoolFieldUpdateOperationsInput | boolean
    postToDat?: BoolFieldUpdateOperationsInput | boolean
    postingDelayMinutes?: IntFieldUpdateOperationsInput | number
    maxCarriersToContact?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    preferredRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadUpdatecomplexityFlagsInput | string[]
    requiresHumanReview?: BoolFieldUpdateOperationsInput | boolean
    reviewReason?: NullableStringFieldUpdateOperationsInput | string | null
    complexityAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    brokerReviewStatus?: NullableStringFieldUpdateOperationsInput | string | null
    assignedSpecialist?: NullableStringFieldUpdateOperationsInput | string | null
    hazmat?: BoolFieldUpdateOperationsInput | boolean
    totalMiles?: NullableIntFieldUpdateOperationsInput | number | null
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadUncheckedUpdateInput = {
    brokerReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brokerReviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    weightLb?: IntFieldUpdateOperationsInput | number
    shipperName?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: StringFieldUpdateOperationsInput | string
    complexityOverrides?: LoadUpdatecomplexityOverridesInput | string[]
    pickupDt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipperEmail?: NullableStringFieldUpdateOperationsInput | string | null
    destZip?: StringFieldUpdateOperationsInput | string
    shipperPhone?: NullableStringFieldUpdateOperationsInput | string | null
    commodity?: NullableStringFieldUpdateOperationsInput | string | null
    originZip?: StringFieldUpdateOperationsInput | string
    sourceEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: IntFieldUpdateOperationsInput | number
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceEmailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    rawEmailText?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    missingFields?: LoadUpdatemissingFieldsInput | string[]
    aiNotes?: NullableStringFieldUpdateOperationsInput | string | null
    marginTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priorityLevel?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postToCarriers?: BoolFieldUpdateOperationsInput | boolean
    postToDat?: BoolFieldUpdateOperationsInput | boolean
    postingDelayMinutes?: IntFieldUpdateOperationsInput | number
    maxCarriersToContact?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    preferredRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadUpdatecomplexityFlagsInput | string[]
    requiresHumanReview?: BoolFieldUpdateOperationsInput | boolean
    reviewReason?: NullableStringFieldUpdateOperationsInput | string | null
    complexityAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    brokerReviewStatus?: NullableStringFieldUpdateOperationsInput | string | null
    assignedSpecialist?: NullableStringFieldUpdateOperationsInput | string | null
    hazmat?: BoolFieldUpdateOperationsInput | boolean
    totalMiles?: NullableIntFieldUpdateOperationsInput | number | null
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadCreateManyInput = {
    brokerReviewedAt?: Date | string | null
    brokerReviewNotes?: string | null
    weightLb: number
    shipperName?: string | null
    equipment: string
    complexityOverrides?: LoadCreatecomplexityOverridesInput | string[]
    pickupDt: Date | string
    shipperEmail?: string | null
    destZip: string
    shipperPhone?: string | null
    commodity?: string | null
    originZip: string
    sourceEmailId?: string | null
    status?: string
    reviewedBy?: string | null
    riskScore?: number
    loadNumber?: string | null
    sourceType?: string
    sourceEmailAccountId?: string | null
    rawEmailText?: string | null
    updatedAt?: Date | string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    brokerId?: string | null
    missingFields?: LoadCreatemissingFieldsInput | string[]
    aiNotes?: string | null
    marginTarget?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    priorityLevel?: number
    createdBy?: string
    modifiedBy?: string | null
    postToCarriers?: boolean
    postToDat?: boolean
    postingDelayMinutes?: number
    maxCarriersToContact?: number
    id?: string
    preferredRatePerMile?: Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadCreatecomplexityFlagsInput | string[]
    requiresHumanReview?: boolean
    reviewReason?: string | null
    complexityAnalysis?: string | null
    brokerReviewStatus?: string | null
    assignedSpecialist?: string | null
    hazmat?: boolean
    totalMiles?: number | null
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
  }

  export type LoadUpdateManyMutationInput = {
    brokerReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brokerReviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    weightLb?: IntFieldUpdateOperationsInput | number
    shipperName?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: StringFieldUpdateOperationsInput | string
    complexityOverrides?: LoadUpdatecomplexityOverridesInput | string[]
    pickupDt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipperEmail?: NullableStringFieldUpdateOperationsInput | string | null
    destZip?: StringFieldUpdateOperationsInput | string
    shipperPhone?: NullableStringFieldUpdateOperationsInput | string | null
    commodity?: NullableStringFieldUpdateOperationsInput | string | null
    originZip?: StringFieldUpdateOperationsInput | string
    sourceEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: IntFieldUpdateOperationsInput | number
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceEmailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    rawEmailText?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    missingFields?: LoadUpdatemissingFieldsInput | string[]
    aiNotes?: NullableStringFieldUpdateOperationsInput | string | null
    marginTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priorityLevel?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postToCarriers?: BoolFieldUpdateOperationsInput | boolean
    postToDat?: BoolFieldUpdateOperationsInput | boolean
    postingDelayMinutes?: IntFieldUpdateOperationsInput | number
    maxCarriersToContact?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    preferredRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadUpdatecomplexityFlagsInput | string[]
    requiresHumanReview?: BoolFieldUpdateOperationsInput | boolean
    reviewReason?: NullableStringFieldUpdateOperationsInput | string | null
    complexityAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    brokerReviewStatus?: NullableStringFieldUpdateOperationsInput | string | null
    assignedSpecialist?: NullableStringFieldUpdateOperationsInput | string | null
    hazmat?: BoolFieldUpdateOperationsInput | boolean
    totalMiles?: NullableIntFieldUpdateOperationsInput | number | null
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadUncheckedUpdateManyInput = {
    brokerReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brokerReviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    weightLb?: IntFieldUpdateOperationsInput | number
    shipperName?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: StringFieldUpdateOperationsInput | string
    complexityOverrides?: LoadUpdatecomplexityOverridesInput | string[]
    pickupDt?: DateTimeFieldUpdateOperationsInput | Date | string
    shipperEmail?: NullableStringFieldUpdateOperationsInput | string | null
    destZip?: StringFieldUpdateOperationsInput | string
    shipperPhone?: NullableStringFieldUpdateOperationsInput | string | null
    commodity?: NullableStringFieldUpdateOperationsInput | string | null
    originZip?: StringFieldUpdateOperationsInput | string
    sourceEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: IntFieldUpdateOperationsInput | number
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceEmailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    rawEmailText?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    missingFields?: LoadUpdatemissingFieldsInput | string[]
    aiNotes?: NullableStringFieldUpdateOperationsInput | string | null
    marginTarget?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priorityLevel?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    postToCarriers?: BoolFieldUpdateOperationsInput | boolean
    postToDat?: BoolFieldUpdateOperationsInput | boolean
    postingDelayMinutes?: IntFieldUpdateOperationsInput | number
    maxCarriersToContact?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    preferredRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    complexityFlags?: LoadUpdatecomplexityFlagsInput | string[]
    requiresHumanReview?: BoolFieldUpdateOperationsInput | boolean
    reviewReason?: NullableStringFieldUpdateOperationsInput | string | null
    complexityAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    brokerReviewStatus?: NullableStringFieldUpdateOperationsInput | string | null
    assignedSpecialist?: NullableStringFieldUpdateOperationsInput | string | null
    hazmat?: BoolFieldUpdateOperationsInput | boolean
    totalMiles?: NullableIntFieldUpdateOperationsInput | number | null
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type CarrierCreateInput = {
    updatedAt?: Date | string
    lastContactDate?: Date | string | null
    serviceAreas?: CarrierCreateserviceAreasInput | string[]
    creditRating?: string | null
    createdBy?: string
    loadsCompleted?: number
    insuranceExpiry?: Date | string | null
    contactPhone?: string | null
    preferenceTier?: number
    createdAt?: Date | string
    contactEmail: string
    notes?: string | null
    averageRatePerMile?: Decimal | DecimalJsLike | number | string | null
    modifiedBy?: string | null
    loadsAccepted?: number
    smsEnabled?: boolean
    contactName?: string | null
    dotNumber?: string | null
    id?: string
    carrierName: string
    isPreferred?: boolean
    equipmentTypes?: CarrierCreateequipmentTypesInput | string[]
    status?: string
    mcNumber?: string | null
    phoneNumber?: string | null
    emailEnabled?: boolean
    loadsOffered?: number
  }

  export type CarrierUncheckedCreateInput = {
    updatedAt?: Date | string
    lastContactDate?: Date | string | null
    serviceAreas?: CarrierCreateserviceAreasInput | string[]
    creditRating?: string | null
    createdBy?: string
    loadsCompleted?: number
    insuranceExpiry?: Date | string | null
    contactPhone?: string | null
    preferenceTier?: number
    createdAt?: Date | string
    contactEmail: string
    notes?: string | null
    averageRatePerMile?: Decimal | DecimalJsLike | number | string | null
    modifiedBy?: string | null
    loadsAccepted?: number
    smsEnabled?: boolean
    contactName?: string | null
    dotNumber?: string | null
    id?: string
    carrierName: string
    isPreferred?: boolean
    equipmentTypes?: CarrierCreateequipmentTypesInput | string[]
    status?: string
    mcNumber?: string | null
    phoneNumber?: string | null
    emailEnabled?: boolean
    loadsOffered?: number
  }

  export type CarrierUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceAreas?: CarrierUpdateserviceAreasInput | string[]
    creditRating?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    loadsCompleted?: IntFieldUpdateOperationsInput | number
    insuranceExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    preferenceTier?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    averageRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    loadsAccepted?: IntFieldUpdateOperationsInput | number
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    dotNumber?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    carrierName?: StringFieldUpdateOperationsInput | string
    isPreferred?: BoolFieldUpdateOperationsInput | boolean
    equipmentTypes?: CarrierUpdateequipmentTypesInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    mcNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    loadsOffered?: IntFieldUpdateOperationsInput | number
  }

  export type CarrierUncheckedUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceAreas?: CarrierUpdateserviceAreasInput | string[]
    creditRating?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    loadsCompleted?: IntFieldUpdateOperationsInput | number
    insuranceExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    preferenceTier?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    averageRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    loadsAccepted?: IntFieldUpdateOperationsInput | number
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    dotNumber?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    carrierName?: StringFieldUpdateOperationsInput | string
    isPreferred?: BoolFieldUpdateOperationsInput | boolean
    equipmentTypes?: CarrierUpdateequipmentTypesInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    mcNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    loadsOffered?: IntFieldUpdateOperationsInput | number
  }

  export type CarrierCreateManyInput = {
    updatedAt?: Date | string
    lastContactDate?: Date | string | null
    serviceAreas?: CarrierCreateserviceAreasInput | string[]
    creditRating?: string | null
    createdBy?: string
    loadsCompleted?: number
    insuranceExpiry?: Date | string | null
    contactPhone?: string | null
    preferenceTier?: number
    createdAt?: Date | string
    contactEmail: string
    notes?: string | null
    averageRatePerMile?: Decimal | DecimalJsLike | number | string | null
    modifiedBy?: string | null
    loadsAccepted?: number
    smsEnabled?: boolean
    contactName?: string | null
    dotNumber?: string | null
    id?: string
    carrierName: string
    isPreferred?: boolean
    equipmentTypes?: CarrierCreateequipmentTypesInput | string[]
    status?: string
    mcNumber?: string | null
    phoneNumber?: string | null
    emailEnabled?: boolean
    loadsOffered?: number
  }

  export type CarrierUpdateManyMutationInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceAreas?: CarrierUpdateserviceAreasInput | string[]
    creditRating?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    loadsCompleted?: IntFieldUpdateOperationsInput | number
    insuranceExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    preferenceTier?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    averageRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    loadsAccepted?: IntFieldUpdateOperationsInput | number
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    dotNumber?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    carrierName?: StringFieldUpdateOperationsInput | string
    isPreferred?: BoolFieldUpdateOperationsInput | boolean
    equipmentTypes?: CarrierUpdateequipmentTypesInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    mcNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    loadsOffered?: IntFieldUpdateOperationsInput | number
  }

  export type CarrierUncheckedUpdateManyInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    serviceAreas?: CarrierUpdateserviceAreasInput | string[]
    creditRating?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    loadsCompleted?: IntFieldUpdateOperationsInput | number
    insuranceExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    preferenceTier?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactEmail?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    averageRatePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    modifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    loadsAccepted?: IntFieldUpdateOperationsInput | number
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    dotNumber?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    carrierName?: StringFieldUpdateOperationsInput | string
    isPreferred?: BoolFieldUpdateOperationsInput | boolean
    equipmentTypes?: CarrierUpdateequipmentTypesInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    mcNumber?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    loadsOffered?: IntFieldUpdateOperationsInput | number
  }

  export type QuoteCreateInput = {
    responseMethod?: string | null
    sentAt?: Date | string
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
    updatedAt?: Date | string
    rate?: Decimal | DecimalJsLike | number | string | null
    status?: string
    id?: string
    respondedAt?: Date | string | null
    carrierMc?: string | null
    createdAt?: Date | string
    loadId?: string | null
    carrierId?: string | null
    carrierName?: string | null
    validUntil?: Date | string | null
    carrierEmail?: string | null
    notes?: string | null
    carrierPhone?: string | null
  }

  export type QuoteUncheckedCreateInput = {
    responseMethod?: string | null
    sentAt?: Date | string
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
    updatedAt?: Date | string
    rate?: Decimal | DecimalJsLike | number | string | null
    status?: string
    id?: string
    respondedAt?: Date | string | null
    carrierMc?: string | null
    createdAt?: Date | string
    loadId?: string | null
    carrierId?: string | null
    carrierName?: string | null
    validUntil?: Date | string | null
    carrierEmail?: string | null
    notes?: string | null
    carrierPhone?: string | null
  }

  export type QuoteUpdateInput = {
    responseMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierMc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierName?: NullableStringFieldUpdateOperationsInput | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierEmail?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    carrierPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuoteUncheckedUpdateInput = {
    responseMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierMc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierName?: NullableStringFieldUpdateOperationsInput | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierEmail?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    carrierPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuoteCreateManyInput = {
    responseMethod?: string | null
    sentAt?: Date | string
    ratePerMile?: Decimal | DecimalJsLike | number | string | null
    updatedAt?: Date | string
    rate?: Decimal | DecimalJsLike | number | string | null
    status?: string
    id?: string
    respondedAt?: Date | string | null
    carrierMc?: string | null
    createdAt?: Date | string
    loadId?: string | null
    carrierId?: string | null
    carrierName?: string | null
    validUntil?: Date | string | null
    carrierEmail?: string | null
    notes?: string | null
    carrierPhone?: string | null
  }

  export type QuoteUpdateManyMutationInput = {
    responseMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierMc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierName?: NullableStringFieldUpdateOperationsInput | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierEmail?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    carrierPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuoteUncheckedUpdateManyInput = {
    responseMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratePerMile?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierMc?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    carrierName?: NullableStringFieldUpdateOperationsInput | string | null
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    carrierEmail?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    carrierPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatMessageCreateInput = {
    createdAt?: Date | string
    role: string
    loadId: string
    content: string
    id?: string
    brokerId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedCreateInput = {
    createdAt?: Date | string
    role: string
    loadId: string
    content: string
    id?: string
    brokerId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    loadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    loadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageCreateManyInput = {
    createdAt?: Date | string
    role: string
    loadId: string
    content: string
    id?: string
    brokerId: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    loadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: StringFieldUpdateOperationsInput | string
    loadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CommunicationCreateInput = {
    threadId?: string | null
    aiGenerated?: boolean
    id?: string
    loadId?: string | null
    updatedAt?: Date | string
    brokerId?: string | null
    createdAt?: Date | string
    status?: string
    oauthProvider?: string | null
    parentMessageId?: string | null
    inReplyTo?: string | null
    channel?: string | null
    direction?: string | null
    messageId?: string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: string | null
    toAddress?: string | null
    ccAddresses?: CommunicationCreateccAddressesInput | string[]
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    subject?: string | null
    content?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationUncheckedCreateInput = {
    threadId?: string | null
    aiGenerated?: boolean
    id?: string
    loadId?: string | null
    updatedAt?: Date | string
    brokerId?: string | null
    createdAt?: Date | string
    status?: string
    oauthProvider?: string | null
    parentMessageId?: string | null
    inReplyTo?: string | null
    channel?: string | null
    direction?: string | null
    messageId?: string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: string | null
    toAddress?: string | null
    ccAddresses?: CommunicationCreateccAddressesInput | string[]
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    subject?: string | null
    content?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationUpdateInput = {
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    parentMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    inReplyTo?: NullableStringFieldUpdateOperationsInput | string | null
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: NullableStringFieldUpdateOperationsInput | string | null
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ccAddresses?: CommunicationUpdateccAddressesInput | string[]
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationUncheckedUpdateInput = {
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    parentMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    inReplyTo?: NullableStringFieldUpdateOperationsInput | string | null
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: NullableStringFieldUpdateOperationsInput | string | null
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ccAddresses?: CommunicationUpdateccAddressesInput | string[]
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationCreateManyInput = {
    threadId?: string | null
    aiGenerated?: boolean
    id?: string
    loadId?: string | null
    updatedAt?: Date | string
    brokerId?: string | null
    createdAt?: Date | string
    status?: string
    oauthProvider?: string | null
    parentMessageId?: string | null
    inReplyTo?: string | null
    channel?: string | null
    direction?: string | null
    messageId?: string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: string | null
    toAddress?: string | null
    ccAddresses?: CommunicationCreateccAddressesInput | string[]
    aiConfidence?: Decimal | DecimalJsLike | number | string | null
    subject?: string | null
    content?: string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationUpdateManyMutationInput = {
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    parentMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    inReplyTo?: NullableStringFieldUpdateOperationsInput | string | null
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: NullableStringFieldUpdateOperationsInput | string | null
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ccAddresses?: CommunicationUpdateccAddressesInput | string[]
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type CommunicationUncheckedUpdateManyInput = {
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brokerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    parentMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    inReplyTo?: NullableStringFieldUpdateOperationsInput | string | null
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    extractedData?: NullableJsonNullValueInput | InputJsonValue
    fromAddress?: NullableStringFieldUpdateOperationsInput | string | null
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ccAddresses?: CommunicationUpdateccAddressesInput | string[]
    aiConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: JsonNullValueInput | InputJsonValue
  }

  export type EmailAccountCreateInput = {
    imapPassword?: string | null
    oauthScope?: string | null
    imapUseTls?: boolean
    imapPort?: number | null
    tokenExpiresAt?: Date | string | null
    webhookSubscriptionId?: string | null
    updatedAt?: Date | string
    emailAddress: string
    lastSyncAt?: Date | string | null
    webhookSecret?: string | null
    lastError?: string | null
    webhookExpiresAt?: Date | string | null
    imapHost?: string | null
    createdAt?: Date | string
    errorCount?: number
    tenantId?: string | null
    monitorFolders?: EmailAccountCreatemonitorFoldersInput | string[]
    brokerId: string
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: string | null
    senderWhitelist?: EmailAccountCreatesenderWhitelistInput | string[]
    id?: string
    createdBy?: string
    refreshToken?: string | null
    senderBlacklist?: EmailAccountCreatesenderBlacklistInput | string[]
    clientId?: string | null
    subjectFilters?: EmailAccountCreatesubjectFiltersInput | string[]
    displayName?: string | null
    imapUsername?: string | null
    provider: string
    status?: string
  }

  export type EmailAccountUncheckedCreateInput = {
    imapPassword?: string | null
    oauthScope?: string | null
    imapUseTls?: boolean
    imapPort?: number | null
    tokenExpiresAt?: Date | string | null
    webhookSubscriptionId?: string | null
    updatedAt?: Date | string
    emailAddress: string
    lastSyncAt?: Date | string | null
    webhookSecret?: string | null
    lastError?: string | null
    webhookExpiresAt?: Date | string | null
    imapHost?: string | null
    createdAt?: Date | string
    errorCount?: number
    tenantId?: string | null
    monitorFolders?: EmailAccountCreatemonitorFoldersInput | string[]
    brokerId: string
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: string | null
    senderWhitelist?: EmailAccountCreatesenderWhitelistInput | string[]
    id?: string
    createdBy?: string
    refreshToken?: string | null
    senderBlacklist?: EmailAccountCreatesenderBlacklistInput | string[]
    clientId?: string | null
    subjectFilters?: EmailAccountCreatesubjectFiltersInput | string[]
    displayName?: string | null
    imapUsername?: string | null
    provider: string
    status?: string
  }

  export type EmailAccountUpdateInput = {
    imapPassword?: NullableStringFieldUpdateOperationsInput | string | null
    oauthScope?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseTls?: BoolFieldUpdateOperationsInput | boolean
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    tokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    webhookExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorCount?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    monitorFolders?: EmailAccountUpdatemonitorFoldersInput | string[]
    brokerId?: StringFieldUpdateOperationsInput | string
    processingEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoReplyEnabled?: BoolFieldUpdateOperationsInput | boolean
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderWhitelist?: EmailAccountUpdatesenderWhitelistInput | string[]
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderBlacklist?: EmailAccountUpdatesenderBlacklistInput | string[]
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    subjectFilters?: EmailAccountUpdatesubjectFiltersInput | string[]
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailAccountUncheckedUpdateInput = {
    imapPassword?: NullableStringFieldUpdateOperationsInput | string | null
    oauthScope?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseTls?: BoolFieldUpdateOperationsInput | boolean
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    tokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    webhookExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorCount?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    monitorFolders?: EmailAccountUpdatemonitorFoldersInput | string[]
    brokerId?: StringFieldUpdateOperationsInput | string
    processingEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoReplyEnabled?: BoolFieldUpdateOperationsInput | boolean
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderWhitelist?: EmailAccountUpdatesenderWhitelistInput | string[]
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderBlacklist?: EmailAccountUpdatesenderBlacklistInput | string[]
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    subjectFilters?: EmailAccountUpdatesubjectFiltersInput | string[]
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailAccountCreateManyInput = {
    imapPassword?: string | null
    oauthScope?: string | null
    imapUseTls?: boolean
    imapPort?: number | null
    tokenExpiresAt?: Date | string | null
    webhookSubscriptionId?: string | null
    updatedAt?: Date | string
    emailAddress: string
    lastSyncAt?: Date | string | null
    webhookSecret?: string | null
    lastError?: string | null
    webhookExpiresAt?: Date | string | null
    imapHost?: string | null
    createdAt?: Date | string
    errorCount?: number
    tenantId?: string | null
    monitorFolders?: EmailAccountCreatemonitorFoldersInput | string[]
    brokerId: string
    processingEnabled?: boolean
    autoReplyEnabled?: boolean
    accessToken?: string | null
    senderWhitelist?: EmailAccountCreatesenderWhitelistInput | string[]
    id?: string
    createdBy?: string
    refreshToken?: string | null
    senderBlacklist?: EmailAccountCreatesenderBlacklistInput | string[]
    clientId?: string | null
    subjectFilters?: EmailAccountCreatesubjectFiltersInput | string[]
    displayName?: string | null
    imapUsername?: string | null
    provider: string
    status?: string
  }

  export type EmailAccountUpdateManyMutationInput = {
    imapPassword?: NullableStringFieldUpdateOperationsInput | string | null
    oauthScope?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseTls?: BoolFieldUpdateOperationsInput | boolean
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    tokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    webhookExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorCount?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    monitorFolders?: EmailAccountUpdatemonitorFoldersInput | string[]
    brokerId?: StringFieldUpdateOperationsInput | string
    processingEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoReplyEnabled?: BoolFieldUpdateOperationsInput | boolean
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderWhitelist?: EmailAccountUpdatesenderWhitelistInput | string[]
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderBlacklist?: EmailAccountUpdatesenderBlacklistInput | string[]
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    subjectFilters?: EmailAccountUpdatesubjectFiltersInput | string[]
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailAccountUncheckedUpdateManyInput = {
    imapPassword?: NullableStringFieldUpdateOperationsInput | string | null
    oauthScope?: NullableStringFieldUpdateOperationsInput | string | null
    imapUseTls?: BoolFieldUpdateOperationsInput | boolean
    imapPort?: NullableIntFieldUpdateOperationsInput | number | null
    tokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    webhookSecret?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    webhookExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imapHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    errorCount?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    monitorFolders?: EmailAccountUpdatemonitorFoldersInput | string[]
    brokerId?: StringFieldUpdateOperationsInput | string
    processingEnabled?: BoolFieldUpdateOperationsInput | boolean
    autoReplyEnabled?: BoolFieldUpdateOperationsInput | boolean
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderWhitelist?: EmailAccountUpdatesenderWhitelistInput | string[]
    id?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    senderBlacklist?: EmailAccountUpdatesenderBlacklistInput | string[]
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    subjectFilters?: EmailAccountUpdatesubjectFiltersInput | string[]
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    imapUsername?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailProcessingLogCreateInput = {
    subject?: string | null
    emailBodyText?: string | null
    complexityFlags?: EmailProcessingLogCreatecomplexityFlagsInput | string[]
    threadId?: string | null
    createdAt?: Date | string
    processingStatus: string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: string | null
    id?: string
    retryCount?: number
    emailBodyHtml?: string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: Date | string | null
    messageId: string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    senderEmail?: string | null
    brokerId: string
    intentClassification?: string | null
    loadId?: string | null
    loadNumber?: string | null
    errorMessage?: string | null
    processedAt?: Date | string
  }

  export type EmailProcessingLogUncheckedCreateInput = {
    subject?: string | null
    emailBodyText?: string | null
    complexityFlags?: EmailProcessingLogCreatecomplexityFlagsInput | string[]
    threadId?: string | null
    createdAt?: Date | string
    processingStatus: string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: string | null
    id?: string
    retryCount?: number
    emailBodyHtml?: string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: Date | string | null
    messageId: string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    senderEmail?: string | null
    brokerId: string
    intentClassification?: string | null
    loadId?: string | null
    loadNumber?: string | null
    errorMessage?: string | null
    processedAt?: Date | string
  }

  export type EmailProcessingLogUpdateInput = {
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    emailBodyText?: NullableStringFieldUpdateOperationsInput | string | null
    complexityFlags?: EmailProcessingLogUpdatecomplexityFlagsInput | string[]
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    emailBodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageId?: StringFieldUpdateOperationsInput | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    senderEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    intentClassification?: NullableStringFieldUpdateOperationsInput | string | null
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailProcessingLogUncheckedUpdateInput = {
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    emailBodyText?: NullableStringFieldUpdateOperationsInput | string | null
    complexityFlags?: EmailProcessingLogUpdatecomplexityFlagsInput | string[]
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    emailBodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageId?: StringFieldUpdateOperationsInput | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    senderEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    intentClassification?: NullableStringFieldUpdateOperationsInput | string | null
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailProcessingLogCreateManyInput = {
    subject?: string | null
    emailBodyText?: string | null
    complexityFlags?: EmailProcessingLogCreatecomplexityFlagsInput | string[]
    threadId?: string | null
    createdAt?: Date | string
    processingStatus: string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: string | null
    id?: string
    retryCount?: number
    emailBodyHtml?: string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: Date | string | null
    messageId: string
    extractionConfidence?: Decimal | DecimalJsLike | number | string | null
    senderEmail?: string | null
    brokerId: string
    intentClassification?: string | null
    loadId?: string | null
    loadNumber?: string | null
    errorMessage?: string | null
    processedAt?: Date | string
  }

  export type EmailProcessingLogUpdateManyMutationInput = {
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    emailBodyText?: NullableStringFieldUpdateOperationsInput | string | null
    complexityFlags?: EmailProcessingLogUpdatecomplexityFlagsInput | string[]
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    emailBodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageId?: StringFieldUpdateOperationsInput | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    senderEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    intentClassification?: NullableStringFieldUpdateOperationsInput | string | null
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailProcessingLogUncheckedUpdateManyInput = {
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    emailBodyText?: NullableStringFieldUpdateOperationsInput | string | null
    complexityFlags?: EmailProcessingLogUpdatecomplexityFlagsInput | string[]
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processingStatus?: StringFieldUpdateOperationsInput | string
    rawEmailHeaders?: NullableJsonNullValueInput | InputJsonValue
    emailAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    retryCount?: IntFieldUpdateOperationsInput | number
    emailBodyHtml?: NullableStringFieldUpdateOperationsInput | string | null
    attachmentsInfo?: NullableJsonNullValueInput | InputJsonValue
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    receivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messageId?: StringFieldUpdateOperationsInput | string
    extractionConfidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    senderEmail?: NullableStringFieldUpdateOperationsInput | string | null
    brokerId?: StringFieldUpdateOperationsInput | string
    intentClassification?: NullableStringFieldUpdateOperationsInput | string | null
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    loadNumber?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCreateInput = {
    messageId: string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: string | null
    processedAt?: Date | string
    subject?: string | null
    provider?: string | null
    fromAddress: string
    status?: string
    receivedAt: Date | string
    createdAt?: Date | string
    id?: string
    brokerId: string
    toAddress: string
  }

  export type EmailUncheckedCreateInput = {
    messageId: string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: string | null
    processedAt?: Date | string
    subject?: string | null
    provider?: string | null
    fromAddress: string
    status?: string
    receivedAt: Date | string
    createdAt?: Date | string
    id?: string
    brokerId: string
    toAddress: string
  }

  export type EmailUpdateInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    fromAddress?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
  }

  export type EmailUncheckedUpdateInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    fromAddress?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
  }

  export type EmailCreateManyInput = {
    messageId: string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: string | null
    processedAt?: Date | string
    subject?: string | null
    provider?: string | null
    fromAddress: string
    status?: string
    receivedAt: Date | string
    createdAt?: Date | string
    id?: string
    brokerId: string
    toAddress: string
  }

  export type EmailUpdateManyMutationInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    fromAddress?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
  }

  export type EmailUncheckedUpdateManyInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    content?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    fromAddress?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    receivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    brokerId?: StringFieldUpdateOperationsInput | string
    toAddress?: StringFieldUpdateOperationsInput | string
  }

  export type LoadBlastCreateInput = {
    loadId?: string | null
    id?: string
    createdAt?: Date | string
    carrierId?: string | null
    blastType: string
    blastStatus?: string
    subjectLine?: string | null
    messageContent?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    responseReceivedAt?: Date | string | null
    responseType?: string | null
    responseContent?: string | null
    resendMessageId?: string | null
    twilioMessageId?: string | null
    datPostingId?: string | null
    errorMessage?: string | null
    retryCount?: number
    createdBy?: string
  }

  export type LoadBlastUncheckedCreateInput = {
    loadId?: string | null
    id?: string
    createdAt?: Date | string
    carrierId?: string | null
    blastType: string
    blastStatus?: string
    subjectLine?: string | null
    messageContent?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    responseReceivedAt?: Date | string | null
    responseType?: string | null
    responseContent?: string | null
    resendMessageId?: string | null
    twilioMessageId?: string | null
    datPostingId?: string | null
    errorMessage?: string | null
    retryCount?: number
    createdBy?: string
  }

  export type LoadBlastUpdateInput = {
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    blastType?: StringFieldUpdateOperationsInput | string
    blastStatus?: StringFieldUpdateOperationsInput | string
    subjectLine?: NullableStringFieldUpdateOperationsInput | string | null
    messageContent?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseReceivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseType?: NullableStringFieldUpdateOperationsInput | string | null
    responseContent?: NullableStringFieldUpdateOperationsInput | string | null
    resendMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    twilioMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    datPostingId?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type LoadBlastUncheckedUpdateInput = {
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    blastType?: StringFieldUpdateOperationsInput | string
    blastStatus?: StringFieldUpdateOperationsInput | string
    subjectLine?: NullableStringFieldUpdateOperationsInput | string | null
    messageContent?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseReceivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseType?: NullableStringFieldUpdateOperationsInput | string | null
    responseContent?: NullableStringFieldUpdateOperationsInput | string | null
    resendMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    twilioMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    datPostingId?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type LoadBlastCreateManyInput = {
    loadId?: string | null
    id?: string
    createdAt?: Date | string
    carrierId?: string | null
    blastType: string
    blastStatus?: string
    subjectLine?: string | null
    messageContent?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    responseReceivedAt?: Date | string | null
    responseType?: string | null
    responseContent?: string | null
    resendMessageId?: string | null
    twilioMessageId?: string | null
    datPostingId?: string | null
    errorMessage?: string | null
    retryCount?: number
    createdBy?: string
  }

  export type LoadBlastUpdateManyMutationInput = {
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    blastType?: StringFieldUpdateOperationsInput | string
    blastStatus?: StringFieldUpdateOperationsInput | string
    subjectLine?: NullableStringFieldUpdateOperationsInput | string | null
    messageContent?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseReceivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseType?: NullableStringFieldUpdateOperationsInput | string | null
    responseContent?: NullableStringFieldUpdateOperationsInput | string | null
    resendMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    twilioMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    datPostingId?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type LoadBlastUncheckedUpdateManyInput = {
    loadId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrierId?: NullableStringFieldUpdateOperationsInput | string | null
    blastType?: StringFieldUpdateOperationsInput | string
    blastStatus?: StringFieldUpdateOperationsInput | string
    subjectLine?: NullableStringFieldUpdateOperationsInput | string | null
    messageContent?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseReceivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    responseType?: NullableStringFieldUpdateOperationsInput | string | null
    responseContent?: NullableStringFieldUpdateOperationsInput | string | null
    resendMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    twilioMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    datPostingId?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId: string
    createdAt?: Date | string
    message: string
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId: string
    createdAt?: Date | string
    message: string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: string
    title: string
    read?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId: string
    createdAt?: Date | string
    message: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    brokerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type OAuthStateCreateInput = {
    createdAt?: Date | string
    userId: string
    expiresAt: Date | string
    state: string
    provider: string
  }

  export type OAuthStateUncheckedCreateInput = {
    createdAt?: Date | string
    userId: string
    expiresAt: Date | string
    state: string
    provider: string
  }

  export type OAuthStateUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
  }

  export type OAuthStateUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
  }

  export type OAuthStateCreateManyInput = {
    createdAt?: Date | string
    userId: string
    expiresAt: Date | string
    state: string
    provider: string
  }

  export type OAuthStateUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
  }

  export type OAuthStateUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsCreateInput = {
    updatedAt?: Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId: string
  }

  export type UserSettingsUncheckedCreateInput = {
    updatedAt?: Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId: string
  }

  export type UserSettingsUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsUncheckedUpdateInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsCreateManyInput = {
    updatedAt?: Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    userId: string
  }

  export type UserSettingsUpdateManyMutationInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confidenceThresholds?: JsonNullValueInput | InputJsonValue
    id?: StringFieldUpdateOperationsInput | string
    notifications?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    lastProvider?: SortOrder
    lastLogin?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    lastProvider?: SortOrder
    lastLogin?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    lastProvider?: SortOrder
    lastLogin?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    email?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type BrokerCountOrderByAggregateInput = {
    updatedAt?: SortOrder
    email?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    oauthTokens?: SortOrder
    apiKeys?: SortOrder
    id?: SortOrder
    companyName?: SortOrder
    userId?: SortOrder
    subscriptionTier?: SortOrder
  }

  export type BrokerMaxOrderByAggregateInput = {
    updatedAt?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    companyName?: SortOrder
    userId?: SortOrder
    subscriptionTier?: SortOrder
  }

  export type BrokerMinOrderByAggregateInput = {
    updatedAt?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    companyName?: SortOrder
    userId?: SortOrder
    subscriptionTier?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EmailConnectionUserIdProviderEmailCompoundUniqueInput = {
    userId: string
    provider: string
    email: string
  }

  export type EmailConnectionCountOrderByAggregateInput = {
    oauthRefreshToken?: SortOrder
    provider?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    errorMessage?: SortOrder
    brokerId?: SortOrder
    imapPasswordEncrypted?: SortOrder
    oauthTokenExpiresAt?: SortOrder
    status?: SortOrder
    imapHost?: SortOrder
    imapUseSsl?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    oauthAccessToken?: SortOrder
    lastChecked?: SortOrder
    id?: SortOrder
    email?: SortOrder
    imapPort?: SortOrder
    imapUsername?: SortOrder
  }

  export type EmailConnectionAvgOrderByAggregateInput = {
    imapPort?: SortOrder
  }

  export type EmailConnectionMaxOrderByAggregateInput = {
    oauthRefreshToken?: SortOrder
    provider?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    errorMessage?: SortOrder
    brokerId?: SortOrder
    imapPasswordEncrypted?: SortOrder
    oauthTokenExpiresAt?: SortOrder
    status?: SortOrder
    imapHost?: SortOrder
    imapUseSsl?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    oauthAccessToken?: SortOrder
    lastChecked?: SortOrder
    id?: SortOrder
    email?: SortOrder
    imapPort?: SortOrder
    imapUsername?: SortOrder
  }

  export type EmailConnectionMinOrderByAggregateInput = {
    oauthRefreshToken?: SortOrder
    provider?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    errorMessage?: SortOrder
    brokerId?: SortOrder
    imapPasswordEncrypted?: SortOrder
    oauthTokenExpiresAt?: SortOrder
    status?: SortOrder
    imapHost?: SortOrder
    imapUseSsl?: SortOrder
    isPrimary?: SortOrder
    userId?: SortOrder
    oauthAccessToken?: SortOrder
    lastChecked?: SortOrder
    id?: SortOrder
    email?: SortOrder
    imapPort?: SortOrder
    imapUsername?: SortOrder
  }

  export type EmailConnectionSumOrderByAggregateInput = {
    imapPort?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type LoadCountOrderByAggregateInput = {
    brokerReviewedAt?: SortOrder
    brokerReviewNotes?: SortOrder
    weightLb?: SortOrder
    shipperName?: SortOrder
    equipment?: SortOrder
    complexityOverrides?: SortOrder
    pickupDt?: SortOrder
    shipperEmail?: SortOrder
    destZip?: SortOrder
    shipperPhone?: SortOrder
    commodity?: SortOrder
    originZip?: SortOrder
    sourceEmailId?: SortOrder
    status?: SortOrder
    reviewedBy?: SortOrder
    riskScore?: SortOrder
    loadNumber?: SortOrder
    sourceType?: SortOrder
    sourceEmailAccountId?: SortOrder
    rawEmailText?: SortOrder
    updatedAt?: SortOrder
    extractionConfidence?: SortOrder
    brokerId?: SortOrder
    missingFields?: SortOrder
    aiNotes?: SortOrder
    marginTarget?: SortOrder
    createdAt?: SortOrder
    priorityLevel?: SortOrder
    createdBy?: SortOrder
    modifiedBy?: SortOrder
    postToCarriers?: SortOrder
    postToDat?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    id?: SortOrder
    preferredRatePerMile?: SortOrder
    complexityFlags?: SortOrder
    requiresHumanReview?: SortOrder
    reviewReason?: SortOrder
    complexityAnalysis?: SortOrder
    brokerReviewStatus?: SortOrder
    assignedSpecialist?: SortOrder
    hazmat?: SortOrder
    totalMiles?: SortOrder
    ratePerMile?: SortOrder
  }

  export type LoadAvgOrderByAggregateInput = {
    weightLb?: SortOrder
    riskScore?: SortOrder
    extractionConfidence?: SortOrder
    marginTarget?: SortOrder
    priorityLevel?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    preferredRatePerMile?: SortOrder
    totalMiles?: SortOrder
    ratePerMile?: SortOrder
  }

  export type LoadMaxOrderByAggregateInput = {
    brokerReviewedAt?: SortOrder
    brokerReviewNotes?: SortOrder
    weightLb?: SortOrder
    shipperName?: SortOrder
    equipment?: SortOrder
    pickupDt?: SortOrder
    shipperEmail?: SortOrder
    destZip?: SortOrder
    shipperPhone?: SortOrder
    commodity?: SortOrder
    originZip?: SortOrder
    sourceEmailId?: SortOrder
    status?: SortOrder
    reviewedBy?: SortOrder
    riskScore?: SortOrder
    loadNumber?: SortOrder
    sourceType?: SortOrder
    sourceEmailAccountId?: SortOrder
    rawEmailText?: SortOrder
    updatedAt?: SortOrder
    extractionConfidence?: SortOrder
    brokerId?: SortOrder
    aiNotes?: SortOrder
    marginTarget?: SortOrder
    createdAt?: SortOrder
    priorityLevel?: SortOrder
    createdBy?: SortOrder
    modifiedBy?: SortOrder
    postToCarriers?: SortOrder
    postToDat?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    id?: SortOrder
    preferredRatePerMile?: SortOrder
    requiresHumanReview?: SortOrder
    reviewReason?: SortOrder
    complexityAnalysis?: SortOrder
    brokerReviewStatus?: SortOrder
    assignedSpecialist?: SortOrder
    hazmat?: SortOrder
    totalMiles?: SortOrder
    ratePerMile?: SortOrder
  }

  export type LoadMinOrderByAggregateInput = {
    brokerReviewedAt?: SortOrder
    brokerReviewNotes?: SortOrder
    weightLb?: SortOrder
    shipperName?: SortOrder
    equipment?: SortOrder
    pickupDt?: SortOrder
    shipperEmail?: SortOrder
    destZip?: SortOrder
    shipperPhone?: SortOrder
    commodity?: SortOrder
    originZip?: SortOrder
    sourceEmailId?: SortOrder
    status?: SortOrder
    reviewedBy?: SortOrder
    riskScore?: SortOrder
    loadNumber?: SortOrder
    sourceType?: SortOrder
    sourceEmailAccountId?: SortOrder
    rawEmailText?: SortOrder
    updatedAt?: SortOrder
    extractionConfidence?: SortOrder
    brokerId?: SortOrder
    aiNotes?: SortOrder
    marginTarget?: SortOrder
    createdAt?: SortOrder
    priorityLevel?: SortOrder
    createdBy?: SortOrder
    modifiedBy?: SortOrder
    postToCarriers?: SortOrder
    postToDat?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    id?: SortOrder
    preferredRatePerMile?: SortOrder
    requiresHumanReview?: SortOrder
    reviewReason?: SortOrder
    complexityAnalysis?: SortOrder
    brokerReviewStatus?: SortOrder
    assignedSpecialist?: SortOrder
    hazmat?: SortOrder
    totalMiles?: SortOrder
    ratePerMile?: SortOrder
  }

  export type LoadSumOrderByAggregateInput = {
    weightLb?: SortOrder
    riskScore?: SortOrder
    extractionConfidence?: SortOrder
    marginTarget?: SortOrder
    priorityLevel?: SortOrder
    postingDelayMinutes?: SortOrder
    maxCarriersToContact?: SortOrder
    preferredRatePerMile?: SortOrder
    totalMiles?: SortOrder
    ratePerMile?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type CarrierCountOrderByAggregateInput = {
    updatedAt?: SortOrder
    lastContactDate?: SortOrder
    serviceAreas?: SortOrder
    creditRating?: SortOrder
    createdBy?: SortOrder
    loadsCompleted?: SortOrder
    insuranceExpiry?: SortOrder
    contactPhone?: SortOrder
    preferenceTier?: SortOrder
    createdAt?: SortOrder
    contactEmail?: SortOrder
    notes?: SortOrder
    averageRatePerMile?: SortOrder
    modifiedBy?: SortOrder
    loadsAccepted?: SortOrder
    smsEnabled?: SortOrder
    contactName?: SortOrder
    dotNumber?: SortOrder
    id?: SortOrder
    carrierName?: SortOrder
    isPreferred?: SortOrder
    equipmentTypes?: SortOrder
    status?: SortOrder
    mcNumber?: SortOrder
    phoneNumber?: SortOrder
    emailEnabled?: SortOrder
    loadsOffered?: SortOrder
  }

  export type CarrierAvgOrderByAggregateInput = {
    loadsCompleted?: SortOrder
    preferenceTier?: SortOrder
    averageRatePerMile?: SortOrder
    loadsAccepted?: SortOrder
    loadsOffered?: SortOrder
  }

  export type CarrierMaxOrderByAggregateInput = {
    updatedAt?: SortOrder
    lastContactDate?: SortOrder
    creditRating?: SortOrder
    createdBy?: SortOrder
    loadsCompleted?: SortOrder
    insuranceExpiry?: SortOrder
    contactPhone?: SortOrder
    preferenceTier?: SortOrder
    createdAt?: SortOrder
    contactEmail?: SortOrder
    notes?: SortOrder
    averageRatePerMile?: SortOrder
    modifiedBy?: SortOrder
    loadsAccepted?: SortOrder
    smsEnabled?: SortOrder
    contactName?: SortOrder
    dotNumber?: SortOrder
    id?: SortOrder
    carrierName?: SortOrder
    isPreferred?: SortOrder
    status?: SortOrder
    mcNumber?: SortOrder
    phoneNumber?: SortOrder
    emailEnabled?: SortOrder
    loadsOffered?: SortOrder
  }

  export type CarrierMinOrderByAggregateInput = {
    updatedAt?: SortOrder
    lastContactDate?: SortOrder
    creditRating?: SortOrder
    createdBy?: SortOrder
    loadsCompleted?: SortOrder
    insuranceExpiry?: SortOrder
    contactPhone?: SortOrder
    preferenceTier?: SortOrder
    createdAt?: SortOrder
    contactEmail?: SortOrder
    notes?: SortOrder
    averageRatePerMile?: SortOrder
    modifiedBy?: SortOrder
    loadsAccepted?: SortOrder
    smsEnabled?: SortOrder
    contactName?: SortOrder
    dotNumber?: SortOrder
    id?: SortOrder
    carrierName?: SortOrder
    isPreferred?: SortOrder
    status?: SortOrder
    mcNumber?: SortOrder
    phoneNumber?: SortOrder
    emailEnabled?: SortOrder
    loadsOffered?: SortOrder
  }

  export type CarrierSumOrderByAggregateInput = {
    loadsCompleted?: SortOrder
    preferenceTier?: SortOrder
    averageRatePerMile?: SortOrder
    loadsAccepted?: SortOrder
    loadsOffered?: SortOrder
  }

  export type QuoteCountOrderByAggregateInput = {
    responseMethod?: SortOrder
    sentAt?: SortOrder
    ratePerMile?: SortOrder
    updatedAt?: SortOrder
    rate?: SortOrder
    status?: SortOrder
    id?: SortOrder
    respondedAt?: SortOrder
    carrierMc?: SortOrder
    createdAt?: SortOrder
    loadId?: SortOrder
    carrierId?: SortOrder
    carrierName?: SortOrder
    validUntil?: SortOrder
    carrierEmail?: SortOrder
    notes?: SortOrder
    carrierPhone?: SortOrder
  }

  export type QuoteAvgOrderByAggregateInput = {
    ratePerMile?: SortOrder
    rate?: SortOrder
  }

  export type QuoteMaxOrderByAggregateInput = {
    responseMethod?: SortOrder
    sentAt?: SortOrder
    ratePerMile?: SortOrder
    updatedAt?: SortOrder
    rate?: SortOrder
    status?: SortOrder
    id?: SortOrder
    respondedAt?: SortOrder
    carrierMc?: SortOrder
    createdAt?: SortOrder
    loadId?: SortOrder
    carrierId?: SortOrder
    carrierName?: SortOrder
    validUntil?: SortOrder
    carrierEmail?: SortOrder
    notes?: SortOrder
    carrierPhone?: SortOrder
  }

  export type QuoteMinOrderByAggregateInput = {
    responseMethod?: SortOrder
    sentAt?: SortOrder
    ratePerMile?: SortOrder
    updatedAt?: SortOrder
    rate?: SortOrder
    status?: SortOrder
    id?: SortOrder
    respondedAt?: SortOrder
    carrierMc?: SortOrder
    createdAt?: SortOrder
    loadId?: SortOrder
    carrierId?: SortOrder
    carrierName?: SortOrder
    validUntil?: SortOrder
    carrierEmail?: SortOrder
    notes?: SortOrder
    carrierPhone?: SortOrder
  }

  export type QuoteSumOrderByAggregateInput = {
    ratePerMile?: SortOrder
    rate?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChatMessageCountOrderByAggregateInput = {
    createdAt?: SortOrder
    role?: SortOrder
    loadId?: SortOrder
    content?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    metadata?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    role?: SortOrder
    loadId?: SortOrder
    content?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    createdAt?: SortOrder
    role?: SortOrder
    loadId?: SortOrder
    content?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type CommunicationCountOrderByAggregateInput = {
    threadId?: SortOrder
    aiGenerated?: SortOrder
    id?: SortOrder
    loadId?: SortOrder
    updatedAt?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    oauthProvider?: SortOrder
    parentMessageId?: SortOrder
    inReplyTo?: SortOrder
    channel?: SortOrder
    direction?: SortOrder
    messageId?: SortOrder
    extractedData?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    ccAddresses?: SortOrder
    aiConfidence?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
  }

  export type CommunicationAvgOrderByAggregateInput = {
    aiConfidence?: SortOrder
  }

  export type CommunicationMaxOrderByAggregateInput = {
    threadId?: SortOrder
    aiGenerated?: SortOrder
    id?: SortOrder
    loadId?: SortOrder
    updatedAt?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    oauthProvider?: SortOrder
    parentMessageId?: SortOrder
    inReplyTo?: SortOrder
    channel?: SortOrder
    direction?: SortOrder
    messageId?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    aiConfidence?: SortOrder
    subject?: SortOrder
    content?: SortOrder
  }

  export type CommunicationMinOrderByAggregateInput = {
    threadId?: SortOrder
    aiGenerated?: SortOrder
    id?: SortOrder
    loadId?: SortOrder
    updatedAt?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    oauthProvider?: SortOrder
    parentMessageId?: SortOrder
    inReplyTo?: SortOrder
    channel?: SortOrder
    direction?: SortOrder
    messageId?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    aiConfidence?: SortOrder
    subject?: SortOrder
    content?: SortOrder
  }

  export type CommunicationSumOrderByAggregateInput = {
    aiConfidence?: SortOrder
  }

  export type EmailAccountBrokerIdEmailAddressCompoundUniqueInput = {
    brokerId: string
    emailAddress: string
  }

  export type EmailAccountCountOrderByAggregateInput = {
    imapPassword?: SortOrder
    oauthScope?: SortOrder
    imapUseTls?: SortOrder
    imapPort?: SortOrder
    tokenExpiresAt?: SortOrder
    webhookSubscriptionId?: SortOrder
    updatedAt?: SortOrder
    emailAddress?: SortOrder
    lastSyncAt?: SortOrder
    webhookSecret?: SortOrder
    lastError?: SortOrder
    webhookExpiresAt?: SortOrder
    imapHost?: SortOrder
    createdAt?: SortOrder
    errorCount?: SortOrder
    tenantId?: SortOrder
    monitorFolders?: SortOrder
    brokerId?: SortOrder
    processingEnabled?: SortOrder
    autoReplyEnabled?: SortOrder
    accessToken?: SortOrder
    senderWhitelist?: SortOrder
    id?: SortOrder
    createdBy?: SortOrder
    refreshToken?: SortOrder
    senderBlacklist?: SortOrder
    clientId?: SortOrder
    subjectFilters?: SortOrder
    displayName?: SortOrder
    imapUsername?: SortOrder
    provider?: SortOrder
    status?: SortOrder
  }

  export type EmailAccountAvgOrderByAggregateInput = {
    imapPort?: SortOrder
    errorCount?: SortOrder
  }

  export type EmailAccountMaxOrderByAggregateInput = {
    imapPassword?: SortOrder
    oauthScope?: SortOrder
    imapUseTls?: SortOrder
    imapPort?: SortOrder
    tokenExpiresAt?: SortOrder
    webhookSubscriptionId?: SortOrder
    updatedAt?: SortOrder
    emailAddress?: SortOrder
    lastSyncAt?: SortOrder
    webhookSecret?: SortOrder
    lastError?: SortOrder
    webhookExpiresAt?: SortOrder
    imapHost?: SortOrder
    createdAt?: SortOrder
    errorCount?: SortOrder
    tenantId?: SortOrder
    brokerId?: SortOrder
    processingEnabled?: SortOrder
    autoReplyEnabled?: SortOrder
    accessToken?: SortOrder
    id?: SortOrder
    createdBy?: SortOrder
    refreshToken?: SortOrder
    clientId?: SortOrder
    displayName?: SortOrder
    imapUsername?: SortOrder
    provider?: SortOrder
    status?: SortOrder
  }

  export type EmailAccountMinOrderByAggregateInput = {
    imapPassword?: SortOrder
    oauthScope?: SortOrder
    imapUseTls?: SortOrder
    imapPort?: SortOrder
    tokenExpiresAt?: SortOrder
    webhookSubscriptionId?: SortOrder
    updatedAt?: SortOrder
    emailAddress?: SortOrder
    lastSyncAt?: SortOrder
    webhookSecret?: SortOrder
    lastError?: SortOrder
    webhookExpiresAt?: SortOrder
    imapHost?: SortOrder
    createdAt?: SortOrder
    errorCount?: SortOrder
    tenantId?: SortOrder
    brokerId?: SortOrder
    processingEnabled?: SortOrder
    autoReplyEnabled?: SortOrder
    accessToken?: SortOrder
    id?: SortOrder
    createdBy?: SortOrder
    refreshToken?: SortOrder
    clientId?: SortOrder
    displayName?: SortOrder
    imapUsername?: SortOrder
    provider?: SortOrder
    status?: SortOrder
  }

  export type EmailAccountSumOrderByAggregateInput = {
    imapPort?: SortOrder
    errorCount?: SortOrder
  }

  export type EmailProcessingLogEmailAccountIdMessageIdCompoundUniqueInput = {
    emailAccountId: string
    messageId: string
  }

  export type EmailProcessingLogCountOrderByAggregateInput = {
    subject?: SortOrder
    emailBodyText?: SortOrder
    complexityFlags?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
    processingStatus?: SortOrder
    rawEmailHeaders?: SortOrder
    emailAccountId?: SortOrder
    id?: SortOrder
    retryCount?: SortOrder
    emailBodyHtml?: SortOrder
    attachmentsInfo?: SortOrder
    errorDetails?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    extractionConfidence?: SortOrder
    senderEmail?: SortOrder
    brokerId?: SortOrder
    intentClassification?: SortOrder
    loadId?: SortOrder
    loadNumber?: SortOrder
    errorMessage?: SortOrder
    processedAt?: SortOrder
  }

  export type EmailProcessingLogAvgOrderByAggregateInput = {
    retryCount?: SortOrder
    extractionConfidence?: SortOrder
  }

  export type EmailProcessingLogMaxOrderByAggregateInput = {
    subject?: SortOrder
    emailBodyText?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
    processingStatus?: SortOrder
    emailAccountId?: SortOrder
    id?: SortOrder
    retryCount?: SortOrder
    emailBodyHtml?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    extractionConfidence?: SortOrder
    senderEmail?: SortOrder
    brokerId?: SortOrder
    intentClassification?: SortOrder
    loadId?: SortOrder
    loadNumber?: SortOrder
    errorMessage?: SortOrder
    processedAt?: SortOrder
  }

  export type EmailProcessingLogMinOrderByAggregateInput = {
    subject?: SortOrder
    emailBodyText?: SortOrder
    threadId?: SortOrder
    createdAt?: SortOrder
    processingStatus?: SortOrder
    emailAccountId?: SortOrder
    id?: SortOrder
    retryCount?: SortOrder
    emailBodyHtml?: SortOrder
    receivedAt?: SortOrder
    messageId?: SortOrder
    extractionConfidence?: SortOrder
    senderEmail?: SortOrder
    brokerId?: SortOrder
    intentClassification?: SortOrder
    loadId?: SortOrder
    loadNumber?: SortOrder
    errorMessage?: SortOrder
    processedAt?: SortOrder
  }

  export type EmailProcessingLogSumOrderByAggregateInput = {
    retryCount?: SortOrder
    extractionConfidence?: SortOrder
  }

  export type EmailCountOrderByAggregateInput = {
    messageId?: SortOrder
    rawData?: SortOrder
    content?: SortOrder
    processedAt?: SortOrder
    subject?: SortOrder
    provider?: SortOrder
    fromAddress?: SortOrder
    status?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    toAddress?: SortOrder
  }

  export type EmailMaxOrderByAggregateInput = {
    messageId?: SortOrder
    content?: SortOrder
    processedAt?: SortOrder
    subject?: SortOrder
    provider?: SortOrder
    fromAddress?: SortOrder
    status?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    toAddress?: SortOrder
  }

  export type EmailMinOrderByAggregateInput = {
    messageId?: SortOrder
    content?: SortOrder
    processedAt?: SortOrder
    subject?: SortOrder
    provider?: SortOrder
    fromAddress?: SortOrder
    status?: SortOrder
    receivedAt?: SortOrder
    createdAt?: SortOrder
    id?: SortOrder
    brokerId?: SortOrder
    toAddress?: SortOrder
  }

  export type LoadBlastCountOrderByAggregateInput = {
    loadId?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    carrierId?: SortOrder
    blastType?: SortOrder
    blastStatus?: SortOrder
    subjectLine?: SortOrder
    messageContent?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    responseReceivedAt?: SortOrder
    responseType?: SortOrder
    responseContent?: SortOrder
    resendMessageId?: SortOrder
    twilioMessageId?: SortOrder
    datPostingId?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdBy?: SortOrder
  }

  export type LoadBlastAvgOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type LoadBlastMaxOrderByAggregateInput = {
    loadId?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    carrierId?: SortOrder
    blastType?: SortOrder
    blastStatus?: SortOrder
    subjectLine?: SortOrder
    messageContent?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    responseReceivedAt?: SortOrder
    responseType?: SortOrder
    responseContent?: SortOrder
    resendMessageId?: SortOrder
    twilioMessageId?: SortOrder
    datPostingId?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdBy?: SortOrder
  }

  export type LoadBlastMinOrderByAggregateInput = {
    loadId?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    carrierId?: SortOrder
    blastType?: SortOrder
    blastStatus?: SortOrder
    subjectLine?: SortOrder
    messageContent?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    responseReceivedAt?: SortOrder
    responseType?: SortOrder
    responseContent?: SortOrder
    resendMessageId?: SortOrder
    twilioMessageId?: SortOrder
    datPostingId?: SortOrder
    errorMessage?: SortOrder
    retryCount?: SortOrder
    createdBy?: SortOrder
  }

  export type LoadBlastSumOrderByAggregateInput = {
    retryCount?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    read?: SortOrder
    metadata?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    read?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    read?: SortOrder
    brokerId?: SortOrder
    createdAt?: SortOrder
    message?: SortOrder
  }

  export type OAuthStateCountOrderByAggregateInput = {
    createdAt?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    state?: SortOrder
    provider?: SortOrder
  }

  export type OAuthStateMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    state?: SortOrder
    provider?: SortOrder
  }

  export type OAuthStateMinOrderByAggregateInput = {
    createdAt?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    state?: SortOrder
    provider?: SortOrder
  }

  export type UserSettingsCountOrderByAggregateInput = {
    updatedAt?: SortOrder
    confidenceThresholds?: SortOrder
    id?: SortOrder
    notifications?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    updatedAt?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    updatedAt?: SortOrder
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LoadCreatecomplexityOverridesInput = {
    set: string[]
  }

  export type LoadCreatemissingFieldsInput = {
    set: string[]
  }

  export type LoadCreatecomplexityFlagsInput = {
    set: string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LoadUpdatecomplexityOverridesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type LoadUpdatemissingFieldsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type LoadUpdatecomplexityFlagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CarrierCreateserviceAreasInput = {
    set: string[]
  }

  export type CarrierCreateequipmentTypesInput = {
    set: string[]
  }

  export type CarrierUpdateserviceAreasInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CarrierUpdateequipmentTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CommunicationCreateccAddressesInput = {
    set: string[]
  }

  export type CommunicationUpdateccAddressesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailAccountCreatemonitorFoldersInput = {
    set: string[]
  }

  export type EmailAccountCreatesenderWhitelistInput = {
    set: string[]
  }

  export type EmailAccountCreatesenderBlacklistInput = {
    set: string[]
  }

  export type EmailAccountCreatesubjectFiltersInput = {
    set: string[]
  }

  export type EmailAccountUpdatemonitorFoldersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailAccountUpdatesenderWhitelistInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailAccountUpdatesenderBlacklistInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailAccountUpdatesubjectFiltersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailProcessingLogCreatecomplexityFlagsInput = {
    set: string[]
  }

  export type EmailProcessingLogUpdatecomplexityFlagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}